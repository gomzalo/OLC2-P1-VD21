"use strict";
/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function () {
    var o = function (k, v, o, l) { for (o = o || {}, l = k.length; l--; o[k[l]] = v)
        ; return o; }, $V0 = [1, 19], $V1 = [1, 20], $V2 = [1, 30], $V3 = [1, 31], $V4 = [1, 21], $V5 = [1, 22], $V6 = [1, 24], $V7 = [1, 25], $V8 = [1, 26], $V9 = [1, 27], $Va = [1, 28], $Vb = [1, 29], $Vc = [5, 22, 23, 48, 49, 84, 86, 90, 95, 104, 105, 106, 113], $Vd = [1, 58], $Ve = [1, 63], $Vf = [1, 66], $Vg = [1, 60], $Vh = [1, 61], $Vi = [1, 62], $Vj = [1, 71], $Vk = [1, 69], $Vl = [1, 70], $Vm = [1, 76], $Vn = [7, 30], $Vo = [2, 64], $Vp = [1, 90], $Vq = [1, 88], $Vr = [1, 105], $Vs = [1, 112], $Vt = [1, 108], $Vu = [1, 113], $Vv = [1, 95], $Vw = [1, 96], $Vx = [1, 99], $Vy = [1, 100], $Vz = [1, 101], $VA = [1, 102], $VB = [1, 103], $VC = [1, 104], $VD = [1, 109], $VE = [5, 7, 21, 22, 23, 30, 31, 42, 43, 45, 48, 49, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 84, 86, 90, 95, 104, 105, 106, 113], $VF = [1, 143], $VG = [1, 144], $VH = [1, 133], $VI = [1, 134], $VJ = [1, 161], $VK = [1, 164], $VL = [1, 154], $VM = [1, 155], $VN = [1, 156], $VO = [1, 157], $VP = [1, 158], $VQ = [1, 159], $VR = [1, 160], $VS = [1, 162], $VT = [1, 168], $VU = [30, 68], $VV = [1, 178], $VW = [1, 177], $VX = [1, 169], $VY = [1, 170], $VZ = [1, 171], $V_ = [1, 172], $V$ = [1, 173], $V01 = [1, 174], $V11 = [1, 175], $V21 = [1, 176], $V31 = [1, 179], $V41 = [1, 180], $V51 = [1, 181], $V61 = [1, 182], $V71 = [1, 183], $V81 = [1, 190], $V91 = [5, 7, 22, 23, 48, 49, 68, 84, 86, 90, 95, 104, 105, 106, 113], $Va1 = [5, 21, 22, 23, 48, 49, 84, 86, 90, 94, 95, 99, 101, 103, 104, 105, 106, 111, 112, 113], $Vb1 = [1, 210], $Vc1 = [1, 211], $Vd1 = [21, 23, 48, 49, 84, 86, 90, 95, 99, 101, 103, 104, 105, 106, 111, 112], $Ve1 = [1, 237], $Vf1 = [7, 21, 24, 26, 30, 43, 68], $Vg1 = [1, 240], $Vh1 = [1, 251], $Vi1 = [1, 273], $Vj1 = [1, 272], $Vk1 = [7, 21, 30], $Vl1 = [30, 45], $Vm1 = [5, 7, 21, 22, 23, 24, 30, 31, 42, 43, 44, 45, 48, 49, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 84, 86, 87, 88, 90, 95, 104, 105, 106, 113], $Vn1 = [1, 303], $Vo1 = [5, 7, 21, 22, 23, 30, 31, 42, 43, 45, 48, 49, 53, 54, 59, 60, 61, 62, 63, 64, 65, 68, 84, 86, 90, 95, 104, 105, 106, 113], $Vp1 = [5, 7, 21, 22, 23, 30, 31, 42, 43, 45, 48, 49, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 68, 84, 86, 90, 95, 104, 105, 106, 113], $Vq1 = [5, 7, 21, 22, 23, 30, 31, 45, 48, 49, 59, 60, 63, 64, 65, 68, 84, 86, 90, 95, 104, 105, 106, 113], $Vr1 = [5, 21, 22, 23, 48, 49, 84, 86, 90, 95, 99, 101, 103, 104, 105, 106, 111, 112, 113], $Vs1 = [1, 317], $Vt1 = [1, 323], $Vu1 = [1, 322], $Vv1 = [7, 21, 24, 26, 30, 43, 44, 68], $Vw1 = [21, 99, 101];
    var parser = { trace: function trace() { },
        yy: {},
        symbols_: { "error": 2, "ini": 3, "gramatica_proyecto": 4, "EOF": 5, "definicion_types": 6, "PTCOMA": 7, "declaracion_variables": 8, "llamadaMetodo": 9, "decremento": 10, "incremento": 11, "sentencia_if": 12, "sentencia_switch": 13, "asignacion_var": 14, "sentencia_while": 15, "sentencia_do_while": 16, "sentencia_for": 17, "declaracion_funcion": 18, "sentencia_pop": 19, "sentencia_push": 20, "LLADER": 21, "TYPE": 22, "id": 23, "S_IGUAL": 24, "bloque_type": 25, "LLAIZQ": 26, "cuerpo_bloque_type": 27, "opcion_separacion": 28, "sentencia_type": 29, "COMA": 30, "DOSPUNTOS": 31, "tipo_dato": 32, "STRING_0": 33, "STRING_1": 34, "NUMBER_0": 35, "NUMBER_1": 36, "BOOLEAN_0": 37, "BOOLEAN_1": 38, "VOID": 39, "dim": 40, "ARRAY": 41, "MENOR": 42, "MAYOR": 43, "CORIZQ": 44, "CORDER": 45, "tipo_variable": 46, "lista_id": 47, "LET": 48, "CONST": 49, "opcion_id": 50, "asignacion_variable": 51, "E": 52, "MAS": 53, "MENOS": 54, "POR": 55, "DIVIDIDO": 56, "MOD": 57, "EXPONENCIACION": 58, "IGUALDAD": 59, "DESIGUALDAD": 60, "MAYOR_IGUAL": 61, "MENOR_IGUAL": 62, "S_TERNARIO": 63, "OR": 64, "AND": 65, "NOT": 66, "PARIZQ": 67, "PARDER": 68, "DECIMAL": 69, "ENTERO": 70, "TRUE": 71, "FALSE": 72, "NULL": 73, "creacion_type": 74, "cadena": 75, "creacion_arreglo": 76, "acceso_arreglo": 77, "PUNTO": 78, "LENGTH": 79, "cuerpo_creacion_type": 80, "declaracion_type": 81, "cuerpo_arreglo": 82, "cuerpo_parametro": 83, "CONSOLE": 84, "LOG": 85, "GRAFICAR_TS": 86, "DECREMENTO": 87, "INCREMENTO": 88, "dim2": 89, "IF": 90, "bloque": 91, "else_if": 92, "s_else": 93, "ELSE": 94, "SWITCH": 95, "lista_case": 96, "sentencia_default": 97, "sentencia_case": 98, "CASE": 99, "cuerpo_bloque": 100, "DEFAULT": 101, "sentencia_return": 102, "RETURN": 103, "WHILE": 104, "DO": 105, "FOR": 106, "inicializacion": 107, "actualizacion": 108, "OF": 109, "IN": 110, "BREAK": 111, "CONTINUE": 112, "FUNCTION": 113, "lista_parametros": 114, "parametro": 115, "PUSH": 116, "POP": 117, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 5: "EOF", 7: "PTCOMA", 21: "LLADER", 22: "TYPE", 23: "id", 24: "S_IGUAL", 26: "LLAIZQ", 30: "COMA", 31: "DOSPUNTOS", 33: "STRING_0", 34: "STRING_1", 35: "NUMBER_0", 36: "NUMBER_1", 37: "BOOLEAN_0", 38: "BOOLEAN_1", 39: "VOID", 41: "ARRAY", 42: "MENOR", 43: "MAYOR", 44: "CORIZQ", 45: "CORDER", 48: "LET", 49: "CONST", 53: "MAS", 54: "MENOS", 55: "POR", 56: "DIVIDIDO", 57: "MOD", 58: "EXPONENCIACION", 59: "IGUALDAD", 60: "DESIGUALDAD", 61: "MAYOR_IGUAL", 62: "MENOR_IGUAL", 63: "S_TERNARIO", 64: "OR", 65: "AND", 66: "NOT", 67: "PARIZQ", 68: "PARDER", 69: "DECIMAL", 70: "ENTERO", 71: "TRUE", 72: "FALSE", 73: "NULL", 75: "cadena", 78: "PUNTO", 79: "LENGTH", 84: "CONSOLE", 85: "LOG", 86: "GRAFICAR_TS", 87: "DECREMENTO", 88: "INCREMENTO", 90: "IF", 94: "ELSE", 95: "SWITCH", 99: "CASE", 101: "DEFAULT", 103: "RETURN", 104: "WHILE", 105: "DO", 106: "FOR", 109: "OF", 110: "IN", 111: "BREAK", 112: "CONTINUE", 113: "FUNCTION", 116: "PUSH", 117: "POP" },
        productions_: [0, [3, 2], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 2], [4, 2], [4, 3], [4, 2], [4, 2], [4, 2], [4, 2], [4, 3], [4, 3], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 1], [4, 1], [4, 1], [4, 1], [4, 1], [4, 1], [4, 1], [4, 2], [4, 2], [4, 2], [4, 2], [6, 4], [25, 3], [27, 3], [27, 1], [28, 1], [28, 1], [29, 3], [32, 1], [32, 1], [32, 1], [32, 1], [32, 1], [32, 1], [32, 1], [32, 1], [32, 2], [32, 2], [32, 2], [32, 2], [32, 2], [32, 2], [32, 2], [32, 2], [32, 4], [32, 1], [40, 3], [40, 2], [8, 2], [46, 1], [46, 1], [47, 3], [47, 1], [50, 1], [50, 3], [50, 2], [50, 4], [51, 2], [52, 3], [52, 3], [52, 3], [52, 3], [52, 2], [52, 3], [52, 3], [52, 3], [52, 3], [52, 3], [52, 3], [52, 3], [52, 3], [52, 5], [52, 3], [52, 3], [52, 2], [52, 1], [52, 1], [52, 3], [52, 1], [52, 1], [52, 1], [52, 1], [52, 1], [52, 1], [52, 1], [52, 1], [52, 1], [52, 1], [52, 1], [52, 1], [52, 3], [74, 3], [80, 3], [80, 1], [81, 3], [76, 2], [76, 3], [82, 3], [82, 1], [9, 3], [9, 4], [9, 6], [9, 3], [83, 3], [83, 1], [10, 2], [10, 2], [11, 2], [11, 2], [77, 2], [89, 4], [89, 3], [12, 5], [12, 6], [92, 1], [92, 6], [92, 7], [93, 2], [13, 6], [13, 7], [13, 8], [13, 7], [96, 2], [96, 1], [98, 4], [98, 4], [98, 3], [97, 3], [97, 3], [97, 2], [102, 1], [102, 2], [15, 5], [16, 7], [17, 9], [17, 8], [17, 8], [107, 1], [107, 1], [108, 1], [108, 1], [108, 1], [91, 2], [91, 3], [100, 3], [100, 3], [100, 3], [100, 2], [100, 2], [100, 3], [100, 3], [100, 3], [100, 3], [100, 2], [100, 2], [100, 2], [100, 3], [100, 3], [100, 3], [100, 2], [100, 2], [100, 1], [100, 2], [100, 2], [100, 2], [100, 2], [100, 1], [100, 2], [100, 1], [100, 1], [100, 1], [100, 2], [100, 2], [100, 2], [100, 2], [100, 2], [14, 3], [14, 3], [18, 7], [18, 8], [18, 5], [18, 6], [114, 3], [114, 1], [115, 3], [20, 6], [19, 5]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
            /* this == yyval */
            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:
                    raiz = this.$;
                    return raiz;
                    break;
                case 2:
                case 3:
                    this.$ = $$[$0 - 2];
                    this.$.getHijos().push($$[$0 - 1]);
                    break;
                case 4:
                case 5:
                case 6:
                case 9:
                case 14:
                case 15:
                    this.$ = $$[$0 - 2];
                    this.$.getHijos().push($$[$0 - 1]);
                    break;
                case 7:
                case 8:
                case 10:
                case 11:
                case 12:
                case 13:
                    this.$ = $$[$0 - 1];
                    this.$.getHijos().push($$[$0]);
                    break;
                case 16:
                case 17:
                    this.$ = new S("S", null, -1, -1);
                    this.$.getHijos().push($$[$0 - 1]);
                    break;
                case 18:
                case 19:
                case 20:
                case 28:
                case 29:
                    this.$ = new S("S", null, -1, -1);
                    this.$.getHijos().push($$[$0 - 1]);
                    break;
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                    this.$ = new S("S", null, -1, -1);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 30:
                    Lista_Error.getInstancia().push(new Nodo_Error(TipoError.ERROR_SINTACTICO, 'No se esperaba el símbolo: ' + yytext + '.', _$[$0 - 1].first_line, _$[$0 - 1].first_column));
                    break;
                case 31:
                    Lista_Error.getInstancia().push(new Nodo_Error(TipoError.ERROR_SINTACTICO, 'No se esperaba el símbolo: ' + yytext + '.', _$[$0 - 1].first_line, _$[$0 - 1].first_column));
                    break;
                case 32:
                    this.$ = new Declaracion_Types();
                    let identificadorType = new Identificador("Identificador", $$[$0 - 2], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    this.$.getHijos().push(identificadorType);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 33:
                case 88:
                case 102:
                case 107:
                case 154:
                    this.$ = $$[$0 - 1];
                    break;
                case 34:
                    this.$ = $$[$0 - 2];
                    this.$.getHijos().push($$[$0]);
                    break;
                case 35:
                    this.$ = new Bloque_Type();
                    this.$.getHijos().push($$[$0]);
                    break;
                case 38:
                    this.$ = new Sentencia_Type();
                    let identificadoSentenciaType = new Identificador("Identificador", $$[$0 - 2], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    this.$.getHijos().push(identificadoSentenciaType);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 39:
                case 40:
                    this.$ = new Tipo_Dato("TIPO_DATO", "String", _$[$0].first_line, _$[$0].first_column);
                    break;
                case 41:
                case 42:
                    this.$ = new Tipo_Dato("TIPO_DATO", "Number", _$[$0].first_line, _$[$0].first_column);
                    break;
                case 43:
                case 44:
                    this.$ = new Tipo_Dato("TIPO_DATO", "Boolean", _$[$0].first_line, _$[$0].first_column);
                    break;
                case 45:
                    this.$ = new Tipo_Dato("TIPO_DATO", "Void", _$[$0].first_line, _$[$0].first_column);
                    break;
                case 46:
                    this.$ = new Identificador("Identificador", $$[$0], _$[$0].first_line, _$[$0].first_column);
                    break;
                case 47:
                    this.$ = new Tipo_Arreglo("ARREGLO", null, -1, -1);
                    let nodoTipoDato1 = new Tipo_Dato("TIPO_DATO", "String", _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    this.$.getHijos().push(nodoTipoDato1);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 48:
                    this.$ = new Tipo_Arreglo("ARREGLO", null, -1, -1);
                    let nodoTipoDato2 = new Tipo_Dato("TIPO_DATO", "String", _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    this.$.getHijos().push(nodoTipoDato2);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 49:
                    this.$ = new Tipo_Arreglo("ARREGLO", null, -1, -1);
                    let nodoTipoDato3 = new Tipo_Dato("TIPO_DATO", "Number", _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    this.$.getHijos().push(nodoTipoDato3);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 50:
                    this.$ = new Tipo_Arreglo("ARREGLO", null, -1, -1);
                    let nodoTipoDato4 = new Tipo_Dato("TIPO_DATO", "Number", _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    this.$.getHijos().push(nodoTipoDato4);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 51:
                    this.$ = new Tipo_Arreglo("ARREGLO", null, -1, -1);
                    let nodoTipoDato5 = new Tipo_Dato("TIPO_DATO", "Boolean", _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    this.$.getHijos().push(nodoTipoDato5);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 52:
                    this.$ = new Tipo_Arreglo("ARREGLO", null, -1, -1);
                    let nodoTipoDato6 = new Tipo_Dato("TIPO_DATO", "Boolean", _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    this.$.getHijos().push(nodoTipoDato6);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 53:
                    this.$ = new Tipo_Arreglo("ARREGLO", null, -1, -1);
                    let nodoTipoDato7 = new Tipo_Dato("TIPO_DATO", "Void", _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    this.$.getHijos().push(nodoTipoDato7);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 54:
                    this.$ = new Tipo_Arreglo("ARREGLO", null, -1, -1);
                    let nodoTipoDato8 = new Identificador("Identificador", $$[$0 - 1], _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    this.$.getHijos().push(nodoTipoDato8);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 55:
                    this.$ = new Tipo_Arreglo("ARRAY", null, -1, -1);
                    this.$.getHijos().push($$[$0 - 1]);
                    break;
                case 56:
                    break;
                case 57:
                    let nodo = new Tipo_Arreglo("[]", null, -1, -1);
                    this.$ = $$[$0 - 2];
                    this.$.getHijos().push(nodo);
                    break;
                case 58:
                    this.$ = new Tipo_Arreglo("DIMENSIONES", null, -1, -1);
                    let nodo1 = new Tipo_Arreglo("[]", null, -1, -1);
                    this.$.getHijos().push(nodo1);
                    break;
                case 59:
                    this.$ = new DECLARACION_VARIABLES("DECLARACION_VARIABLE", null, -1, -1);
                    this.$.getHijos().push($$[$0 - 1]);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 60:
                    this.$ = new Tipo_Variable("LET", null, _$[$0].first_line, _$[$0].first_column);
                    break;
                case 61:
                    this.$ = new Tipo_Variable("CONST", null, _$[$0].first_line, _$[$0].first_column);
                    break;
                case 62:
                    this.$ = $$[$0 - 2];
                    this.$.getHijos().push($$[$0]);
                    break;
                case 63:
                    this.$ = new Lista_Variables("LISTA_VARIABLES");
                    this.$.getHijos().push($$[$0]);
                    break;
                case 64:
                    this.$ = new Variable();
                    let identificador = new Identificador("Identificador", $$[$0], _$[$0].first_line, _$[$0].first_column);
                    this.$.getHijos().push(identificador);
                    break;
                case 65:
                    this.$ = new Variable();
                    let identificador1 = new Identificador("Identificador", $$[$0 - 2], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    this.$.getHijos().push(identificador1);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 66:
                    this.$ = new Variable();
                    let identificador2 = new Identificador("Identificador", $$[$0 - 1], _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    this.$.getHijos().push(identificador2);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 67:
                    this.$ = new Variable();
                    let identificador3 = new Identificador("Identificador", $$[$0 - 3], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                    this.$.getHijos().push(identificador3);
                    this.$.getHijos().push($$[$0 - 1]);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 68:
                case 125:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                    this.$ = $$[$0];
                    break;
                case 69:
                    this.$ = new Expresion("E", null, -1, -1);
                    this.$.getHijos().push($$[$0 - 2]);
                    let operador = new Operador("+", null, _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    this.$.getHijos().push(operador);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 70:
                    this.$ = new Expresion("E", null, -1, -1);
                    this.$.getHijos().push($$[$0 - 2]);
                    let operador1 = new Operador("-", null, _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    this.$.getHijos().push(operador1);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 71:
                    this.$ = new Expresion("E", null, -1, -1);
                    this.$.getHijos().push($$[$0 - 2]);
                    let operador2 = new Operador("*", null, _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    this.$.getHijos().push(operador2);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 72:
                    this.$ = new Expresion("E", null, -1, -1);
                    this.$.getHijos().push($$[$0 - 2]);
                    let operador3 = new Operador("/", null, _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    this.$.getHijos().push(operador3);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 73:
                    this.$ = new Expresion("E", null, -1, -1);
                    let negativo = new Numero_Negativo("Numero Negativo", null, _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    negativo.getHijos().push($$[$0]);
                    this.$.getHijos().push(negativo);
                    break;
                case 74:
                    this.$ = new Expresion("E", null, -1, -1);
                    this.$.getHijos().push($$[$0 - 2]);
                    let operador4 = new Operador("%", null, _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    this.$.getHijos().push(operador4);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 75:
                    this.$ = new Expresion("E", null, -1, -1);
                    this.$.getHijos().push($$[$0 - 2]);
                    let operador5 = new Operador("**", null, _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    this.$.getHijos().push(operador5);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 76:
                    this.$ = new Expresion("E", null, -1, -1);
                    this.$.getHijos().push($$[$0 - 2]);
                    let operador6 = new Operador("==", null, _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    this.$.getHijos().push(operador6);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 77:
                    this.$ = new Expresion("E", null, -1, -1);
                    this.$.getHijos().push($$[$0 - 2]);
                    let operador7 = new Operador("!=", null, _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    this.$.getHijos().push(operador7);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 78:
                    this.$ = new Expresion("E", null, -1, -1);
                    this.$.getHijos().push($$[$0 - 2]);
                    let operador8 = new Operador(">", null, _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    this.$.getHijos().push(operador8);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 79:
                    this.$ = new Expresion("E", null, -1, -1);
                    this.$.getHijos().push($$[$0 - 2]);
                    let operador9 = new Operador("<", null, _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    this.$.getHijos().push(operador9);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 80:
                    this.$ = new Expresion("E", null, -1, -1);
                    this.$.getHijos().push($$[$0 - 2]);
                    let operador10 = new Operador(">=", null, _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    this.$.getHijos().push(operador10);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 81:
                    this.$ = new Expresion("E", null, -1, -1);
                    this.$.getHijos().push($$[$0 - 2]);
                    let operador11 = new Operador("<=", null, _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    this.$.getHijos().push(operador11);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 82:
                    this.$ = new Expresion("E", null, -1, -1);
                    this.$.getHijos().push($$[$0 - 4]);
                    let operador12 = new Operador("?", null, _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                    this.$.getHijos().push(operador12);
                    this.$.getHijos().push($$[$0 - 2]);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 83:
                    this.$ = new Expresion("E", null, -1, -1);
                    let operador13 = new Operador("||", null, _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    this.$.getHijos().push($$[$0 - 2]);
                    this.$.getHijos().push(operador13);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 84:
                    this.$ = new Expresion("E", null, -1, -1);
                    let operador14 = new Operador("&&", null, _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    this.$.getHijos().push($$[$0 - 2]);
                    this.$.getHijos().push(operador14);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 85:
                    this.$ = new Expresion("E", null, -1, -1);
                    let not = new Operador("!", null, _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    this.$.getHijos().push(not);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 86:
                    this.$ = new Expresion("E", null, -1, -1);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 87:
                    this.$ = new Expresion("E", null, -1, -1);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 89:
                    this.$ = new Expresion("E", null, -1, -1);
                    let decimal = new Dato_Primitivo("Number", Number($$[$0]), _$[$0].first_line, _$[$0].first_column);
                    this.$.getHijos().push(decimal);
                    break;
                case 90:
                    this.$ = new Expresion("E", null, -1, -1);
                    let entero = new Dato_Primitivo("Number", Number($$[$0]), _$[$0].first_line, _$[$0].first_column);
                    this.$.getHijos().push(entero);
                    break;
                case 91:
                    this.$ = new Expresion("E", null, -1, -1);
                    let booleano1 = new Dato_Primitivo("Boolean", Boolean(1), _$[$0].first_line, _$[$0].first_column);
                    this.$.getHijos().push(booleano1);
                    break;
                case 92:
                    this.$ = new Expresion("E", null, -1, -1);
                    let booleano2 = new Dato_Primitivo("Boolean", Boolean(0), _$[$0].first_line, _$[$0].first_column);
                    this.$.getHijos().push(booleano2);
                    break;
                case 93:
                    this.$ = new Expresion("E", null, -1, -1);
                    let typeNull = new Dato_Primitivo("Null", null, _$[$0].first_line, _$[$0].first_column);
                    this.$.getHijos().push(typeNull);
                    break;
                case 94:
                    this.$ = new Expresion("E", null, -1, -1);
                    let identificador4 = new Identificador("Identificador", $$[$0], _$[$0].first_line, _$[$0].first_column);
                    this.$.getHijos().push(identificador4);
                    break;
                case 95:
                    this.$ = new Expresion("E", null, -1, -1);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 96:
                    this.$ = new Expresion("E", null, -1, -1);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 97:
                    this.$ = new Expresion("E", null, -1, -1);
                    let cad = new Dato_Primitivo("Void", $$[$0], _$[$0].first_line, _$[$0].first_column);
                    this.$.getHijos().push(cad);
                    break;
                case 98:
                    this.$ = new Expresion("E", null, -1, -1);
                    let cad1 = new Dato_Primitivo("String", $$[$0], _$[$0].first_line, _$[$0].first_column);
                    this.$.getHijos().push(cad1);
                    break;
                case 99:
                    this.$ = new Expresion("E", null, -1, -1);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 100:
                    this.$ = new Expresion("E", null, -1, -1);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 101:
                    this.$ = new Expresion("E", null, -1, -1);
                    let tamArreglo = new Length();
                    let varId = new Identificador("Identificador", $$[$0 - 2], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    tamArreglo.getHijos().push(varId);
                    this.$.getHijos().push(tamArreglo);
                    break;
                case 103:
                    this.$ = $$[$0 - 2];
                    this.$.getHijos().push($$[$0]);
                    break;
                case 104:
                    this.$ = new Type();
                    this.$.getHijos().push($$[$0]);
                    break;
                case 105:
                    this.$ = new Atributo_Type();
                    let identificadorDeclaracionType = new Identificador("Identificador", $$[$0 - 2], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    this.$.getHijos().push(identificadorDeclaracionType);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 106:
                    this.$ = new Cuerpo_Arreglo("CUERPO_ARRAY");
                    break;
                case 108:
                    if ($$[$0].getHijos()[0].getNombreNodo() == "CUERPO_ARRAY") {
                        this.$.getHijos().push($$[$0].getHijos()[0]);
                    }
                    else {
                        this.$.getHijos().push($$[$0]);
                    }
                    break;
                case 109:
                    this.$ = new Cuerpo_Arreglo("CUERPO_ARRAY");
                    if ($$[$0].getHijos()[0].getNombreNodo() == "CUERPO_ARRAY") {
                        this.$.getHijos().push($$[$0].getHijos()[0]);
                    }
                    else {
                        this.$.getHijos().push($$[$0]);
                    }
                    break;
                case 110:
                    this.$ = new Llamada_Metodo(-1, -1);
                    let id = new Identificador("Identificador", $$[$0 - 2], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    let listaParametros = new Lista_Parametros();
                    this.$.getHijos().push(id);
                    this.$.getHijos().push(listaParametros);
                    break;
                case 111:
                    this.$ = new Llamada_Metodo(-1, -1);
                    let id1 = new Identificador("Identificador", $$[$0 - 3], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                    this.$.getHijos().push(id1);
                    this.$.getHijos().push($$[$0 - 1]);
                    break;
                case 112:
                    this.$ = new LOG(_$[$0 - 5].first_line, _$[$0 - 5].first_column);
                    this.$.getHijos().push($$[$0 - 1]);
                    break;
                case 113:
                    this.$ = new GRAFICAR_TS(_$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    break;
                case 114:
                case 193:
                    this.$ = $$[$0 - 2];
                    this.$.getHijos().push($$[$0]);
                    break;
                case 115:
                    this.$ = new Lista_Parametros();
                    this.$.getHijos().push($$[$0]);
                    break;
                case 116:
                    this.$ = new Decremento("Decremento", null, _$[$0].first_line, _$[$0].first_column);
                    let identificador5 = new Identificador("Identificador", $$[$0 - 1], _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    this.$.getHijos().push(identificador5);
                    break;
                case 117:
                    this.$ = new Decremento("Decremento", null, _$[$0].first_line, _$[$0].first_column);
                    this.$.getHijos().push($$[$0 - 1]);
                    break;
                case 118:
                    this.$ = new Incremento("Incremento", null, _$[$0].first_line, _$[$0].first_column);
                    let identificador6 = new Identificador("Identificador", $$[$0 - 1], _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    this.$.getHijos().push(identificador6);
                    break;
                case 119:
                    this.$ = new Incremento("Incremento", null, _$[$0].first_line, _$[$0].first_column);
                    this.$.getHijos().push($$[$0 - 1]);
                    break;
                case 120:
                    this.$ = new Acceso_Arreglos();
                    let identificador7 = new Identificador("Identificador", $$[$0 - 1], _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    this.$.getHijos().push(identificador7);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 121:
                    this.$ = $$[$0 - 3];
                    this.$.getHijos().push($$[$0 - 1]);
                    break;
                case 122:
                    this.$ = new Tipo_Arreglo("DIMENSIONES", null, -1, -1);
                    this.$.getHijos().push($$[$0 - 1]);
                    break;
                case 123:
                    this.$ = new Sentencia_If(_$[$0 - 4].first_line, _$[$0 - 4].first_column);
                    this.$.getHijos().push($$[$0 - 2]);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 124:
                    this.$ = new Sentencia_If(_$[$0 - 5].first_line, _$[$0 - 5].first_column);
                    this.$.getHijos().push($$[$0 - 3]);
                    this.$.getHijos().push($$[$0 - 1]);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 126:
                    this.$ = new Sentencia_Else_If(_$[$0 - 5].first_line, _$[$0 - 5].first_column);
                    this.$.getHijos().push($$[$0 - 2]);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 127:
                    this.$ = new Sentencia_Else_If(_$[$0 - 6].first_line, _$[$0 - 6].first_column);
                    this.$.getHijos().push($$[$0 - 3]);
                    this.$.getHijos().push($$[$0 - 1]);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 128:
                    this.$ = new Sentencia_Else(_$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 129:
                    this.$ = new Sentencia_Switch(_$[$0 - 5].first_line, _$[$0 - 5].first_column);
                    this.$.getHijos().push($$[$0 - 3]);
                    break;
                case 130:
                    this.$ = new Sentencia_Switch(_$[$0 - 6].first_line, _$[$0 - 6].first_column);
                    this.$.getHijos().push($$[$0 - 4]);
                    this.$.getHijos().push($$[$0 - 1]);
                    break;
                case 131:
                    this.$ = new Sentencia_Switch(_$[$0 - 7].first_line, _$[$0 - 7].first_column);
                    this.$.getHijos().push($$[$0 - 5]);
                    this.$.getHijos().push($$[$0 - 2]);
                    this.$.getHijos().push($$[$0 - 1]);
                    break;
                case 132:
                    this.$ = new Sentencia_Switch(_$[$0 - 6].first_line, _$[$0 - 6].first_column);
                    this.$.getHijos().push($$[$0 - 4]);
                    this.$.getHijos().push($$[$0 - 1]);
                    break;
                case 133:
                    this.$ = $$[$0 - 1];
                    this.$.getHijos().push($$[$0]);
                    break;
                case 134:
                    this.$ = new Lista_Case();
                    this.$.getHijos().push($$[$0]);
                    break;
                case 135:
                case 136:
                    this.$ = new Case(_$[$0 - 3].first_line, _$[$0 - 3].first_column);
                    this.$.getHijos().push($$[$0 - 2]);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 137:
                    this.$ = new Case(_$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    let bloqueSentencias = new Bloque_Sentencia();
                    this.$.getHijos().push($$[$0 - 1]);
                    this.$.getHijos().push(bloqueSentencias);
                    break;
                case 138:
                case 139:
                    this.$ = new Default(_$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 140:
                    this.$ = new Default(_$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    let bloqueSentencias1 = new Bloque_Sentencia();
                    this.$.getHijos().push(bloqueSentencias1);
                    break;
                case 141:
                    this.$ = new Sentencia_Return(_$[$0].first_line, _$[$0].first_column);
                    let nodoVoid = new Dato_Primitivo("Void", undefined, _$[$0].first_line, _$[$0].first_column);
                    this.$.getHijos().push(nodoVoid);
                    break;
                case 142:
                    this.$ = new Sentencia_Return(_$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 143:
                    this.$ = new Sentencia_While(_$[$0 - 4].first_line, _$[$0 - 4].first_column);
                    this.$.getHijos().push($$[$0 - 2]);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 144:
                    this.$ = new Sentencia_Do_While(_$[$0 - 4].first_line, _$[$0 - 4].first_column);
                    this.$.getHijos().push($$[$0 - 5]);
                    this.$.getHijos().push($$[$0 - 2]);
                    break;
                case 145:
                    this.$ = new Sentencia_For_Indices(_$[$0 - 8].first_line, _$[$0 - 8].first_column);
                    this.$.getHijos().push($$[$0 - 6]);
                    this.$.getHijos().push($$[$0 - 4]);
                    this.$.getHijos().push($$[$0 - 2]);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 146:
                    this.$ = new Sentencia_For_Of(_$[$0 - 7].first_line, _$[$0 - 7].first_column);
                    let idFor = new Identificador("Identificador", $$[$0 - 4], _$[$0 - 4].first_line, _$[$0 - 4].first_column);
                    this.$.getHijos().push($$[$0 - 5]);
                    this.$.getHijos().push(idFor);
                    this.$.getHijos().push($$[$0 - 2]);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 147:
                    this.$ = new Sentencia_For_In(_$[$0 - 7].first_line, _$[$0 - 7].first_column);
                    let idFor1 = new Identificador("Identificador", $$[$0 - 4], _$[$0 - 4].first_line, _$[$0 - 4].first_column);
                    this.$.getHijos().push($$[$0 - 5]);
                    this.$.getHijos().push(idFor1);
                    this.$.getHijos().push($$[$0 - 2]);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 153:
                    this.$ = new Bloque_Sentencia();
                    break;
                case 155:
                    this.$ = $$[$0 - 2];
                    this.$.getHijos().push($$[$0 - 1]);
                    break;
                case 156:
                case 157:
                case 160:
                case 163:
                case 167:
                case 168:
                case 169:
                    this.$ = $$[$0 - 2];
                    this.$.getHijos().push($$[$0 - 1]);
                    break;
                case 158:
                case 159:
                    this.$ = $$[$0 - 1];
                    this.$.getHijos().push($$[$0]);
                    break;
                case 161:
                    this.$ = $$[$0 - 2];
                    let sentBreak = new Sentencia_Break(_$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    this.$.getHijos().push(sentBreak);
                    break;
                case 162:
                    this.$ = $$[$0 - 2];
                    let sentCont = new Sentencia_Continue(_$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    this.$.getHijos().push(sentCont);
                    break;
                case 164:
                case 165:
                case 166:
                    this.$ = $$[$0 - 1];
                    this.$.getHijos().push($$[$0]);
                    break;
                case 170:
                case 171:
                    this.$ = new Bloque_Sentencia();
                    this.$.getHijos().push($$[$0 - 1]);
                    break;
                case 172:
                case 177:
                case 179:
                case 180:
                case 181:
                    this.$ = new Bloque_Sentencia();
                    this.$.getHijos().push($$[$0]);
                    break;
                case 173:
                case 174:
                case 178:
                    this.$ = new Bloque_Sentencia();
                    this.$.getHijos().push($$[$0 - 1]);
                    break;
                case 175:
                    this.$ = new Bloque_Sentencia();
                    let sentBreak1 = new Sentencia_Break(_$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    this.$.getHijos().push(sentBreak1);
                    break;
                case 176:
                    this.$ = new Bloque_Sentencia();
                    let sentCont1 = new Sentencia_Continue(_$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    this.$.getHijos().push(sentCont1);
                    break;
                case 182:
                case 183:
                case 184:
                    this.$ = new Bloque_Sentencia();
                    this.$.getHijos().push($$[$0 - 1]);
                    break;
                case 185:
                case 186:
                    Lista_Error.getInstancia().push(new Nodo_Error(TipoError.ERROR_SINTACTICO, 'No se esperaba el símbolo: ' + yytext + '.', _$[$0 - 1].first_line, _$[$0 - 1].first_column));
                    break;
                case 187:
                    this.$ = new Asignacion_Variable();
                    let identificador8 = new Identificador("Identificador", $$[$0 - 2], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    this.$.getHijos().push(identificador8);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 188:
                    this.$ = new Asignacion_Variable();
                    this.$.getHijos().push($$[$0 - 2]);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 189:
                    this.$ = new Declaracion_Funcion();
                    let id3 = new Identificador("Identificador", $$[$0 - 5], _$[$0 - 5].first_line, _$[$0 - 5].first_column);
                    let listaParametros1 = new Lista_Parametros();
                    this.$.getHijos().push(id3);
                    this.$.getHijos().push(listaParametros1);
                    this.$.getHijos().push($$[$0 - 1]);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 190:
                    this.$ = new Declaracion_Funcion();
                    let id4 = new Identificador("Identificador", $$[$0 - 6], _$[$0 - 6].first_line, _$[$0 - 6].first_column);
                    this.$.getHijos().push(id4);
                    this.$.getHijos().push($$[$0 - 4]);
                    this.$.getHijos().push($$[$0 - 1]);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 191:
                    this.$ = new Declaracion_Funcion();
                    let id5 = new Identificador("Identificador", $$[$0 - 3], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                    let listaParametros2 = new Lista_Parametros();
                    let tipoDato = new Tipo_Dato("TIPO_DATO", "Void", -1, -1);
                    this.$.getHijos().push(id5);
                    this.$.getHijos().push(listaParametros2);
                    this.$.getHijos().push(tipoDato);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 192:
                    this.$ = new Declaracion_Funcion();
                    let id6 = new Identificador("Identificador", $$[$0 - 4], _$[$0 - 4].first_line, _$[$0 - 4].first_column);
                    let tipoDato_1 = new Tipo_Dato("TIPO_DATO", "Void", -1, -1);
                    this.$.getHijos().push(id6);
                    this.$.getHijos().push($$[$0 - 2]);
                    this.$.getHijos().push(tipoDato_1);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 194:
                    this.$ = new Lista_Parametros();
                    this.$.getHijos().push($$[$0]);
                    break;
                case 195:
                    this.$ = new Parametro();
                    let id7 = new Identificador("Identificador", $$[$0 - 2], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    this.$.getHijos().push(id7);
                    this.$.getHijos().push($$[$0]);
                    break;
                case 196:
                    this.$ = new Sentencia_Push();
                    let identificadorPush = new Identificador("Identificador", $$[$0 - 5], _$[$0 - 5].first_line, _$[$0 - 5].first_column);
                    this.$.getHijos().push(identificadorPush);
                    this.$.getHijos().push($$[$0 - 1]);
                    break;
                case 197:
                    this.$ = new Sentencia_Pop();
                    let identificadorSentenciaPop = new Identificador("Identificador", $$[$0 - 4], _$[$0 - 4].first_line, _$[$0 - 4].first_column);
                    this.$.getHijos().push(identificadorSentenciaPop);
                    break;
            }
        },
        table: [{ 2: [1, 17], 3: 1, 4: 2, 6: 4, 8: 3, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 16, 20: 15, 22: $V0, 23: $V1, 46: 18, 48: $V2, 49: $V3, 77: 23, 84: $V4, 86: $V5, 90: $V6, 95: $V7, 104: $V8, 105: $V9, 106: $Va, 113: $Vb }, { 1: [3] }, { 5: [1, 32], 6: 33, 8: 34, 9: 35, 10: 36, 11: 37, 12: 38, 13: 39, 14: 40, 15: 41, 16: 42, 17: 43, 18: 44, 19: 45, 20: 46, 22: $V0, 23: $V1, 46: 18, 48: $V2, 49: $V3, 77: 23, 84: $V4, 86: $V5, 90: $V6, 95: $V7, 104: $V8, 105: $V9, 106: $Va, 113: $Vb }, { 7: [1, 47] }, { 7: [1, 48] }, { 7: [1, 49] }, { 7: [1, 50] }, { 7: [1, 51] }, o($Vc, [2, 21]), o($Vc, [2, 22]), o($Vc, [2, 23]), o($Vc, [2, 24]), o($Vc, [2, 25]), o($Vc, [2, 26]), o($Vc, [2, 27]), { 7: [1, 52] }, { 7: [1, 53] }, { 7: [1, 54], 21: [1, 55] }, { 23: $Vd, 47: 56, 50: 57 }, { 23: [1, 59] }, { 24: $Ve, 44: $Vf, 67: $Vg, 78: [1, 64], 87: $Vh, 88: $Vi, 89: 65 }, { 78: [1, 67] }, { 67: [1, 68] }, { 24: $Vj, 87: $Vk, 88: $Vl }, { 67: [1, 72] }, { 67: [1, 73] }, { 67: [1, 74] }, { 26: $Vm, 91: 75 }, { 67: [1, 77] }, { 23: [1, 78] }, { 23: [2, 60] }, { 23: [2, 61] }, { 1: [2, 1] }, { 7: [1, 79] }, { 7: [1, 80] }, { 7: [1, 81] }, { 7: [1, 82] }, { 7: [1, 83] }, o($Vc, [2, 7]), o($Vc, [2, 8]), { 7: [1, 84] }, o($Vc, [2, 10]), o($Vc, [2, 11]), o($Vc, [2, 12]), o($Vc, [2, 13]), { 7: [1, 85] }, { 7: [1, 86] }, o($Vc, [2, 16]), o($Vc, [2, 17]), o($Vc, [2, 18]), o($Vc, [2, 19]), o($Vc, [2, 20]), o($Vc, [2, 28]), o($Vc, [2, 29]), o($Vc, [2, 30]), o($Vc, [2, 31]), { 7: [2, 59], 30: [1, 87] }, o($Vn, [2, 63]), o($Vn, $Vo, { 51: 89, 24: $Vp, 31: $Vq }), { 24: [1, 91] }, { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 94, 54: $Vv, 66: $Vw, 67: $Vx, 68: [1, 92], 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 83: 93, 84: $V4, 86: $V5 }, o($VE, [2, 116]), o($VE, [2, 118]), { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 114, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, { 116: [1, 115], 117: [1, 116] }, o([5, 7, 21, 22, 23, 24, 30, 31, 42, 43, 45, 48, 49, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 84, 86, 87, 88, 90, 95, 104, 105, 106, 113], [2, 120], { 44: [1, 117] }), { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 118, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, { 85: [1, 119] }, { 68: [1, 120] }, o($VE, [2, 117]), o($VE, [2, 119]), { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 121, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 122, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 123, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 124, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, { 104: [1, 125] }, { 2: $VF, 8: 129, 9: 131, 10: 132, 11: 128, 12: 130, 13: 135, 14: 136, 15: 137, 16: 138, 17: 139, 19: 141, 20: 142, 21: [1, 126], 23: $V1, 46: 18, 48: $V2, 49: $V3, 77: 23, 84: $V4, 86: $V5, 90: $V6, 95: $V7, 100: 127, 102: 140, 103: $VG, 104: $V8, 105: $V9, 106: $Va, 111: $VH, 112: $VI }, { 8: 147, 14: 148, 23: [1, 149], 46: 146, 48: $V2, 49: $V3, 77: 150, 107: 145 }, { 67: [1, 151] }, o($Vc, [2, 2]), o($Vc, [2, 3]), o($Vc, [2, 4]), o($Vc, [2, 5]), o($Vc, [2, 6]), o($Vc, [2, 9]), o($Vc, [2, 14]), o($Vc, [2, 15]), { 23: $Vd, 50: 152 }, { 23: $VJ, 25: 163, 26: $VK, 32: 153, 33: $VL, 34: $VM, 35: $VN, 36: $VO, 37: $VP, 38: $VQ, 39: $VR, 41: $VS }, o($Vn, [2, 66]), { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 165, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, { 25: 166, 26: $VK }, o($VE, [2, 110]), { 30: $VT, 68: [1, 167] }, o($VU, [2, 115], { 42: $VV, 43: $VW, 53: $VX, 54: $VY, 55: $VZ, 56: $V_, 57: $V$, 58: $V01, 59: $V11, 60: $V21, 61: $V31, 62: $V41, 63: $V51, 64: $V61, 65: $V71 }), { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 184, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 185, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, o($VE, [2, 86]), o($VE, [2, 87]), { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 186, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, o($VE, [2, 89]), o($VE, [2, 90]), o($VE, [2, 91]), o($VE, [2, 92]), o($VE, [2, 93]), o($VE, [2, 94], { 89: 65, 44: $Vf, 67: $Vg, 78: [1, 187], 87: $Vh, 88: $Vi }), o($VE, [2, 95]), o($VE, [2, 96]), o($VE, [2, 97]), o($VE, [2, 98]), o($VE, [2, 99]), o($VE, [2, 100], { 87: $Vk, 88: $Vl }), { 23: $V81, 80: 188, 81: 189 }, { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 45: [1, 191], 52: 193, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 82: 192, 84: $V4, 86: $V5 }, o($V91, [2, 187], { 42: $VV, 43: $VW, 53: $VX, 54: $VY, 55: $VZ, 56: $V_, 57: $V$, 58: $V01, 59: $V11, 60: $V21, 61: $V31, 62: $V41, 63: $V51, 64: $V61, 65: $V71 }), { 67: [1, 194] }, { 67: [1, 195] }, { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 196, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, { 42: $VV, 43: $VW, 45: [1, 197], 53: $VX, 54: $VY, 55: $VZ, 56: $V_, 57: $V$, 58: $V01, 59: $V11, 60: $V21, 61: $V31, 62: $V41, 63: $V51, 64: $V61, 65: $V71 }, { 67: [1, 198] }, o($VE, [2, 113]), o($V91, [2, 188], { 42: $VV, 43: $VW, 53: $VX, 54: $VY, 55: $VZ, 56: $V_, 57: $V$, 58: $V01, 59: $V11, 60: $V21, 61: $V31, 62: $V41, 63: $V51, 64: $V61, 65: $V71 }), { 42: $VV, 43: $VW, 53: $VX, 54: $VY, 55: $VZ, 56: $V_, 57: $V$, 58: $V01, 59: $V11, 60: $V21, 61: $V31, 62: $V41, 63: $V51, 64: $V61, 65: $V71, 68: [1, 199] }, { 42: $VV, 43: $VW, 53: $VX, 54: $VY, 55: $VZ, 56: $V_, 57: $V$, 58: $V01, 59: $V11, 60: $V21, 61: $V31, 62: $V41, 63: $V51, 64: $V61, 65: $V71, 68: [1, 200] }, { 42: $VV, 43: $VW, 53: $VX, 54: $VY, 55: $VZ, 56: $V_, 57: $V$, 58: $V01, 59: $V11, 60: $V21, 61: $V31, 62: $V41, 63: $V51, 64: $V61, 65: $V71, 68: [1, 201] }, { 67: [1, 202] }, o($Va1, [2, 153]), { 8: 204, 9: 209, 10: 206, 11: 205, 12: 207, 13: 208, 14: 212, 15: 213, 16: 214, 17: 215, 19: 218, 20: 217, 21: [1, 203], 23: $V1, 46: 18, 48: $V2, 49: $V3, 77: 23, 84: $V4, 86: $V5, 90: $V6, 95: $V7, 102: 216, 103: $VG, 104: $V8, 105: $V9, 106: $Va, 111: $Vb1, 112: $Vc1 }, { 7: [1, 219] }, { 7: [1, 220] }, o($Vd1, [2, 172]), { 7: [1, 221] }, { 7: [1, 222] }, { 7: [1, 223] }, { 7: [1, 224] }, o($Vd1, [2, 177]), { 7: [1, 225] }, o($Vd1, [2, 179]), o($Vd1, [2, 180]), o($Vd1, [2, 181]), { 7: [1, 226] }, { 7: [1, 227] }, { 7: [1, 228] }, { 7: [1, 229], 21: [1, 230] }, { 7: [2, 141], 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 231, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, { 7: [1, 232] }, { 23: [1, 233], 47: 56, 50: 57 }, { 7: [2, 148] }, { 7: [2, 149] }, { 24: $Ve, 44: $Vf, 89: 65 }, { 24: $Vj }, { 23: $Ve1, 68: [1, 234], 114: 235, 115: 236 }, o($Vn, [2, 62]), o($Vn, [2, 65], { 51: 238, 24: $Vp }), o($Vf1, [2, 39], { 40: 239, 44: $Vg1 }), o($Vf1, [2, 40], { 40: 241, 44: $Vg1 }), o($Vf1, [2, 41], { 40: 242, 44: $Vg1 }), o($Vf1, [2, 42], { 40: 243, 44: $Vg1 }), o($Vf1, [2, 43], { 40: 244, 44: $Vg1 }), o($Vf1, [2, 44], { 40: 245, 44: $Vg1 }), o($Vf1, [2, 45], { 40: 246, 44: $Vg1 }), o($Vf1, [2, 46], { 40: 247, 44: $Vg1 }), { 42: [1, 248] }, o($Vf1, [2, 56]), { 23: $Vh1, 27: 249, 29: 250 }, o($Vn, [2, 68], { 42: $VV, 43: $VW, 53: $VX, 54: $VY, 55: $VZ, 56: $V_, 57: $V$, 58: $V01, 59: $V11, 60: $V21, 61: $V31, 62: $V41, 63: $V51, 64: $V61, 65: $V71 }), { 7: [2, 32] }, o($VE, [2, 111]), { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 252, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 253, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 254, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 255, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 256, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 257, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 258, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 259, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 260, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 261, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 262, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 263, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 264, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 265, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 266, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 267, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, o($VE, [2, 73]), o($VE, [2, 85]), { 42: $VV, 43: $VW, 53: $VX, 54: $VY, 55: $VZ, 56: $V_, 57: $V$, 58: $V01, 59: $V11, 60: $V21, 61: $V31, 62: $V41, 63: $V51, 64: $V61, 65: $V71, 68: [1, 268] }, { 79: [1, 269] }, { 7: $Vi1, 21: [1, 270], 28: 271, 30: $Vj1 }, o($Vk1, [2, 104]), { 31: [1, 274] }, o($VE, [2, 106]), { 30: [1, 276], 45: [1, 275] }, o($Vl1, [2, 109], { 42: $VV, 43: $VW, 53: $VX, 54: $VY, 55: $VZ, 56: $V_, 57: $V$, 58: $V01, 59: $V11, 60: $V21, 61: $V31, 62: $V41, 63: $V51, 64: $V61, 65: $V71 }), { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 277, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, { 68: [1, 278] }, { 42: $VV, 43: $VW, 45: [1, 279], 53: $VX, 54: $VY, 55: $VZ, 56: $V_, 57: $V$, 58: $V01, 59: $V11, 60: $V21, 61: $V31, 62: $V41, 63: $V51, 64: $V61, 65: $V71 }, o($Vm1, [2, 122]), { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 94, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 83: 280, 84: $V4, 86: $V5 }, { 26: $Vm, 91: 281 }, { 26: [1, 282] }, { 26: $Vm, 91: 283 }, { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 284, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, o($Va1, [2, 154]), { 7: [1, 285] }, { 7: [1, 286] }, { 7: [1, 287] }, o($Vd1, [2, 158]), o($Vd1, [2, 159]), { 7: [1, 288] }, { 7: [1, 289] }, { 7: [1, 290] }, { 7: [1, 291] }, o($Vd1, [2, 164]), o($Vd1, [2, 165]), o($Vd1, [2, 166]), { 7: [1, 292] }, { 7: [1, 293] }, { 7: [1, 294] }, o($Vd1, [2, 170]), o($Vd1, [2, 171]), o($Vd1, [2, 173]), o($Vd1, [2, 174]), o($Vd1, [2, 175]), o($Vd1, [2, 176]), o($Vd1, [2, 178]), o($Vd1, [2, 182]), o($Vd1, [2, 183]), o($Vd1, [2, 184]), o($Vd1, [2, 185]), o($Vd1, [2, 186]), { 7: [2, 142], 42: $VV, 43: $VW, 53: $VX, 54: $VY, 55: $VZ, 56: $V_, 57: $V$, 58: $V01, 59: $V11, 60: $V21, 61: $V31, 62: $V41, 63: $V51, 64: $V61, 65: $V71 }, { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 295, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, o($Vn, $Vo, { 51: 89, 24: $Vp, 31: $Vq, 109: [1, 296], 110: [1, 297] }), { 26: $Vm, 31: [1, 298], 91: 299 }, { 30: [1, 301], 68: [1, 300] }, o($VU, [2, 194]), { 31: [1, 302] }, o($Vn, [2, 67]), o($Vf1, [2, 47], { 44: $Vn1 }), { 45: [1, 304] }, o($Vf1, [2, 48], { 44: $Vn1 }), o($Vf1, [2, 49], { 44: $Vn1 }), o($Vf1, [2, 50], { 44: $Vn1 }), o($Vf1, [2, 51], { 44: $Vn1 }), o($Vf1, [2, 52], { 44: $Vn1 }), o($Vf1, [2, 53], { 44: $Vn1 }), o($Vf1, [2, 54], { 44: $Vn1 }), { 23: $VJ, 25: 163, 26: $VK, 32: 305, 33: $VL, 34: $VM, 35: $VN, 36: $VO, 37: $VP, 38: $VQ, 39: $VR, 41: $VS }, { 7: $Vi1, 21: [1, 306], 28: 307, 30: $Vj1 }, o($Vk1, [2, 35]), { 31: [1, 308] }, o($VU, [2, 114], { 42: $VV, 43: $VW, 53: $VX, 54: $VY, 55: $VZ, 56: $V_, 57: $V$, 58: $V01, 59: $V11, 60: $V21, 61: $V31, 62: $V41, 63: $V51, 64: $V61, 65: $V71 }), o($Vo1, [2, 69], { 55: $VZ, 56: $V_, 57: $V$, 58: $V01 }), o($Vo1, [2, 70], { 55: $VZ, 56: $V_, 57: $V$, 58: $V01 }), o($Vp1, [2, 71], { 58: $V01 }), o($Vp1, [2, 72], { 58: $V01 }), o($Vp1, [2, 74], { 58: $V01 }), o($VE, [2, 75]), o($Vq1, [2, 76], { 42: $VV, 43: $VW, 53: $VX, 54: $VY, 55: $VZ, 56: $V_, 57: $V$, 58: $V01, 61: $V31, 62: $V41 }), o($Vq1, [2, 77], { 42: $VV, 43: $VW, 53: $VX, 54: $VY, 55: $VZ, 56: $V_, 57: $V$, 58: $V01, 61: $V31, 62: $V41 }), o($Vq1, [2, 78], { 53: $VX, 54: $VY, 55: $VZ, 56: $V_, 57: $V$, 58: $V01 }), o($Vq1, [2, 79], { 53: $VX, 54: $VY, 55: $VZ, 56: $V_, 57: $V$, 58: $V01 }), o($Vq1, [2, 80], { 53: $VX, 54: $VY, 55: $VZ, 56: $V_, 57: $V$, 58: $V01 }), o($Vq1, [2, 81], { 53: $VX, 54: $VY, 55: $VZ, 56: $V_, 57: $V$, 58: $V01 }), { 31: [1, 309], 42: $VV, 43: $VW, 53: $VX, 54: $VY, 55: $VZ, 56: $V_, 57: $V$, 58: $V01, 59: $V11, 60: $V21, 61: $V31, 62: $V41, 63: $V51, 64: $V61, 65: $V71 }, o([5, 7, 21, 22, 23, 30, 31, 45, 48, 49, 63, 64, 68, 84, 86, 90, 95, 104, 105, 106, 113], [2, 83], { 42: $VV, 43: $VW, 53: $VX, 54: $VY, 55: $VZ, 56: $V_, 57: $V$, 58: $V01, 59: $V11, 60: $V21, 61: $V31, 62: $V41, 65: $V71 }), o([5, 7, 21, 22, 23, 30, 31, 45, 48, 49, 63, 64, 65, 68, 84, 86, 90, 95, 104, 105, 106, 113], [2, 84], { 42: $VV, 43: $VW, 53: $VX, 54: $VY, 55: $VZ, 56: $V_, 57: $V$, 58: $V01, 59: $V11, 60: $V21, 61: $V31, 62: $V41 }), o($VE, [2, 88]), o($VE, [2, 101]), o($VE, [2, 102]), { 23: $V81, 81: 310 }, { 23: [2, 36] }, { 23: [2, 37] }, { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 311, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, o($VE, [2, 107]), { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 312, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, { 42: $VV, 43: $VW, 53: $VX, 54: $VY, 55: $VZ, 56: $V_, 57: $V$, 58: $V01, 59: $V11, 60: $V21, 61: $V31, 62: $V41, 63: $V51, 64: $V61, 65: $V71, 68: [1, 313] }, { 7: [2, 197] }, o($Vm1, [2, 121]), { 30: $VT, 68: [1, 314] }, o($Vr1, [2, 123], { 92: 315, 93: 316, 94: $Vs1 }), { 21: [1, 318], 96: 319, 97: 320, 98: 321, 99: $Vt1, 101: $Vu1 }, o($Vr1, [2, 143]), { 42: $VV, 43: $VW, 53: $VX, 54: $VY, 55: $VZ, 56: $V_, 57: $V$, 58: $V01, 59: $V11, 60: $V21, 61: $V31, 62: $V41, 63: $V51, 64: $V61, 65: $V71, 68: [1, 324] }, o($Vd1, [2, 155]), o($Vd1, [2, 156]), o($Vd1, [2, 157]), o($Vd1, [2, 160]), o($Vd1, [2, 161]), o($Vd1, [2, 162]), o($Vd1, [2, 163]), o($Vd1, [2, 167]), o($Vd1, [2, 168]), o($Vd1, [2, 169]), { 7: [1, 325], 42: $VV, 43: $VW, 53: $VX, 54: $VY, 55: $VZ, 56: $V_, 57: $V$, 58: $V01, 59: $V11, 60: $V21, 61: $V31, 62: $V41, 63: $V51, 64: $V61, 65: $V71 }, { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 326, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 327, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, { 23: $VJ, 25: 163, 26: $VK, 32: 328, 33: $VL, 34: $VM, 35: $VN, 36: $VO, 37: $VP, 38: $VQ, 39: $VR, 41: $VS }, o($Vc, [2, 191]), { 26: $Vm, 31: [1, 329], 91: 330 }, { 23: $Ve1, 115: 331 }, { 23: $VJ, 25: 163, 26: $VK, 32: 332, 33: $VL, 34: $VM, 35: $VN, 36: $VO, 37: $VP, 38: $VQ, 39: $VR, 41: $VS }, { 45: [1, 333] }, o($Vv1, [2, 58]), { 43: [1, 334] }, o($Vf1, [2, 33]), { 23: $Vh1, 29: 335 }, { 23: $VJ, 25: 163, 26: $VK, 32: 336, 33: $VL, 34: $VM, 35: $VN, 36: $VO, 37: $VP, 38: $VQ, 39: $VR, 41: $VS }, { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 337, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, o($Vk1, [2, 103]), o($Vk1, [2, 105], { 42: $VV, 43: $VW, 53: $VX, 54: $VY, 55: $VZ, 56: $V_, 57: $V$, 58: $V01, 59: $V11, 60: $V21, 61: $V31, 62: $V41, 63: $V51, 64: $V61, 65: $V71 }), o($Vl1, [2, 108], { 42: $VV, 43: $VW, 53: $VX, 54: $VY, 55: $VZ, 56: $V_, 57: $V$, 58: $V01, 59: $V11, 60: $V21, 61: $V31, 62: $V41, 63: $V51, 64: $V61, 65: $V71 }), { 7: [2, 196] }, o($VE, [2, 112]), o($Vr1, [2, 124]), o($Vr1, [2, 125]), { 26: $Vm, 90: [1, 338], 91: 339 }, o($Vr1, [2, 129]), { 21: [1, 340], 97: 341, 98: 342, 99: $Vt1, 101: $Vu1 }, { 21: [1, 343] }, o($Vw1, [2, 134]), { 31: [1, 344] }, { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 345, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, { 7: [1, 346] }, { 10: 349, 11: 348, 14: 350, 23: [1, 351], 77: 23, 108: 347 }, { 42: $VV, 43: $VW, 53: $VX, 54: $VY, 55: $VZ, 56: $V_, 57: $V$, 58: $V01, 59: $V11, 60: $V21, 61: $V31, 62: $V41, 63: $V51, 64: $V61, 65: $V71, 68: [1, 352] }, { 42: $VV, 43: $VW, 53: $VX, 54: $VY, 55: $VZ, 56: $V_, 57: $V$, 58: $V01, 59: $V11, 60: $V21, 61: $V31, 62: $V41, 63: $V51, 64: $V61, 65: $V71, 68: [1, 353] }, { 26: $Vm, 91: 354 }, { 23: $VJ, 25: 163, 26: $VK, 32: 355, 33: $VL, 34: $VM, 35: $VN, 36: $VO, 37: $VP, 38: $VQ, 39: $VR, 41: $VS }, o($Vc, [2, 192]), o($VU, [2, 193]), o($VU, [2, 195]), o($Vv1, [2, 57]), o($Vf1, [2, 55]), o($Vk1, [2, 34]), o($Vk1, [2, 38]), o([5, 7, 21, 22, 23, 30, 31, 45, 48, 49, 68, 84, 86, 90, 95, 104, 105, 106, 113], [2, 82], { 42: $VV, 43: $VW, 53: $VX, 54: $VY, 55: $VZ, 56: $V_, 57: $V$, 58: $V01, 59: $V11, 60: $V21, 61: $V31, 62: $V41, 63: $V51, 64: $V61, 65: $V71 }), { 67: [1, 356] }, o($Vr1, [2, 128]), o($Vr1, [2, 130]), { 21: [1, 357] }, o($Vw1, [2, 133]), o($Vr1, [2, 132]), { 2: $VF, 8: 129, 9: 131, 10: 132, 11: 128, 12: 130, 13: 135, 14: 136, 15: 137, 16: 138, 17: 139, 19: 141, 20: 142, 21: [2, 140], 23: $V1, 26: $Vm, 46: 18, 48: $V2, 49: $V3, 77: 23, 84: $V4, 86: $V5, 90: $V6, 91: 359, 95: $V7, 100: 358, 102: 140, 103: $VG, 104: $V8, 105: $V9, 106: $Va, 111: $VH, 112: $VI }, { 31: [1, 360], 42: $VV, 43: $VW, 53: $VX, 54: $VY, 55: $VZ, 56: $V_, 57: $V$, 58: $V01, 59: $V11, 60: $V21, 61: $V31, 62: $V41, 63: $V51, 64: $V61, 65: $V71 }, o($Vr1, [2, 144]), { 68: [1, 361] }, { 68: [2, 150] }, { 68: [2, 151] }, { 68: [2, 152] }, { 24: $Ve, 44: $Vf, 87: $Vh, 88: $Vi, 89: 65 }, { 26: $Vm, 91: 362 }, { 26: $Vm, 91: 363 }, o($Vc, [2, 189]), { 26: $Vm, 91: 364 }, { 9: 107, 10: 98, 11: 97, 23: $Vr, 26: $Vs, 39: $Vt, 44: $Vu, 52: 365, 54: $Vv, 66: $Vw, 67: $Vx, 69: $Vy, 70: $Vz, 71: $VA, 72: $VB, 73: $VC, 74: 106, 75: $VD, 76: 110, 77: 111, 84: $V4, 86: $V5 }, o($Vr1, [2, 131]), { 8: 204, 9: 209, 10: 206, 11: 205, 12: 207, 13: 208, 14: 212, 15: 213, 16: 214, 17: 215, 19: 218, 20: 217, 21: [2, 138], 23: $V1, 46: 18, 48: $V2, 49: $V3, 77: 23, 84: $V4, 86: $V5, 90: $V6, 95: $V7, 102: 216, 103: $VG, 104: $V8, 105: $V9, 106: $Va, 111: $Vb1, 112: $Vc1 }, { 21: [2, 139] }, o($Vw1, [2, 137], { 46: 18, 77: 23, 11: 128, 8: 129, 12: 130, 9: 131, 10: 132, 13: 135, 14: 136, 15: 137, 16: 138, 17: 139, 102: 140, 19: 141, 20: 142, 100: 366, 91: 367, 2: $VF, 23: $V1, 26: $Vm, 48: $V2, 49: $V3, 84: $V4, 86: $V5, 90: $V6, 95: $V7, 103: $VG, 104: $V8, 105: $V9, 106: $Va, 111: $VH, 112: $VI }), { 26: $Vm, 91: 368 }, o($Vr1, [2, 146]), o($Vr1, [2, 147]), o($Vc, [2, 190]), { 42: $VV, 43: $VW, 53: $VX, 54: $VY, 55: $VZ, 56: $V_, 57: $V$, 58: $V01, 59: $V11, 60: $V21, 61: $V31, 62: $V41, 63: $V51, 64: $V61, 65: $V71, 68: [1, 369] }, o($Vw1, [2, 135], { 46: 18, 77: 23, 8: 204, 11: 205, 10: 206, 12: 207, 13: 208, 9: 209, 14: 212, 15: 213, 16: 214, 17: 215, 102: 216, 20: 217, 19: 218, 23: $V1, 48: $V2, 49: $V3, 84: $V4, 86: $V5, 90: $V6, 95: $V7, 103: $VG, 104: $V8, 105: $V9, 106: $Va, 111: $Vb1, 112: $Vc1 }), o($Vw1, [2, 136]), o($Vr1, [2, 145]), { 26: $Vm, 91: 370 }, o($Vr1, [2, 126], { 93: 316, 92: 371, 94: $Vs1 }), o($Vr1, [2, 127])],
        defaultActions: { 30: [2, 60], 31: [2, 61], 32: [2, 1], 147: [2, 148], 148: [2, 149], 166: [2, 32], 272: [2, 36], 273: [2, 37], 278: [2, 197], 313: [2, 196], 348: [2, 150], 349: [2, 151], 350: [2, 152], 359: [2, 139] },
        parseError: function parseError(str, hash) {
            if (hash.recoverable) {
                this.trace(str);
            }
            else {
                var error = new Error(str);
                error.hash = hash;
                throw error;
            }
        },
        parse: function parse(input) {
            var self = this, stack = [0], tstack = [], // token stack
            vstack = [null], // semantic value stack
            lstack = [], // location stack
            table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            //this.reductionCount = this.shiftCount = 0;
            var lexer = Object.create(this.lexer);
            var sharedState = { yy: {} };
            // copy state
            for (var k in this.yy) {
                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                }
            }
            lexer.setInput(input, sharedState.yy);
            sharedState.yy.lexer = lexer;
            sharedState.yy.parser = this;
            if (typeof lexer.yylloc == 'undefined') {
                lexer.yylloc = {};
            }
            var yyloc = lexer.yylloc;
            lstack.push(yyloc);
            var ranges = lexer.options && lexer.options.ranges;
            if (typeof sharedState.yy.parseError === 'function') {
                this.parseError = sharedState.yy.parseError;
            }
            else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            _token_stack: var lex = function () {
                var token;
                token = lexer.lex() || EOF;
                // if token isn't its numeric value, convert
                if (typeof token !== 'number') {
                    token = self.symbols_[token] || token;
                }
                return token;
            };
            var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
            while (true) {
                // retreive state number from top of stack
                state = stack[stack.length - 1];
                // use default actions if available
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                }
                else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    // read action for current state and first input
                    action = table[state] && table[state][symbol];
                }
                _handle_error: 
                // handle parse error
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var error_rule_depth;
                    var errStr = '';
                    // Return the rule stack depth where the nearest error rule can be found.
                    // Return FALSE when no error recovery rule was found.
                    function locateNearestErrorRecoveryRule(state) {
                        var stack_probe = stack.length - 1;
                        var depth = 0;
                        // try to recover from error
                        for (;;) {
                            // check for error recovery rule in this state
                            if ((TERROR.toString()) in table[state]) {
                                return depth;
                            }
                            if (state === 0 || stack_probe < 2) {
                                return false; // No suitable error recovery rule available.
                            }
                            stack_probe -= 2; // popStack(1): [symbol, action]
                            state = stack[stack_probe];
                            ++depth;
                        }
                    }
                    if (!recovering) {
                        // first see if there's any chance at hitting an error recovery rule:
                        error_rule_depth = locateNearestErrorRecoveryRule(state);
                        // Report error
                        expected = [];
                        for (p in table[state]) {
                            if (this.terminals_[p] && p > TERROR) {
                                expected.push("'" + this.terminals_[p] + "'");
                            }
                        }
                        if (lexer.showPosition) {
                            errStr = 'Parse error on line ' + (yylineno + 1) + ":\n" + lexer.showPosition() + "\nExpecting " + expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                        }
                        else {
                            errStr = 'Parse error on line ' + (yylineno + 1) + ": Unexpected " +
                                (symbol == EOF ? "end of input" :
                                    ("'" + (this.terminals_[symbol] || symbol) + "'"));
                        }
                        this.parseError(errStr, {
                            text: lexer.match,
                            token: this.terminals_[symbol] || symbol,
                            line: lexer.yylineno,
                            loc: yyloc,
                            expected: expected,
                            recoverable: (error_rule_depth !== false)
                        });
                    }
                    else if (preErrorSymbol !== EOF) {
                        error_rule_depth = locateNearestErrorRecoveryRule(state);
                    }
                    // just recovered from another error
                    if (recovering == 3) {
                        if (symbol === EOF || preErrorSymbol === EOF) {
                            throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                        }
                        // discard current lookahead and grab another
                        yyleng = lexer.yyleng;
                        yytext = lexer.yytext;
                        yylineno = lexer.yylineno;
                        yyloc = lexer.yylloc;
                        symbol = lex();
                    }
                    // try to recover from error
                    if (error_rule_depth === false) {
                        throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
                    }
                    popStack(error_rule_depth);
                    preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
                    symbol = TERROR; // insert generic error symbol as new lookahead
                    state = stack[stack.length - 1];
                    action = table[state] && table[state][TERROR];
                    recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
                }
                // this shouldn't happen, unless resolve defaults are off
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1: // shift
                        //this.shiftCount++;
                        stack.push(symbol);
                        vstack.push(lexer.yytext);
                        lstack.push(lexer.yylloc);
                        stack.push(action[1]); // push state
                        symbol = null;
                        if (!preErrorSymbol) { // normal execution/no error
                            yyleng = lexer.yyleng;
                            yytext = lexer.yytext;
                            yylineno = lexer.yylineno;
                            yyloc = lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        }
                        else {
                            // error just occurred, resume old lookahead f/ before error
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        // reduce
                        //this.reductionCount++;
                        len = this.productions_[action[1]][1];
                        // perform semantic action
                        yyval.$ = vstack[vstack.length - len]; // default to $$ = $1
                        // default location, uses first token for firsts, last for lasts
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                        }
                        r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        // pop off stack
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]); // push nonterminal (reduce)
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        // goto new state = table[STATE][NONTERMINAL]
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        // accept
                        return true;
                }
            }
            return true;
        } };
    let raiz;
    // let arbol = new Arbol();
    //let exp = new Expresion("E",null,-1,-1);
    // console.log(arbol);
    let string = "";
    //const nodo = require('./AST/Nodo');
    //const TIPO_OPERACION	= require('./instrucciones').TIPO_OPERACION;
    //const TIPO_VALOR 		= require('./instrucciones').TIPO_VALOR;
    //const TIPO_DATO			= require('./tabla_simbolos').TIPO_DATO; //para jalar el tipo de dato
    //const instruccionesAPI	= require('./instrucciones').instruccionesAPI;
    /* generated by jison-lex 0.3.4 */
    var lexer = (function () {
        var lexer = ({
            EOF: 1,
            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                }
                else {
                    throw new Error(str);
                }
            },
            // resets the lexer, sets new input
            setInput: function (input, yy) {
                this.yy = yy || this.yy || {};
                this._input = input;
                this._more = this._backtrack = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                };
                if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                }
                this.offset = 0;
                return this;
            },
            // consumes and returns one char from the input
            input: function () {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                }
                else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }
                this._input = this._input.slice(1);
                return ch;
            },
            // unshifts one char (or a string) into the input
            unput: function (ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);
                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);
                if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                }
                var r = this.yylloc.range;
                this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ?
                        (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                            + oldLines[oldLines.length - lines.length].length - lines[0].length :
                        this.yylloc.first_column - len
                };
                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                this.yyleng = this.yytext.length;
                return this;
            },
            // When called from action, caches matched text and appends it on next action
            more: function () {
                this._more = true;
                return this;
            },
            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject: function () {
                if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                }
                else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
                return this;
            },
            // retain first n characters of the match
            less: function (n) {
                this.unput(this.match.slice(n));
            },
            // displays already matched input, i.e. for error messages
            pastInput: function () {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },
            // displays upcoming input, i.e. for error messages
            upcomingInput: function () {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },
            // displays the character position where the lexing error occurred, i.e. for error messages
            showPosition: function () {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },
            // test the lexed token: return FALSE when not a match, otherwise return token
            test_match: function (match, indexed_rule) {
                var token, lines, backup;
                if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                        yylineno: this.yylineno,
                        yylloc: {
                            first_line: this.yylloc.first_line,
                            last_line: this.last_line,
                            first_column: this.yylloc.first_column,
                            last_column: this.yylloc.last_column
                        },
                        yytext: this.yytext,
                        match: this.match,
                        matches: this.matches,
                        matched: this.matched,
                        yyleng: this.yyleng,
                        offset: this.offset,
                        _more: this._more,
                        _input: this._input,
                        yy: this.yy,
                        conditionStack: this.conditionStack.slice(0),
                        done: this.done
                    };
                    if (this.options.ranges) {
                        backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                }
                lines = match[0].match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno += lines.length;
                }
                this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ?
                        lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                        this.yylloc.last_column + match[0].length
                };
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }
                this._more = false;
                this._backtrack = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
                if (this.done && this._input) {
                    this.done = false;
                }
                if (token) {
                    return token;
                }
                else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                        this[k] = backup[k];
                    }
                    return false; // rule action called reject() implying the next rule should be tested instead.
                }
                return false;
            },
            // return next match in input
            next: function () {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) {
                    this.done = true;
                }
                var token, match, tempMatch, index;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rules[i]);
                            if (token !== false) {
                                return token;
                            }
                            else if (this._backtrack) {
                                match = false;
                                continue; // rule action called reject() implying a rule MISmatch.
                            }
                            else {
                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                return false;
                            }
                        }
                        else if (!this.options.flex) {
                            break;
                        }
                    }
                }
                if (match) {
                    token = this.test_match(match, rules[index]);
                    if (token !== false) {
                        return token;
                    }
                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                    return false;
                }
                if (this._input === "") {
                    return this.EOF;
                }
                else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
            },
            // return next match that has a token
            lex: function lex() {
                var r = this.next();
                if (r) {
                    return r;
                }
                else {
                    return this.lex();
                }
            },
            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },
            // pop the previously active lexer condition state off the condition stack
            popState: function popState() {
                var n = this.conditionStack.length - 1;
                if (n > 0) {
                    return this.conditionStack.pop();
                }
                else {
                    return this.conditionStack[0];
                }
            },
            // produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules: function _currentRules() {
                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                }
                else {
                    return this.conditions["INITIAL"].rules;
                }
            },
            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState: function topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);
                if (n >= 0) {
                    return this.conditionStack[n];
                }
                else {
                    return "INITIAL";
                }
            },
            // alias for begin(condition)
            pushState: function pushState(condition) {
                this.begin(condition);
            },
            // return the number of states currently on the stack
            stateStackSize: function stateStackSize() {
                return this.conditionStack.length;
            },
            options: { "case-sensitive": true },
            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                var YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0: // se ignoran espacios en blanco
                        break;
                    case 1: // comentario simple línea
                        break;
                    case 2: // comentario multiple líneas
                        break;
                    case 3:
                        return 33;
                        break;
                    case 4:
                        return 34;
                        break;
                    case 5:
                        return 35;
                        break;
                    case 6:
                        return 36;
                        break;
                    case 7:
                        return 37;
                        break;
                    case 8:
                        return 38;
                        break;
                    case 9:
                        return 39;
                        break;
                    case 10:
                        return 7;
                        break;
                    case 11:
                        return 48;
                        break;
                    case 12:
                        return 49;
                        break;
                    case 13:
                        return 22;
                        break;
                    case 14:
                        return 71;
                        break;
                    case 15:
                        return 72;
                        break;
                    case 16:
                        return 73;
                        break;
                    case 17:
                        return 41;
                        break;
                    case 18:
                        return 84;
                        break;
                    case 19:
                        return 85;
                        break;
                    case 20:
                        return 111;
                        break;
                    case 21:
                        return 112;
                        break;
                    case 22:
                        return 90;
                        break;
                    case 23:
                        return 94;
                        break;
                    case 24:
                        return 95;
                        break;
                    case 25:
                        return 99;
                        break;
                    case 26:
                        return 101;
                        break;
                    case 27:
                        return 104;
                        break;
                    case 28:
                        return 105;
                        break;
                    case 29:
                        return 106;
                        break;
                    case 30:
                        return 103;
                        break;
                    case 31:
                        return 113;
                        break;
                    case 32:
                        return 86;
                        break;
                    case 33:
                        return 79;
                        break;
                    case 34:
                        return 116;
                        break;
                    case 35:
                        return 117;
                        break;
                    case 36:
                        return 109;
                        break;
                    case 37:
                        return 110;
                        break;
                    case 38:
                        return 30;
                        break;
                    case 39:
                        return 31;
                        break;
                    case 40:
                        return 26;
                        break;
                    case 41:
                        return 21;
                        break;
                    case 42:
                        return 67;
                        break;
                    case 43:
                        return 68;
                        break;
                    case 44:
                        return 44;
                        break;
                    case 45:
                        return 45;
                        break;
                    case 46:
                        return 63;
                        break;
                    case 47:
                        return 78;
                        break;
                    case 48:
                        return 88;
                        break;
                    case 49:
                        return 53;
                        break;
                    case 50:
                        return 87;
                        break;
                    case 51:
                        return 54;
                        break;
                    case 52:
                        return 58;
                        break;
                    case 53:
                        return 55;
                        break;
                    case 54:
                        return 56;
                        break;
                    case 55:
                        return 57;
                        break;
                    case 56:
                        return 64;
                        break;
                    case 57:
                        return 65;
                        break;
                    case 58:
                        return 59;
                        break;
                    case 59:
                        return 24;
                        break;
                    case 60:
                        return 60;
                        break;
                    case 61:
                        return 66;
                        break;
                    case 62:
                        return 62;
                        break;
                    case 63:
                        return 42;
                        break;
                    case 64:
                        return 61;
                        break;
                    case 65:
                        return 43;
                        break;
                    case 66:
                        break;
                    case 67:
                        break;
                    case 68:
                        return 69;
                        break;
                    case 69:
                        return 70;
                        break;
                    case 70:
                        return 23;
                        break;
                    case 71:
                        string = "";
                        this.begin("STRING");
                        break;
                    case 72:
                        string = "";
                        this.begin("STRING");
                        break;
                    case 73:
                        this.begin('INITIAL');
                        yy_.yytext = "";
                        yy_.yytext = string;
                        return 75;
                        break;
                    case 74:
                        this.begin('INITIAL');
                        yy_.yytext = "";
                        yy_.yytext = string;
                        return 75;
                        break;
                    case 75:
                        string += yy_.yytext;
                        break;
                    case 76:
                        string += "\t";
                        break;
                    case 77:
                        string += "\n";
                        break;
                    case 78:
                        string += "\r";
                        break;
                    case 79:
                        string += '\"';
                        break;
                    case 80:
                        string += '\\';
                        break;
                    case 81:
                        return 5;
                        break;
                    case 82:
                        let listaError = Lista_Error.getInstancia();
                        listaError.push(new Nodo_Error(TipoError.ERROR_LEXICO, 'Este es un error léxico: ' + yy_.yytext + '.', yy_.yylloc.first_line, yy_.yylloc.first_column));
                        console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                        break;
                }
            },
            rules: [/^(?:\s+)/, /^(?:\/\/.*)/, /^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/, /^(?:String\b)/, /^(?:string\b)/, /^(?:Number\b)/, /^(?:number\b)/, /^(?:Boolean\b)/, /^(?:boolean\b)/, /^(?:void\b)/, /^(?:;)/, /^(?:let\b)/, /^(?:const\b)/, /^(?:type\b)/, /^(?:true\b)/, /^(?:false\b)/, /^(?:null\b)/, /^(?:Array\b)/, /^(?:console\b)/, /^(?:log\b)/, /^(?:break\b)/, /^(?:continue\b)/, /^(?:if\b)/, /^(?:else\b)/, /^(?:switch\b)/, /^(?:case\b)/, /^(?:default\b)/, /^(?:while\b)/, /^(?:do\b)/, /^(?:for\b)/, /^(?:return\b)/, /^(?:function\b)/, /^(?:graficar_ts\b)/, /^(?:length\b)/, /^(?:push\b)/, /^(?:pop\b)/, /^(?:of\b)/, /^(?:in\b)/, /^(?:,)/, /^(?::)/, /^(?:\{)/, /^(?:\})/, /^(?:\()/, /^(?:\))/, /^(?:\[)/, /^(?:\])/, /^(?:\?)/, /^(?:\.)/, /^(?:\+\+)/, /^(?:\+)/, /^(?:--)/, /^(?:-)/, /^(?:\*\*)/, /^(?:\*)/, /^(?:\/)/, /^(?:%)/, /^(?:\|\|)/, /^(?:&&)/, /^(?:==)/, /^(?:=)/, /^(?:!=)/, /^(?:!)/, /^(?:<=)/, /^(?:<)/, /^(?:>=)/, /^(?:>)/, /^(?:[ \r\t]+)/, /^(?:\n)/, /^(?:[0-9]+(\.[0-9]+)?\b)/, /^(?:[0-9]+\b)/, /^(?:(_?[a-zA-Z])[a-zA-Z0-9_]*)/, /^(?:["])/, /^(?:['])/, /^(?:")/, /^(?:[\'])/, /^(?:[^\n\r\"\\']+)/, /^(?:\\t)/, /^(?:\\n)/, /^(?:\\r)/, /^(?:\\")/, /^(?:\\)/, /^(?:$)/, /^(?:.)/],
            conditions: { "STRING": { "rules": [73, 74, 75, 76, 77, 78, 79, 80], "inclusive": false }, "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 81, 82], "inclusive": true } }
        });
        return lexer;
    })();
    parser.lexer = lexer;
    function Parser() {
        this.yy = {};
    }
    Parser.prototype = parser;
    parser.Parser = Parser;
    return new Parser;
})();
if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = gramatica;
    exports.Parser = gramatica.Parser;
    exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
    exports.main = function commonjsMain(args) {
        if (!args[1]) {
            console.log('Usage: ' + args[0] + ' FILE');
            process.exit(1);
        }
        var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
        return exports.parser.parse(source);
    };
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}
