/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,15],$V2=[1,16],$V3=[1,19],$V4=[1,20],$V5=[1,21],$V6=[1,22],$V7=[1,23],$V8=[1,24],$V9=[1,25],$Va=[1,26],$Vb=[1,27],$Vc=[1,28],$Vd=[1,29],$Ve=[5,22,27,31,32,34,36,38,41,42,43,44,45,46,47,48,49,50],$Vf=[5,22,27,31,32,34,35,36,38,41,42,43,44,45,46,47,48,49,50],$Vg=[1,59],$Vh=[1,50],$Vi=[1,49],$Vj=[1,51],$Vk=[1,52],$Vl=[1,53],$Vm=[1,54],$Vn=[1,55],$Vo=[1,56],$Vp=[1,57],$Vq=[1,58],$Vr=[8,21],$Vs=[1,69],$Vt=[1,70],$Vu=[1,71],$Vv=[1,72],$Vw=[1,73],$Vx=[1,74],$Vy=[1,75],$Vz=[1,76],$VA=[1,77],$VB=[1,78],$VC=[1,79],$VD=[1,80],$VE=[1,81],$VF=[1,82],$VG=[1,83],$VH=[1,84],$VI=[8,21,30,39,51,52,53,54,55,56,57,58,59,61,62,63,64,65,66,74],$VJ=[1,92],$VK=[21,30],$VL=[8,21,30,39,58,59,74],$VM=[1,118],$VN=[8,21,30,39,51,52,57,58,59,61,62,63,64,65,66,74],$VO=[8,21,30,39,51,52,53,54,55,57,58,59,61,62,63,64,65,66,74],$VP=[8,21,30,39,58,59,61,62,63,64,65,66,74],$VQ=[8,21,30,39,58,59,65,66,74],$VR=[1,129],$VS=[34,38,41];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"start":3,"instrucciones":4,"EOF":5,"instruccion":6,"print_instr":7,"PUNTOCOMA":8,"println_instr":9,"asignacion":10,"declaracion":11,"if_llav_instr":12,"if_instr":13,"switch_instr":14,"break_instr":15,"continue_instr":16,"return_instr":17,"while_instr":18,"tipo":19,"lista_simbolos":20,"COMA":21,"ID":22,"IGUAL":23,"expr":24,"INCRE":25,"DECRE":26,"RPRINT":27,"PARA":28,"lista_parametros":29,"PARC":30,"RPRINTLN":31,"RIF":32,"LLAVA":33,"LLAVC":34,"RELSE":35,"RSWITCH":36,"lista_cases":37,"RDEFAULT":38,"DOSPUNTOS":39,"case":40,"RCASE":41,"RBREAK":42,"RCONTINUE":43,"RRETURN":44,"RWHILE":45,"RINT":46,"RDOUBLE":47,"RSTRING":48,"RCHAR":49,"RBOOLEAN":50,"MAS":51,"MENOS":52,"MULTI":53,"DIV":54,"PORCENTAJE":55,"POTENCIA":56,"AMPERSON":57,"AND":58,"OR":59,"NOT":60,"MAYORQUE":61,"MAYORIGUAL":62,"MENORIGUAL":63,"MENORQUE":64,"IGUALIGUAL":65,"DIFERENTE":66,"ENTERO":67,"DECIMAL":68,"CADENA":69,"CHAR":70,"NULL":71,"TRUE":72,"FALSE":73,"INTERROGACION":74,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PUNTOCOMA",21:"COMA",22:"ID",23:"IGUAL",25:"INCRE",26:"DECRE",27:"RPRINT",28:"PARA",30:"PARC",31:"RPRINTLN",32:"RIF",33:"LLAVA",34:"LLAVC",35:"RELSE",36:"RSWITCH",38:"RDEFAULT",39:"DOSPUNTOS",41:"RCASE",42:"RBREAK",43:"RCONTINUE",44:"RRETURN",45:"RWHILE",46:"RINT",47:"RDOUBLE",48:"RSTRING",49:"RCHAR",50:"RBOOLEAN",51:"MAS",52:"MENOS",53:"MULTI",54:"DIV",55:"PORCENTAJE",56:"POTENCIA",57:"AMPERSON",58:"AND",59:"OR",60:"NOT",61:"MAYORQUE",62:"MAYORIGUAL",63:"MENORIGUAL",64:"MENORQUE",65:"IGUALIGUAL",66:"DIFERENTE",67:"ENTERO",68:"DECIMAL",69:"CADENA",70:"CHAR",71:"NULL",72:"TRUE",73:"FALSE",74:"INTERROGACION"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,1],[11,2],[20,3],[20,5],[20,1],[20,3],[10,3],[10,2],[10,2],[7,4],[9,4],[12,7],[12,11],[12,9],[13,5],[13,7],[13,7],[14,7],[14,9],[14,10],[37,2],[37,1],[40,4],[29,3],[29,1],[15,1],[16,1],[17,2],[18,7],[19,1],[19,1],[19,1],[19,1],[19,1],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,3],[24,3],[24,3],[24,2],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,5],[24,2],[24,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log($$[$0-1]); this.$ = new Ast();  this.$.instrucciones = $$[$0-1]; return this.$; 
break;
case 2: case 34:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3:
 this.$= new Array(); this.$.push($$[$0]); 
break;
case 4: case 5: case 6: case 7: case 11: case 12: case 13:
 this.$ = $$[$0-1] 
break;
case 8: case 9: case 10: case 14:
 this.$ = $$[$0] 
break;
case 15:
 this.$ = new Declaracion($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].last_column); 
break;
case 16:
 this.$ = $$[$0-2]; this.$.push(new Simbolo($$[$0],null,null,_$[$0-2].first_line, _$[$0-2].first_column,null)); 
break;
case 17:
 this.$ = $$[$0-4]; this.$.push(new Simbolo($$[$0-2],null,null,_$[$0-4].first_line, _$[$0-4].first_column,$$[$0])); 
break;
case 18:
 this.$ = new Array(); this.$.push(new Simbolo($$[$0],null,null,_$[$0].first_line, _$[$0].first_column,null)); 
break;
case 19:
 this.$ = new Array(); this.$.push(new Simbolo($$[$0-2],null,null,_$[$0-2].first_line, _$[$0-2].first_column,$$[$0])); 
break;
case 20:
 this.$ = new Asignacion($$[$0-2] ,$$[$0], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 21:
 this.$ = new Asignacion($$[$0-1] ,new Aritmetica(new Identificador($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), OperadorAritmetico.MAS,new Primitivo(Number(1), $$[$0-1].first_line, $$[$0-1].last_column), $$[$0-1].first_line, $$[$0-1].last_column, false), _$[$0-1].first_line, _$[$0-1].last_column); 
break;
case 22:
 this.$ = new Asignacion($$[$0-1] ,new Aritmetica(new Identificador($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), OperadorAritmetico.MENOS,new Primitivo(Number(1), $$[$0-1].first_line, $$[$0-1].last_column), $$[$0-1].first_line, $$[$0-1].last_column, false), _$[$0-1].first_line, _$[$0-1].last_column); 
break;
case 23:
 this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, false); 
break;
case 24:
 this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, true); 
break;
case 25:
 this.$ = new If($$[$0-4], $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 26:
 this.$ = new If($$[$0-8], $$[$0-5], $$[$0-1], _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 27:
 this.$ = new If($$[$0-6], $$[$0-3], [$$[$0]], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 28:
 this.$ = new Ifsinllave($$[$0-2], $$[$0], null, _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 29:
 this.$ = new Ifsinllave($$[$0-4], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 30:
 this.$ = new Ifsinllave($$[$0-4], $$[$0-2], [$$[$0]], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 31:
 this.$ = new Switch($$[$0-4], $$[$0-1], [], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 32:
 this.$ = new Switch($$[$0-6], [], $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 33:
 this.$ = new Switch($$[$0-7], $$[$0-4], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column); 
break;
case 35: case 38:
 this.$ = new Array(); this.$.push($$[$0]);
break;
case 36:
 this.$ = new Case($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 37:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 39:
 this.$ = new Detener(); 
break;
case 40:
 this.$ = new Continuar(); 
break;
case 41:
 this.$ = new Return($$[$0]); 
break;
case 42:
 this.$ = new While($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 43:
 this.$ = TIPO.ENTERO; 
break;
case 44:
 this.$ = TIPO.DECIMAL; 
break;
case 45:
 this.$ = TIPO.CADENA; 
break;
case 46:
 this.$ = TIPO.CHARACTER; 
break;
case 47:
 this.$ = TIPO.BOOLEANO; 
break;
case 48:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.MAS,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 49:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.MENOS,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 50:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.POR,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 51:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.DIV,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 52:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.MOD,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 53:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.POT,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 54:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.AMPERSON,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 55:
 this.$ = new Aritmetica($$[$0],OperadorAritmetico.UMENOS,$$[$0], _$[$0-1].first_line, _$[$0-1].first_column, true); 
break;
case 56:
 this.$ = $$[$0-1]; 
break;
case 57:
 this.$ = new Logica($$[$0-2], OperadorLogico.AND, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 58:
 this.$ = new Logica($$[$0-2], OperadorLogico.OR, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 59:
 this.$ = new Logica($$[$0], OperadorLogico.NOT, null, $$[$0-1].first_line, $$[$0-1].last_column, true); 
break;
case 60:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.MAYORQUE, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 61:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.MAYORIGUAL, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 62:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.MENORIGUAL, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 63:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.MENORQUE, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 64:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.IGUALIGUAL, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 65:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.DIFERENTE, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 66:
 this.$ = new Primitivo(Number($$[$0]), TIPO.ENTERO, _$[$0].first_line, _$[$0].first_column); 
break;
case 67:
 this.$ = new Primitivo(Number($$[$0]), TIPO.DECIMAL, _$[$0].first_line, _$[$0].first_column); 
break;
case 68:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new Primitivo($$[$0], TIPO.CADENA, _$[$0].first_line, _$[$0].first_column); 
break;
case 69:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new Primitivo($$[$0], TIPO.CHARACTER, _$[$0].first_line, _$[$0].first_column); 
break;
case 70:
 this.$ = new Primitivo(null, TIPO.NULO, _$[$0].first_line, _$[$0].first_column); 
break;
case 71:
 this.$ = new Primitivo(true, TIPO.BOOLEANO, _$[$0].first_line, _$[$0].first_column); 
break;
case 72:
 this.$ = new Primitivo(false, TIPO.BOOLEANO, _$[$0].first_line, _$[$0].first_column); 
break;
case 73:
 this.$ = new Identificador($$[$0] , _$[$0].first_line, _$[$0].last_column); 
break;
case 74:
this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 75:
 this.$ = new Aritmetica(new Identificador($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), OperadorAritmetico.MAS,new Primitivo(Number(1), $$[$0-1].first_line, $$[$0-1].last_column), $$[$0-1].first_line, $$[$0-1].last_column, false); 
break;
case 76:
 this.$ = new Aritmetica(new Identificador($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), OperadorAritmetico.MENOS,new Primitivo(Number(1), $$[$0-1].first_line, $$[$0-1].last_column), $$[$0-1].first_line, $$[$0-1].last_column, false); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:18,22:$V0,27:$V1,31:$V2,32:$V3,36:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd},{1:[3]},{5:[1,30],6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:18,22:$V0,27:$V1,31:$V2,32:$V3,36:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd},o($Ve,[2,3]),{8:[1,32]},{8:[1,33]},{8:[1,34]},{8:[1,35]},o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),{8:[1,36]},{8:[1,37]},{8:[1,38]},o($Vf,[2,14]),{28:[1,39]},{28:[1,40]},{23:[1,41],25:[1,42],26:[1,43]},{20:44,22:[1,45]},{28:[1,46]},{28:[1,47]},{8:[2,39]},{8:[2,40]},{22:$Vg,24:48,28:$Vh,52:$Vi,60:$Vj,67:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{28:[1,60]},{22:[2,43]},{22:[2,44]},{22:[2,45]},{22:[2,46]},{22:[2,47]},{1:[2,1]},o($Ve,[2,2]),o($Vf,[2,4]),o($Vf,[2,5]),o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,11]),o($Vf,[2,12]),o($Vf,[2,13]),{22:$Vg,24:62,28:$Vh,29:61,52:$Vi,60:$Vj,67:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{22:$Vg,24:62,28:$Vh,29:63,52:$Vi,60:$Vj,67:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{22:$Vg,24:64,28:$Vh,52:$Vi,60:$Vj,67:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{8:[2,21]},{8:[2,22]},{8:[2,15],21:[1,65]},o($Vr,[2,18],{23:[1,66]}),{22:$Vg,24:67,28:$Vh,52:$Vi,60:$Vj,67:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{22:$Vg,24:68,28:$Vh,52:$Vi,60:$Vj,67:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{8:[2,41],51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,74:$VH},{22:$Vg,24:85,28:$Vh,52:$Vi,60:$Vj,67:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{22:$Vg,24:86,28:$Vh,52:$Vi,60:$Vj,67:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{22:$Vg,24:87,28:$Vh,52:$Vi,60:$Vj,67:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},o($VI,[2,66]),o($VI,[2,67]),o($VI,[2,68]),o($VI,[2,69]),o($VI,[2,70]),o($VI,[2,71]),o($VI,[2,72]),o($VI,[2,73],{25:[1,88],26:[1,89]}),{22:$Vg,24:90,28:$Vh,52:$Vi,60:$Vj,67:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{21:$VJ,30:[1,91]},o($VK,[2,38],{51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,74:$VH}),{21:$VJ,30:[1,93]},{8:[2,20],51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,74:$VH},{22:[1,94]},{22:$Vg,24:95,28:$Vh,52:$Vi,60:$Vj,67:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{30:[1,96],51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,74:$VH},{30:[1,97],51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,74:$VH},{22:$Vg,24:98,28:$Vh,52:$Vi,60:$Vj,67:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{22:$Vg,24:99,28:$Vh,52:$Vi,60:$Vj,67:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{22:$Vg,24:100,28:$Vh,52:$Vi,60:$Vj,67:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{22:$Vg,24:101,28:$Vh,52:$Vi,60:$Vj,67:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{22:$Vg,24:102,28:$Vh,52:$Vi,60:$Vj,67:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{22:$Vg,24:103,28:$Vh,52:$Vi,60:$Vj,67:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{22:$Vg,24:104,28:$Vh,52:$Vi,60:$Vj,67:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{22:$Vg,24:105,28:$Vh,52:$Vi,60:$Vj,67:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{22:$Vg,24:106,28:$Vh,52:$Vi,60:$Vj,67:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{22:$Vg,24:107,28:$Vh,52:$Vi,60:$Vj,67:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{22:$Vg,24:108,28:$Vh,52:$Vi,60:$Vj,67:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{22:$Vg,24:109,28:$Vh,52:$Vi,60:$Vj,67:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{22:$Vg,24:110,28:$Vh,52:$Vi,60:$Vj,67:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{22:$Vg,24:111,28:$Vh,52:$Vi,60:$Vj,67:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{22:$Vg,24:112,28:$Vh,52:$Vi,60:$Vj,67:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{22:$Vg,24:113,28:$Vh,52:$Vi,60:$Vj,67:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},o($VI,[2,55]),{30:[1,114],51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,74:$VH},o($VL,[2,59],{51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG}),o($VI,[2,75]),o($VI,[2,76]),{30:[1,115],51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,74:$VH},{8:[2,23]},{22:$Vg,24:116,28:$Vh,52:$Vi,60:$Vj,67:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{8:[2,24]},o($Vr,[2,16],{23:[1,117]}),o($Vr,[2,19],{51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,74:$VH}),{6:119,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:18,22:$V0,27:$V1,31:$V2,32:$V3,33:$VM,36:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd},{33:[1,120]},o($VN,[2,48],{53:$Vu,54:$Vv,55:$Vw,56:$Vx}),o($VN,[2,49],{53:$Vu,54:$Vv,55:$Vw,56:$Vx}),o($VO,[2,50],{56:$Vx}),o($VO,[2,51],{56:$Vx}),o($VO,[2,52],{56:$Vx}),o($VI,[2,53]),o($VN,[2,54],{53:$Vu,54:$Vv,55:$Vw,56:$Vx}),o($VL,[2,57],{51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG}),o([8,21,30,39,59,74],[2,58],{51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG}),o($VP,[2,60],{51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy}),o($VP,[2,61],{51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy}),o($VP,[2,62],{51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy}),o($VP,[2,63],{51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy}),o($VQ,[2,64],{51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,61:$VB,62:$VC,63:$VD,64:$VE}),o($VQ,[2,65],{51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,61:$VB,62:$VC,63:$VD,64:$VE}),{39:[1,121],51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,74:$VH},o($VI,[2,56]),{33:[1,122]},o($VK,[2,37],{51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,74:$VH}),{22:$Vg,24:123,28:$Vh,52:$Vi,60:$Vj,67:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{4:124,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:18,22:$V0,27:$V1,31:$V2,32:$V3,36:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd},o($Ve,[2,28],{35:[1,125]}),{37:126,38:[1,127],40:128,41:$VR},{22:$Vg,24:130,28:$Vh,52:$Vi,60:$Vj,67:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{4:131,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:18,22:$V0,27:$V1,31:$V2,32:$V3,36:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd},o($Vr,[2,17],{51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,74:$VH}),{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:18,22:$V0,27:$V1,31:$V2,32:$V3,34:[1,132],36:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd},{6:133,7:4,9:5,10:6,11:7,12:8,13:134,14:10,15:11,16:12,17:13,18:14,19:18,22:$V0,27:$V1,31:$V2,32:$V3,36:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd},{34:[1,135],38:[1,136],40:137,41:$VR},{39:[1,138]},o($VS,[2,35]),{22:$Vg,24:139,28:$Vh,52:$Vi,60:$Vj,67:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},o([8,21,30,39],[2,74],{51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,74:$VH}),{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:18,22:$V0,27:$V1,31:$V2,32:$V3,34:[1,140],36:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd},o($Ve,[2,25],{35:[1,141]}),o($Vf,[2,29]),o($Vf,[2,30]),o($Vf,[2,31]),{39:[1,142]},o($VS,[2,34]),{4:143,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:18,22:$V0,27:$V1,31:$V2,32:$V3,36:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd},{39:[1,144],51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,74:$VH},o($Vf,[2,42]),{12:146,32:[1,147],33:[1,145]},{4:148,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:18,22:$V0,27:$V1,31:$V2,32:$V3,36:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd},{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:18,22:$V0,27:$V1,31:$V2,32:$V3,34:[1,149],36:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd},{4:150,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:18,22:$V0,27:$V1,31:$V2,32:$V3,36:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd},{4:151,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:18,22:$V0,27:$V1,31:$V2,32:$V3,36:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd},o($Vf,[2,27]),{28:[1,152]},{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:18,22:$V0,27:$V1,31:$V2,32:$V3,34:[1,153],36:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd},o($Vf,[2,32]),o($VS,[2,36],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:18,6:31,22:$V0,27:$V1,31:$V2,32:$V3,36:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd}),{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:18,22:$V0,27:$V1,31:$V2,32:$V3,34:[1,154],36:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd},{22:$Vg,24:155,28:$Vh,52:$Vi,60:$Vj,67:$Vk,68:$Vl,69:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},o($Vf,[2,33]),o($Vf,[2,26]),{30:[1,156],51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,74:$VH},{33:$VM}],
defaultActions: {21:[2,39],22:[2,40],25:[2,43],26:[2,44],27:[2,45],28:[2,46],29:[2,47],30:[2,1],42:[2,21],43:[2,22],91:[2,23],93:[2,24]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


    /*::::::::::::::::::     AST      ::::::::::::::::::*/
    const { Ast } = require("../dist/Ast/Ast");

    /*::::::::::::::::::     ENUMs      ::::::::::::::::::*/
    const { TIPO, OperadorAritmetico, OperadorLogico, OperadorRelacional } = require("../dist/TablaSimbolos/Tipo");
    /*::::::::::::::::::     Expresiones      ::::::::::::::::::*/
    const { Primitivo } = require("../dist/Expresiones/Primitivo");
    const { Identificador } = require("../dist/Expresiones/Identificador");
    const { Ternario } = require("../dist/Expresiones/Ternario");
    
    /*..............     Operaciones      ...............*/
    const { Aritmetica } = require("../dist/Expresiones/Operaciones/Aritmeticas");
    const { Logica } = require("../dist/Expresiones/Operaciones/Logicas");
    const { Relacional } = require("../dist/Expresiones/Operaciones/Relacionales");
    /*::::::::::::::::::     Instrucciones      ::::::::::::::::::*/
    const { Print } = require("../dist/Instrucciones/Print");
    /*..............     Condicionales      ...............*/
    const { If } = require("../dist/Instrucciones/Condicionales/If");
    const { Ifsinllave } = require("../dist/Instrucciones/Condicionales/Ifsinllave");
    const { Switch } = require("../dist/Instrucciones/Condicionales/Switch");
    const { Case } = require("../dist/Instrucciones/Condicionales/Case");
    /*..............     Transferencia      ...............*/
    const { Detener } = require("../dist/Instrucciones/Transferencia/Break");
    const { Continuar } = require("../dist/Instrucciones/Transferencia/Continuar");
    const { Return } = require("../dist/Instrucciones/Transferencia/Return");
    /*..............     Ciclicas      ...............*/
    const { While } = require("../dist/Instrucciones/Ciclicas/While");
    const { DoWhile } = require("../dist/Instrucciones/Ciclicas/DoWhile");
    const { For } = require("../dist/Instrucciones/Ciclicas/For");
    /*..............     Declaracion y asignacion      ...............*/
    const { Declaracion } = require("../dist/Instrucciones/Declaracion");
    const { Asignacion } = require("../dist/Instrucciones/Asignacion");
    const { Simbolo } = require("../dist/TablaSimbolos/Simbolo");

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:this.begin('comment');
break;
case 2:this.popState();
break;
case 3:/* skip comment content*/
break;
case 4:/* skip whitespace */
break;
case 5: return 27 
break;
case 6: return 31 
break;
case 7: return 32 
break;
case 8: return 35 
break;
case 9: return 36 
break;
case 10: return 41 
break;
case 11: return 38 
break;
case 12: return 45 
break;
case 13: return 'RFOR' 
break;
case 14: return 71 
break;
case 15: return 72 
break;
case 16: return 73 
break;
case 17: return 46 
break;
case 18: return 47 
break;
case 19: return 50 
break;
case 20: return 49 
break;
case 21: return 48 
break;
case 22: return 42 
break;
case 23: return 43 
break;
case 24: return 44 
break;
case 25: return 25
break;
case 26: return 26
break;
case 27: return 51 
break;
case 28: return 52 
break;
case 29: return 53 
break;
case 30: return 54 
break;
case 31: return 55 
break;
case 32: return 56 
break;
case 33: return 62 
break;
case 34: return 63 
break;
case 35: return 64 
break;
case 36: return 61 
break;
case 37: return 66 
break;
case 38: return 65 
break;
case 39: return 23 
break;
case 40: return 58 
break;
case 41: return 59 
break;
case 42: return 60 
break;
case 43: return 57 
break;
case 44: return 28 
break;
case 45: return 30 
break;
case 46: return 'CORA' 
break;
case 47: return 'CORC' 
break;
case 48: return 33 
break;
case 49: return 34 
break;
case 50: return 'PUNTO' 
break;
case 51: return 8 
break;
case 52: return 21 
break;
case 53: return 74 
break;
case 54: return 39 
break;
case 55:return 68;
break;
case 56:return 67;
break;
case 57:return 22;
break;
case 58:return 69;
break;
case 59:return 70;
break;
case 60:
                                        console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                                    
break;
case 61:/* skip whitespace */
break;
case 62:return 5
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*)/i,/^(?:\*\/)/i,/^(?:.)/i,/^(?:\s+)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:null\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:String\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:&)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\.)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\?)/i,/^(?::)/i,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/i,/^(?:[0-9]+)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_ñÑ]*)/i,/^(?:("((\\([\'\"\\bfnrtv]))|([^\"\\]+))*"))/i,/^(?:('((\\([\'\"\\bfnrtv]))|([^\'\\]))'))/i,/^(?:.)/i,/^(?:[\r\n\t])/i,/^(?:$)/i],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}