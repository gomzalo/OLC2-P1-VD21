/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,38],$V1=[1,29],$V2=[1,25],$V3=[1,26],$V4=[1,30],$V5=[1,31],$V6=[1,32],$V7=[1,33],$V8=[1,34],$V9=[1,35],$Va=[1,37],$Vb=[1,36],$Vc=[1,27],$Vd=[1,39],$Ve=[1,40],$Vf=[1,41],$Vg=[1,42],$Vh=[1,43],$Vi=[5,31,32,35,42,46,47,49,51,54,55,56,57,58,59,60,63,85,86,87,88,89],$Vj=[5,31,32,35,42,46,47,48,49,51,54,55,56,57,58,59,60,63,85,86,87,88,89],$Vk=[1,55],$Vl=[32,69],$Vm=[2,103],$Vn=[1,69],$Vo=[1,66],$Vp=[1,67],$Vq=[1,68],$Vr=[1,70],$Vs=[1,73],$Vt=[1,87],$Vu=[1,78],$Vv=[1,88],$Vw=[1,100],$Vx=[1,99],$Vy=[1,101],$Vz=[1,102],$VA=[1,103],$VB=[1,104],$VC=[1,105],$VD=[1,77],$VE=[1,79],$VF=[1,80],$VG=[1,81],$VH=[1,82],$VI=[1,83],$VJ=[1,84],$VK=[1,85],$VL=[1,86],$VM=[1,92],$VN=[1,93],$VO=[1,94],$VP=[1,95],$VQ=[1,96],$VR=[1,97],$VS=[2,104],$VT=[8,37],$VU=[2,34],$VV=[1,116],$VW=[1,125],$VX=[1,126],$VY=[1,127],$VZ=[1,147],$V_=[1,131],$V$=[1,132],$V01=[1,133],$V11=[1,134],$V21=[1,135],$V31=[1,136],$V41=[1,137],$V51=[1,138],$V61=[1,139],$V71=[1,140],$V81=[1,141],$V91=[1,142],$Va1=[1,143],$Vb1=[1,144],$Vc1=[1,145],$Vd1=[1,146],$Ve1=[8,33,37,45,52,70,90,91,92,93,94,95,96,97,98,100,101,102,103,104,105,113],$Vf1=[2,130],$Vg1=[2,135],$Vh1=[1,157],$Vi1=[1,173],$Vj1=[1,172],$Vk1=[1,178],$Vl1=[37,45],$Vm1=[1,185],$Vn1=[1,215],$Vo1=[8,33,37,45,70,90,91,92,93,94,95,96,97,98,100,101,102,103,104,105,113],$Vp1=[8,33,37,45,70,97,98,113],$Vq1=[2,132],$Vr1=[2,133],$Vs1=[2,136],$Vt1=[1,219],$Vu1=[37,70],$Vv1=[8,33,37,45,52,69,70,90,91,92,93,94,95,96,97,98,100,101,102,103,104,105,113],$Vw1=[1,238],$Vx1=[8,33,37,38,45,52,69,70,90,91,92,93,94,95,96,97,98,100,101,102,103,104,105,113],$Vy1=[1,251],$Vz1=[8,33,37,45,70,90,91,96,97,98,100,101,102,103,104,105,113],$VA1=[8,33,37,45,70,90,91,92,93,94,96,97,98,100,101,102,103,104,105,113],$VB1=[8,33,37,45,70,97,98,100,101,102,103,104,105,113],$VC1=[8,33,37,45,70,97,98,104,105,113],$VD1=[8,33,37,45,70],$VE1=[31,32,35,63,85,86,87,88,89],$VF1=[1,282],$VG1=[35,51,54],$VH1=[1,306],$VI1=[52,90,91,92,93,94,95,96,97,98,100,101,102,103,104,105,113],$VJ1=[8,52,90,91,92,93,94,95,96,97,98,100,101,102,103,104,105,113];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"start":3,"instrucciones":4,"EOF":5,"instruccion":6,"print_instr":7,"PUNTOCOMA":8,"println_instr":9,"main_":10,"funciones":11,"declaracion":12,"asignacion":13,"if_llav_instr":14,"if_instr":15,"switch_instr":16,"break_instr":17,"continue_instr":18,"return_instr":19,"while_instr":20,"for_instr":21,"dowhile_instr":22,"for_in_instr":23,"decl_arr_instr":24,"llamada":25,"modif_arr_instr":26,"structs":27,"nat_push_instr":28,"tipo":29,"lista_simbolos":30,"RSTRUCT":31,"ID":32,"LLAVA":33,"instrucciones_struct":34,"LLAVC":35,"attribute":36,"COMA":37,"IGUAL":38,"expr":39,"INCRE":40,"DECRE":41,"RPRINT":42,"PARA":43,"lista_parametros":44,"PARC":45,"RPRINTLN":46,"RIF":47,"RELSE":48,"RSWITCH":49,"lista_cases":50,"RDEFAULT":51,"DOSPUNTOS":52,"case":53,"RCASE":54,"RBREAK":55,"RCONTINUE":56,"RRETURN":57,"RWHILE":58,"RDO":59,"RFOR":60,"actualizacion":61,"RIN":62,"RVOID":63,"RMAIN":64,"lista_parametros_func":65,"parametro_func":66,"lista_dim":67,"lista_exp_arr":68,"CORA":69,"CORC":70,"lista_exp_arr_c":71,"HASH":72,"lista_exp":73,"rango":74,"RBEGIN":75,"REND":76,"PUNTO":77,"RPUSH":78,"nat_matematicas":79,"RSIN":80,"RCOS":81,"RTAN":82,"RSQRT":83,"RLOG":84,"RINT":85,"RDOUBLE":86,"RSTRING":87,"RCHAR":88,"RBOOLEAN":89,"MAS":90,"MENOS":91,"MULTI":92,"DIV":93,"PORCENTAJE":94,"POTENCIA":95,"AMPERSON":96,"AND":97,"OR":98,"NOT":99,"MAYORQUE":100,"MAYORIGUAL":101,"MENORIGUAL":102,"MENORQUE":103,"IGUALIGUAL":104,"DIFERENTE":105,"ENTERO":106,"DECIMAL":107,"CADENA":108,"CHAR":109,"NULL":110,"TRUE":111,"FALSE":112,"INTERROGACION":113,"RPOP":114,"RLENGTH":115,"RCHAROFPOS":116,"RSUBSTRING":117,"RTOUPPER":118,"RTOLOWER":119,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PUNTOCOMA",31:"RSTRUCT",32:"ID",33:"LLAVA",35:"LLAVC",37:"COMA",38:"IGUAL",40:"INCRE",41:"DECRE",42:"RPRINT",43:"PARA",45:"PARC",46:"RPRINTLN",47:"RIF",48:"RELSE",49:"RSWITCH",51:"RDEFAULT",52:"DOSPUNTOS",54:"RCASE",55:"RBREAK",56:"RCONTINUE",57:"RRETURN",58:"RWHILE",59:"RDO",60:"RFOR",62:"RIN",63:"RVOID",64:"RMAIN",69:"CORA",70:"CORC",72:"HASH",75:"RBEGIN",76:"REND",77:"PUNTO",78:"RPUSH",80:"RSIN",81:"RCOS",82:"RTAN",83:"RSQRT",84:"RLOG",85:"RINT",86:"RDOUBLE",87:"RSTRING",88:"RCHAR",89:"RBOOLEAN",90:"MAS",91:"MENOS",92:"MULTI",93:"DIV",94:"PORCENTAJE",95:"POTENCIA",96:"AMPERSON",97:"AND",98:"OR",99:"NOT",100:"MAYORQUE",101:"MAYORIGUAL",102:"MENORIGUAL",103:"MENORQUE",104:"IGUALIGUAL",105:"DIFERENTE",106:"ENTERO",107:"DECIMAL",108:"CADENA",109:"CHAR",110:"NULL",111:"TRUE",112:"FALSE",113:"INTERROGACION",114:"RPOP",115:"RLENGTH",116:"RCHAROFPOS",117:"RSUBSTRING",118:"RTOUPPER",119:"RTOLOWER"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[12,2],[27,5],[34,2],[34,1],[36,0],[36,3],[36,2],[30,3],[30,5],[30,1],[30,3],[13,3],[13,2],[13,2],[13,4],[7,4],[9,4],[14,7],[14,11],[14,9],[15,5],[15,7],[15,7],[16,7],[16,9],[16,10],[50,2],[50,1],[53,4],[44,3],[44,1],[17,1],[18,1],[19,2],[20,7],[22,8],[21,11],[21,11],[61,3],[61,2],[61,2],[23,7],[10,7],[10,6],[11,7],[11,8],[65,3],[65,1],[66,2],[66,1],[25,3],[25,4],[24,5],[67,3],[67,2],[68,4],[68,3],[68,2],[71,3],[71,1],[73,4],[73,3],[26,4],[74,3],[74,3],[74,3],[74,3],[28,6],[79,1],[79,1],[79,1],[79,1],[79,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,2],[39,3],[39,3],[39,3],[39,2],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,5],[39,2],[39,2],[39,3],[39,1],[39,2],[39,1],[39,3],[39,1],[39,3],[39,3],[39,4],[39,6],[39,3],[39,3],[39,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log($$[$0-1]); this.$ = new Ast();  this.$.instrucciones = $$[$0-1]; return this.$; 
break;
case 2: case 27: case 51:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: case 28:
 this.$= new Array(); this.$.push($$[$0]); 
break;
case 4: case 5: case 8: case 9: case 13: case 14: case 15: case 18: case 20: case 21: case 22: case 23: case 24: case 31:
 this.$ = $$[$0-1] 
break;
case 6: case 7: case 10: case 11: case 12: case 16: case 17: case 19:
 this.$ = $$[$0] 
break;
case 25:
 this.$ = new Declaracion($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].last_column); 
break;
case 26:
 this.$ = new Struct($$[$0-3],$$[$0-1],_$[$0-4].first_line, _$[$0-4].last_column); 
break;
case 30:
this.$ = new StructInStruct($$[$0-2],$$[$0-1],_$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 32:
 this.$ = $$[$0-2]; this.$.push(new Simbolo($$[$0],null,null,_$[$0-2].first_line, _$[$0-2].first_column,null)); 
break;
case 33:
 this.$ = $$[$0-4]; this.$.push(new Simbolo($$[$0-2],null,null,_$[$0-4].first_line, _$[$0-4].first_column,$$[$0])); 
break;
case 34:
 this.$ = new Array(); this.$.push(new Simbolo($$[$0],null,null,_$[$0].first_line, _$[$0].first_column,null)); 
break;
case 35:
 this.$ = new Array(); this.$.push(new Simbolo($$[$0-2],null,null,_$[$0-2].first_line, _$[$0-2].first_column,$$[$0])); 
break;
case 36: case 63:
 this.$ = new Asignacion($$[$0-2] ,$$[$0], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 37: case 64:
 this.$ = new Asignacion($$[$0-1] ,new Aritmetica(new Identificador($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), OperadorAritmetico.MAS,new Primitivo(Number(1), $$[$0-1].first_line, $$[$0-1].last_column), $$[$0-1].first_line, $$[$0-1].last_column, false), _$[$0-1].first_line, _$[$0-1].last_column); 
break;
case 38: case 65:
 this.$ = new Asignacion($$[$0-1] ,new Aritmetica(new Identificador($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), OperadorAritmetico.MENOS,new Primitivo(Number(1), $$[$0-1].first_line, $$[$0-1].last_column), $$[$0-1].first_line, $$[$0-1].last_column, false), _$[$0-1].first_line, _$[$0-1].last_column); 
break;
case 39:
 this.$ = new DeclararStruct($$[$0-3],$$[$0-2],$$[$0],_$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 40:
 this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, false); 
break;
case 41:
 this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, true); 
break;
case 42:
 this.$ = new If($$[$0-4], $$[$0-1], null,null, _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 43:
 this.$ = new If($$[$0-8], $$[$0-5], $$[$0-1],null, _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 44:
 this.$ = new If($$[$0-6], $$[$0-3],null, $$[$0], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 45:
 this.$ = new Ifsinllave($$[$0-2], $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 46:
 this.$ = new Ifsinllave($$[$0-4], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 47:
 this.$ = new Ifsinllave($$[$0-4], $$[$0-2], [$$[$0]], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 48:
 this.$ = new Switch($$[$0-4], $$[$0-1], [], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 49:
 this.$ = new Switch($$[$0-6], [], $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 50:
 this.$ = new Switch($$[$0-7], $$[$0-4], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column); 
break;
case 52: case 55:
 this.$ = new Array(); this.$.push($$[$0]);
break;
case 53:
 this.$ = new Case($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 54: case 71: case 83:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 56:
 this.$ = new Detener(_$[$0].first_line, _$[$0].first_column); 
break;
case 57:
 this.$ = new Continuar(_$[$0].first_line, _$[$0].first_column); 
break;
case 58:
 this.$ = new Return($$[$0],_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 59:
 this.$ = new While($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 60:
 this.$ = new DoWhile($$[$0-1], $$[$0-5], _$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 61: case 62:
 this.$ = new For($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 66:
 this.$ = new ForIn($$[$0-5], $$[$0-3], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 67:
this.$ = new Main($$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 68:
this.$ = new Main([],_$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 69:
 this.$ = new Funcion($$[$0-5], $$[$0-6], [], $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 70:
 this.$ = new Funcion($$[$0-6], $$[$0-7], $$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 72: case 84:
 this.$ = new Array(); this.$.push($$[$0]); 
break;
case 73:
 this.$ = {"tipo" : $$[$0-1], "arreglo": false, "id": $$[$0]}; 
break;
case 74:
 this.$ = {"tipo" : TIPO.ANY, "arreglo": false, "id": $$[$0]}; 
break;
case 75:
 this.$ = new Llamada($$[$0-2] , [], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 76:
 this.$ = new Llamada($$[$0-3] , $$[$0-1] , _$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 77:
 this.$ = new DeclaracionArr($$[$0-4], $$[$0-3], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].last_column); 
break;
case 78:
 this.$ = $$[$0-2]; this.$.push($$[$0-1]+1); 
break;
case 79:
 this.$ = new Array(); this.$.push(1); 
break;
case 80: case 85:
 this.$ = $$[$0-3]; this.$.push($$[$0-1]); 
break;
case 81: case 86:
 this.$ = new Array(); this.$.push($$[$0-1]); 
break;
case 82:
 this.$ = new Copiar($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 87:
 this.$ = new ModificacionArr($$[$0-3], $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 88: case 89: case 90: case 91:
 this.$ = {"inicio": $$[$0-2], "fin": $$[$0]}; 
break;
case 92:
 this.$ = new Push(new Identificador($$[$0-5] , _$[$0-5].first_line, _$[$0-5].last_column), $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 93: case 94: case 95: case 96: case 97: case 135:
 this.$ = $$[$0]; 
break;
case 98:
 this.$ = TIPO.ENTERO; 
break;
case 99:
 this.$ = TIPO.DECIMAL; 
break;
case 100:
 this.$ = TIPO.CADENA; 
break;
case 101:
 this.$ = TIPO.CHARACTER; 
break;
case 102:
 this.$ = TIPO.BOOLEANO; 
break;
case 103:
 this.$ = TIPO.VOID; 
break;
case 104:
 this.$ = TIPO.STRUCT; 
break;
case 105:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.MAS,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 106:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.MENOS,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 107:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.POR,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 108:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.DIV,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 109:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.MOD,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 110:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.POT,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 111:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.AMPERSON,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 112:
 this.$ = new Aritmetica($$[$0],OperadorAritmetico.UMENOS,$$[$0], _$[$0-1].first_line, _$[$0-1].first_column, true); 
break;
case 113: case 134:
 this.$ = $$[$0-1]; 
break;
case 114:
 this.$ = new Logica($$[$0-2], OperadorLogico.AND, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 115:
 this.$ = new Logica($$[$0-2], OperadorLogico.OR, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 116:
 this.$ = new Logica($$[$0], OperadorLogico.NOT, null, $$[$0-1].first_line, $$[$0-1].last_column, true); 
break;
case 117:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.MAYORQUE, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 118:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.MAYORIGUAL, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 119:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.MENORIGUAL, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 120:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.MENORQUE, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 121:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.IGUALIGUAL, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 122:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.DIFERENTE, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 123:
 this.$ = new Primitivo(Number($$[$0]), TIPO.ENTERO, _$[$0].first_line, _$[$0].first_column); 
break;
case 124:
 this.$ = new Primitivo(Number($$[$0]), TIPO.DECIMAL, _$[$0].first_line, _$[$0].first_column); 
break;
case 125:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new Primitivo($$[$0], TIPO.CADENA, _$[$0].first_line, _$[$0].first_column); 
break;
case 126:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new Primitivo($$[$0], TIPO.CHARACTER, _$[$0].first_line, _$[$0].first_column); 
break;
case 127:
 this.$ = new Primitivo(null, TIPO.NULO, _$[$0].first_line, _$[$0].first_column); 
break;
case 128:
 this.$ = new Primitivo(true, TIPO.BOOLEANO, _$[$0].first_line, _$[$0].first_column); 
break;
case 129:
 this.$ = new Primitivo(false, TIPO.BOOLEANO, _$[$0].first_line, _$[$0].first_column); 
break;
case 130:
 this.$ = new Identificador($$[$0] , _$[$0].first_line, _$[$0].last_column); 
break;
case 131:
this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 132:
 this.$ = new Aritmetica(new Identificador($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), OperadorAritmetico.MAS,new Primitivo(Number(1), $$[$0-1].first_line, $$[$0-1].last_column), $$[$0-1].first_line, $$[$0-1].last_column, false); 
break;
case 133:
 this.$ = new Aritmetica(new Identificador($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), OperadorAritmetico.MENOS,new Primitivo(Number(1), $$[$0-1].first_line, $$[$0-1].last_column), $$[$0-1].first_line, $$[$0-1].last_column, false); 
break;
case 136:
 this.$ = new AccesoArr($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 137:
 this.$ = new Rango(TIPO.RANGO, [$$[$0].inicio, $$[$0].fin], _$[$0].first_line, _$[$0].last_column); 
break;
case 138:
   if( $$[$0] instanceof Pop || $$[$0] instanceof Length || $$[$0] instanceof CharOfPos ||
                                            $$[$0] instanceof subString || $$[$0] instanceof toUpper || $$[$0] instanceof toLower){
                                            this.$ = $$[$0];
                                            let identifica =new Identificador($$[$0-2] , _$[$0-2].first_line, _$[$0-2].last_column);
                                            this.$.id = identifica.id;
                                        }else{
                                            this.$ = new AccesoStruct(new Identificador($$[$0-2] , _$[$0-2].first_line, _$[$0-2].last_column),$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
                                        }
                                    
break;
case 139:
 this.$ = new Arreglo(TIPO.ARREGLO, $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 140:
 this.$ = new Pop(null, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 141:
 this.$ = new Length(null, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 142:
 this.$ = new CharOfPos(null, $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 143:
 this.$ = new subString(null, $$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 144:
 this.$ = new toUpper(null, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 145:
 this.$ = new toLower(null, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 146:
 this.$ = new Matematicas($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:28,31:$V0,32:$V1,42:$V2,46:$V3,47:$V4,49:$V5,55:$V6,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,63:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh},{1:[3]},{5:[1,44],6:45,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:28,31:$V0,32:$V1,42:$V2,46:$V3,47:$V4,49:$V5,55:$V6,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,63:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh},o($Vi,[2,3]),{8:[1,46]},{8:[1,47]},o($Vj,[2,6]),o($Vj,[2,7]),{8:[1,48]},{8:[1,49]},o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,12]),{8:[1,50]},{8:[1,51]},{8:[1,52]},o($Vj,[2,16]),o($Vj,[2,17]),{8:[1,53]},o($Vj,[2,19]),{8:[1,54]},{8:$Vk},{8:[1,56]},{8:[1,57]},{8:[1,58]},{43:[1,59]},{43:[1,60]},o($Vl,$Vm,{64:[1,61]}),{30:63,32:[1,62],67:64,69:[1,65]},{32:$Vn,38:$Vo,40:$Vp,41:$Vq,43:$Vr,69:$Vs,73:71,77:[1,72]},{43:[1,74]},{43:[1,75]},{8:[2,56]},{8:[2,57]},{25:89,32:$Vt,39:76,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{43:[1,106]},{32:[1,108],43:[1,107]},{33:[1,109]},{32:[1,110],69:$VS},o($Vl,[2,98]),o($Vl,[2,99]),o($Vl,[2,100]),o($Vl,[2,101]),o($Vl,[2,102]),{1:[2,1]},o($Vi,[2,2]),o($Vj,[2,4]),o($Vj,[2,5]),o($Vj,[2,8]),o($Vj,[2,9]),o($Vj,[2,13]),o($Vj,[2,14]),o($Vj,[2,15]),o($Vj,[2,18]),o($Vj,[2,20]),o($Vj,[2,21]),o($Vj,[2,22]),o($Vj,[2,23]),o($Vj,[2,24]),{25:89,32:$Vt,39:112,43:$Vu,44:111,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{25:89,32:$Vt,39:112,43:$Vu,44:113,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{43:[1,114]},o($VT,$VU,{38:$VV,43:[1,115]}),{8:[2,25],37:[1,117]},{32:[1,118],69:[1,119]},{70:[1,120]},{25:89,32:$Vt,39:121,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{8:[2,37]},{8:[2,38]},{38:[1,122]},{25:89,32:$Vt,39:112,43:$Vu,44:124,45:[1,123],68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{38:$VW,69:$VX},{78:$VY},{25:89,32:$Vt,39:128,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{25:89,32:$Vt,39:129,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{25:89,32:$Vt,39:130,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{8:[2,58],52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,100:$V71,101:$V81,102:$V91,103:$Va1,104:$Vb1,105:$Vc1,113:$Vd1},{25:89,32:$Vt,39:148,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{25:89,32:$Vt,39:149,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{25:89,32:$Vt,39:150,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},o($Ve1,[2,123]),o($Ve1,[2,124]),o($Ve1,[2,125]),o($Ve1,[2,126]),o($Ve1,[2,127]),o($Ve1,[2,128]),o($Ve1,[2,129]),o($Ve1,$Vf1,{73:153,40:[1,151],41:[1,152],43:$Vr,69:$Vs,77:[1,154]}),{25:89,32:$Vt,39:156,43:$Vu,68:91,69:$Vv,71:155,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},o($Ve1,$Vg1),o($Ve1,[2,137]),o($Ve1,[2,139],{69:$Vh1}),{43:[1,158]},{43:[1,159]},{43:[1,160]},{43:[1,161]},{43:[1,162]},{43:[1,163]},{43:[1,164]},{52:[1,165]},{32:[1,166]},{43:[2,93]},{43:[2,94]},{43:[2,95]},{43:[2,96]},{43:[2,97]},{25:89,32:$Vt,39:167,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{12:169,13:168,29:171,31:$Vi1,32:[1,170],63:$Vj1,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh},{62:[1,174]},{4:175,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:28,31:$V0,32:$V1,42:$V2,46:$V3,47:$V4,49:$V5,55:$V6,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,63:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh},{33:[1,176]},{37:$Vk1,45:[1,177]},o($Vl1,[2,55],{52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,100:$V71,101:$V81,102:$V91,103:$Va1,104:$Vb1,105:$Vc1,113:$Vd1}),{37:$Vk1,45:[1,179]},{45:[1,180]},{29:184,31:$Vi1,32:$Vm1,45:[1,181],63:$Vj1,65:182,66:183,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh},{25:89,32:$Vt,39:186,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{32:[1,187]},{38:[1,188]},{70:[1,189]},o($Vl,[2,79]),{8:[2,36],52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,100:$V71,101:$V81,102:$V91,103:$Va1,104:$Vb1,105:$Vc1,113:$Vd1},{25:89,32:$Vt,39:190,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},o($Ve1,[2,75]),{37:$Vk1,45:[1,191]},{25:89,32:$Vt,39:192,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{25:89,32:$Vt,39:193,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{43:[1,194]},{52:$VZ,70:[1,195],90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,100:$V71,101:$V81,102:$V91,103:$Va1,104:$Vb1,105:$Vc1,113:$Vd1},{45:[1,196],52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,100:$V71,101:$V81,102:$V91,103:$Va1,104:$Vb1,105:$Vc1,113:$Vd1},{45:[1,197],52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,100:$V71,101:$V81,102:$V91,103:$Va1,104:$Vb1,105:$Vc1,113:$Vd1},{25:89,32:$Vt,39:198,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{25:89,32:$Vt,39:199,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{25:89,32:$Vt,39:200,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{25:89,32:$Vt,39:201,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{25:89,32:$Vt,39:202,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{25:89,32:$Vt,39:203,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{25:89,32:$Vt,39:204,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{25:89,32:$Vt,39:205,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{25:89,32:$Vt,39:206,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{25:89,32:$Vt,39:207,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{25:89,32:$Vt,39:208,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{25:89,32:$Vt,39:209,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{25:89,32:$Vt,39:210,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{25:89,32:$Vt,39:211,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{25:89,32:$Vt,39:212,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{25:89,32:$Vt,39:213,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{25:89,32:$Vt,39:214,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,76:$Vn1,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},o($Vo1,[2,112],{52:$VZ}),{45:[1,216],52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,100:$V71,101:$V81,102:$V91,103:$Va1,104:$Vb1,105:$Vc1,113:$Vd1},o($Vp1,[2,116],{52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,100:$V71,101:$V81,102:$V91,103:$Va1,104:$Vb1,105:$Vc1}),o($Ve1,$Vq1),o($Ve1,$Vr1),o($Ve1,$Vs1,{69:$VX}),{25:89,32:$Vt,39:217,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{37:$Vt1,70:[1,218]},o($Vu1,[2,84],{52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,100:$V71,101:$V81,102:$V91,103:$Va1,104:$Vb1,105:$Vc1,113:$Vd1}),{25:89,32:$Vt,39:156,43:$Vu,68:91,69:$Vv,71:220,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{45:[1,221]},{45:[1,222]},{25:89,32:$Vt,39:223,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{25:89,32:$Vt,39:224,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{45:[1,225]},{45:[1,226]},{25:89,32:$Vt,39:227,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{25:89,32:$Vt,39:229,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,76:[1,228],79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},o($Vv1,[2,82]),{45:[1,230],52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,100:$V71,101:$V81,102:$V91,103:$Va1,104:$Vb1,105:$Vc1,113:$Vd1},{8:[1,231]},{8:[1,232]},{32:$Vn,38:$Vo,40:$Vp,41:$Vq},{30:63,32:[1,233]},{32:$Vm},{32:$VS},{25:89,32:$Vt,39:234,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{6:45,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:28,31:$V0,32:$V1,35:[1,235],42:$V2,46:$V3,47:$V4,49:$V5,55:$V6,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,63:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh},{12:239,29:171,31:$Vi1,32:$Vw1,34:236,35:[2,29],36:237,63:$Vj1,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh},{8:[2,40]},{25:89,32:$Vt,39:240,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{8:[2,41]},{33:[1,241]},{33:[1,242]},{37:[1,244],45:[1,243]},o($Vl1,[2,72]),{32:[1,245]},o($Vl1,[2,74]),o($VT,[2,35],{52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,100:$V71,101:$V81,102:$V91,103:$Va1,104:$Vb1,105:$Vc1,113:$Vd1}),o($VT,[2,32],{38:[1,246]}),{68:247,69:[1,248],72:$Vw},o($Vl,[2,78]),{8:[2,39],52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,100:$V71,101:$V81,102:$V91,103:$Va1,104:$Vb1,105:$Vc1,113:$Vd1},o($Ve1,[2,76]),{8:[2,87],52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,100:$V71,101:$V81,102:$V91,103:$Va1,104:$Vb1,105:$Vc1,113:$Vd1},{52:$VZ,70:[1,249],90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,100:$V71,101:$V81,102:$V91,103:$Va1,104:$Vb1,105:$Vc1,113:$Vd1},{25:89,32:$Vt,39:250,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},o($Vx1,[2,86]),{6:252,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:28,31:$V0,32:$V1,33:$Vy1,42:$V2,46:$V3,47:$V4,49:$V5,55:$V6,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,63:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh},{33:[1,253]},o($Vz1,[2,105],{52:$VZ,92:$V01,93:$V11,94:$V21,95:$V31}),o($Vz1,[2,106],{52:$VZ,92:$V01,93:$V11,94:$V21,95:$V31}),o($VA1,[2,107],{52:$VZ,95:$V31}),o($VA1,[2,108],{52:$VZ,95:$V31}),o($VA1,[2,109],{52:$VZ,95:$V31}),o($Vo1,[2,110],{52:$VZ}),o($Vz1,[2,111],{52:$VZ,92:$V01,93:$V11,94:$V21,95:$V31}),o($Vp1,[2,114],{52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,100:$V71,101:$V81,102:$V91,103:$Va1,104:$Vb1,105:$Vc1}),o([8,33,37,45,70,98,113],[2,115],{52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,100:$V71,101:$V81,102:$V91,103:$Va1,104:$Vb1,105:$Vc1}),o($VB1,[2,117],{52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41}),o($VB1,[2,118],{52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41}),o($VB1,[2,119],{52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41}),o($VB1,[2,120],{52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41}),o($VC1,[2,121],{52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,100:$V71,101:$V81,102:$V91,103:$Va1}),o($VC1,[2,122],{52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,100:$V71,101:$V81,102:$V91,103:$Va1}),{52:[1,254],90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,100:$V71,101:$V81,102:$V91,103:$Va1,104:$Vb1,105:$Vc1,113:$Vd1},o($VD1,[2,88],{52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,100:$V71,101:$V81,102:$V91,103:$Va1,104:$Vb1,105:$Vc1,113:$Vd1}),o($Ve1,[2,90]),o($Ve1,[2,113]),o($Vz1,[2,138],{52:$VZ,92:$V01,93:$V11,94:$V21,95:$V31}),o($Vv1,[2,134]),{25:89,32:$Vt,39:255,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{37:$Vt1,70:[1,256]},o($Ve1,[2,140]),o($Ve1,[2,141]),{45:[1,257],52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,100:$V71,101:$V81,102:$V91,103:$Va1,104:$Vb1,105:$Vc1,113:$Vd1},{37:[1,258],52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,100:$V71,101:$V81,102:$V91,103:$Va1,104:$Vb1,105:$Vc1,113:$Vd1},o($Ve1,[2,144]),o($Ve1,[2,145]),{45:[1,259],52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,100:$V71,101:$V81,102:$V91,103:$Va1,104:$Vb1,105:$Vc1,113:$Vd1},o($Ve1,[2,89]),o($VD1,[2,91],{52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,100:$V71,101:$V81,102:$V91,103:$Va1,104:$Vb1,105:$Vc1,113:$Vd1}),{33:[1,260]},{25:89,32:$Vt,39:261,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{25:89,32:$Vt,39:262,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},o($VT,$VU,{38:$VV}),{33:[1,263],52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,100:$V71,101:$V81,102:$V91,103:$Va1,104:$Vb1,105:$Vc1,113:$Vd1},{58:[1,264]},{12:239,29:171,31:$Vi1,32:$Vw1,35:[1,265],36:266,63:$Vj1,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh},o($VE1,[2,28]),{32:[1,267]},{8:[1,268]},o($Vl1,[2,54],{52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,100:$V71,101:$V81,102:$V91,103:$Va1,104:$Vb1,105:$Vc1,113:$Vd1}),{4:269,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:28,31:$V0,32:$V1,35:[1,270],42:$V2,46:$V3,47:$V4,49:$V5,55:$V6,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,63:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh},{4:271,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:28,31:$V0,32:$V1,42:$V2,46:$V3,47:$V4,49:$V5,55:$V6,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,63:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh},{33:[1,272]},{29:184,31:$Vi1,32:$Vm1,63:$Vj1,66:273,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh},o($Vl1,[2,73]),{25:89,32:$Vt,39:274,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{8:[2,77],69:$Vh1},{25:89,32:$Vt,39:156,43:$Vu,68:91,69:$Vv,71:275,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},o($Vx1,[2,85]),{45:[1,276],52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,100:$V71,101:$V81,102:$V91,103:$Va1,104:$Vb1,105:$Vc1,113:$Vd1},{4:277,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:28,31:$V0,32:$V1,42:$V2,46:$V3,47:$V4,49:$V5,55:$V6,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,63:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh},o($Vi,[2,45],{48:[1,278]}),{50:279,51:[1,280],53:281,54:$VF1},{25:89,32:$Vt,39:283,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,76:$Vn1,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},o($Vu1,[2,83],{52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,100:$V71,101:$V81,102:$V91,103:$Va1,104:$Vb1,105:$Vc1,113:$Vd1}),o($Vv1,[2,80]),o($Ve1,[2,142]),{25:89,32:$Vt,39:284,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},o($Ve1,[2,146]),{4:285,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:28,31:$V0,32:$V1,42:$V2,46:$V3,47:$V4,49:$V5,55:$V6,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,63:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh},{8:[1,286],52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,100:$V71,101:$V81,102:$V91,103:$Va1,104:$Vb1,105:$Vc1,113:$Vd1},{8:[1,287],52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,100:$V71,101:$V81,102:$V91,103:$Va1,104:$Vb1,105:$Vc1,113:$Vd1},{4:288,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:28,31:$V0,32:$V1,42:$V2,46:$V3,47:$V4,49:$V5,55:$V6,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,63:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh},{43:[1,289]},{8:[2,26]},o($VE1,[2,27]),{8:[1,290]},o($VE1,[2,31]),{6:45,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:28,31:$V0,32:$V1,35:[1,291],42:$V2,46:$V3,47:$V4,49:$V5,55:$V6,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,63:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh},o($Vj,[2,68]),{6:45,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:28,31:$V0,32:$V1,35:[1,292],42:$V2,46:$V3,47:$V4,49:$V5,55:$V6,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,63:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh},{4:293,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:28,31:$V0,32:$V1,42:$V2,46:$V3,47:$V4,49:$V5,55:$V6,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,63:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh},o($Vl1,[2,71]),o($VT,[2,33],{52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,100:$V71,101:$V81,102:$V91,103:$Va1,104:$Vb1,105:$Vc1,113:$Vd1}),{37:$Vt1,70:[1,294]},{8:[2,92]},{6:45,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:28,31:$V0,32:$V1,35:[1,295],42:$V2,46:$V3,47:$V4,49:$V5,55:$V6,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,63:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh},{6:296,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:297,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:28,31:$V0,32:$V1,42:$V2,46:$V3,47:$V4,49:$V5,55:$V6,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,63:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh},{35:[1,298],51:[1,299],53:300,54:$VF1},{52:[1,301]},o($VG1,[2,52]),{25:89,32:$Vt,39:302,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},o($VD1,[2,131],{52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,100:$V71,101:$V81,102:$V91,103:$Va1,104:$Vb1,105:$Vc1,113:$Vd1}),{45:[1,303],52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,100:$V71,101:$V81,102:$V91,103:$Va1,104:$Vb1,105:$Vc1,113:$Vd1},{6:45,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:28,31:$V0,32:$V1,35:[1,304],42:$V2,46:$V3,47:$V4,49:$V5,55:$V6,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,63:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh},{32:$VH1,61:305},{32:$VH1,61:307},{6:45,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:28,31:$V0,32:$V1,35:[1,308],42:$V2,46:$V3,47:$V4,49:$V5,55:$V6,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,63:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh},{25:89,32:$Vt,39:309,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},o($VE1,[2,30]),o($Vj,[2,67]),o($Vj,[2,69]),{6:45,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:28,31:$V0,32:$V1,35:[1,310],42:$V2,46:$V3,47:$V4,49:$V5,55:$V6,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,63:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh},o([8,69],[2,81]),o($Vi,[2,42],{48:[1,311]}),o($Vj,[2,46]),o($Vj,[2,47]),o($Vj,[2,48]),{52:[1,312]},o($VG1,[2,51]),{4:313,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:28,31:$V0,32:$V1,42:$V2,46:$V3,47:$V4,49:$V5,55:$V6,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,63:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh},{52:[1,314],90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,100:$V71,101:$V81,102:$V91,103:$Va1,104:$Vb1,105:$Vc1,113:$Vd1},o($Ve1,[2,143]),o($Vj,[2,59]),{45:[1,315]},{38:[1,316],40:[1,317],41:[1,318]},{45:[1,319]},o($Vj,[2,66]),{45:[1,320],52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,100:$V71,101:$V81,102:$V91,103:$Va1,104:$Vb1,105:$Vc1,113:$Vd1},o($Vj,[2,70]),{14:322,33:[1,321],47:[1,323]},{4:324,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:28,31:$V0,32:$V1,42:$V2,46:$V3,47:$V4,49:$V5,55:$V6,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,63:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh},{6:45,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:28,31:$V0,32:$V1,35:[1,325],42:$V2,46:$V3,47:$V4,49:$V5,55:$V6,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,63:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh},{4:326,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:328,26:22,27:23,28:24,29:28,31:$V0,32:[1,327],39:214,42:$V2,43:$Vu,46:$V3,47:$V4,49:$V5,55:$V6,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,63:$Vc,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,76:$Vn1,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{33:[1,329]},{25:89,32:$Vt,39:330,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{45:[2,64]},{45:[2,65]},{33:[1,331]},{8:[2,60]},{4:332,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:28,31:$V0,32:$V1,42:$V2,46:$V3,47:$V4,49:$V5,55:$V6,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,63:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh},o($Vj,[2,44]),{43:[1,333]},{6:45,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:28,31:$V0,32:$V1,35:[1,334],42:$V2,46:$V3,47:$V4,49:$V5,55:$V6,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,63:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh},o($Vj,[2,49]),o($VG1,[2,53],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:28,6:45,31:$V0,32:$V1,42:$V2,46:$V3,47:$V4,49:$V5,55:$V6,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,63:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh}),o($VI1,$Vf1,{73:337,32:$Vn,38:$Vo,40:[1,335],41:[1,336],43:$Vr,69:$Vs,77:[1,338]}),o($VI1,$Vg1,{8:$Vk}),{4:339,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:28,31:$V0,32:$V1,42:$V2,46:$V3,47:$V4,49:$V5,55:$V6,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,63:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh},{45:[2,63],52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,100:$V71,101:$V81,102:$V91,103:$Va1,104:$Vb1,105:$Vc1,113:$Vd1},{4:340,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:28,31:$V0,32:$V1,42:$V2,46:$V3,47:$V4,49:$V5,55:$V6,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,63:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh},{6:45,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:28,31:$V0,32:$V1,35:[1,341],42:$V2,46:$V3,47:$V4,49:$V5,55:$V6,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,63:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh},{25:89,32:$Vt,39:342,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},o($Vj,[2,50]),o($VJ1,$Vq1),o($VJ1,$Vr1),o($VI1,$Vs1,{38:$VW,69:$VX}),{25:89,32:$Vt,39:217,43:$Vu,68:91,69:$Vv,72:$Vw,74:90,75:$Vx,78:$VY,79:98,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC,91:$VD,99:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,114:$VM,115:$VN,116:$VO,117:$VP,118:$VQ,119:$VR},{6:45,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:28,31:$V0,32:$V1,35:[1,343],42:$V2,46:$V3,47:$V4,49:$V5,55:$V6,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,63:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh},{6:45,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:28,31:$V0,32:$V1,35:[1,344],42:$V2,46:$V3,47:$V4,49:$V5,55:$V6,56:$V7,57:$V8,58:$V9,59:$Va,60:$Vb,63:$Vc,85:$Vd,86:$Ve,87:$Vf,88:$Vg,89:$Vh},o($Vj,[2,43]),{45:[1,345],52:$VZ,90:$V_,91:$V$,92:$V01,93:$V11,94:$V21,95:$V31,96:$V41,97:$V51,98:$V61,100:$V71,101:$V81,102:$V91,103:$Va1,104:$Vb1,105:$Vc1,113:$Vd1},o($Vj,[2,61]),o($Vj,[2,62]),{33:$Vy1}],
defaultActions: {32:[2,56],33:[2,57],44:[2,1],67:[2,37],68:[2,38],101:[2,93],102:[2,94],103:[2,95],104:[2,96],105:[2,97],172:[2,103],173:[2,104],177:[2,40],179:[2,41],265:[2,26],276:[2,92],317:[2,64],318:[2,65],320:[2,60]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


    /*::::::::::::::::::     AST      ::::::::::::::::::*/
    const { Ast } = require("../dist/Ast/Ast");
    /*::::::::::::::::::     ENUMs      ::::::::::::::::::*/
    const { TIPO, OperadorAritmetico, OperadorLogico, OperadorRelacional } = require("../dist/TablaSimbolos/Tipo");
    /*::::::::::::::::::     Expresiones      ::::::::::::::::::*/
    const { Primitivo } = require("../dist/Expresiones/Primitivo");
    const { Identificador } = require("../dist/Expresiones/Identificador");
    const { Ternario } = require("../dist/Expresiones/Ternario");
    const { Llamada } = require("../dist/Expresiones/Llamada");
    /*..............     Operaciones      ...............*/
    const { Aritmetica } = require("../dist/Expresiones/Operaciones/Aritmeticas");
    const { Logica } = require("../dist/Expresiones/Operaciones/Logicas");
    const { Relacional } = require("../dist/Expresiones/Operaciones/Relacionales");
    /*::::::::::::::::::     Instrucciones      ::::::::::::::::::*/
    const { Print } = require("../dist/Instrucciones/Print");
    const { Main } = require("../dist/Instrucciones/Metodos/Main");
    const { Funcion } = require("../dist/Instrucciones/Metodos/Funcion");
    
    /*..............     Condicionales      ...............*/
    const { If } = require("../dist/Instrucciones/Condicionales/If");
    const { Ifsinllave } = require("../dist/Instrucciones/Condicionales/Ifsinllave");
    const { Switch } = require("../dist/Instrucciones/Condicionales/Switch");
    const { Case } = require("../dist/Instrucciones/Condicionales/Case");
    /*..............     Transferencia      ...............*/
    const { Detener } = require("../dist/Instrucciones/Transferencia/Break");
    const { Continuar } = require("../dist/Instrucciones/Transferencia/Continuar");
    const { Return } = require("../dist/Instrucciones/Transferencia/Return");
    /*..............     Ciclicas      ...............*/
    const { While } = require("../dist/Instrucciones/Ciclicas/While");
    const { DoWhile } = require("../dist/Instrucciones/Ciclicas/DoWhile");
    const { For } = require("../dist/Instrucciones/Ciclicas/For");
    const { ForIn } = require("../dist/Instrucciones/Ciclicas/ForIn");
    /*..............     Declaracion y asignacion      ...............*/
    const { Declaracion } = require("../dist/Instrucciones/Declaracion");
    const { Asignacion } = require("../dist/Instrucciones/Asignacion");
    const { Simbolo } = require("../dist/TablaSimbolos/Simbolo");
    /*..............     Arreglos      ...............*/
    const { DeclaracionArr } = require("../dist/Instrucciones/Arreglos/DeclaracionArr");
    const { AccesoArr } = require("../dist/Expresiones/Arreglos/AccesoArr");
    const { ModificacionArr } = require("../dist/Instrucciones/Arreglos/ModificacionArr");
    const { Rango } = require("../dist/Expresiones/Arreglos/Rango");
    const { Arreglo } = require("../dist/Expresiones/Arreglos/Arreglo");
    const { Copiar } = require("../dist/Expresiones/Arreglos/Copiar");
    /*..............     Struct      ...............*/
    const { Struct } = require("../dist/Instrucciones/Struct/Struct");
    const { DeclararStruct } = require("../dist/Instrucciones/Struct/DeclararStruct");
    const { AccesoStruct } = require("../dist/Expresiones/Struct/AccesoStruct");
    const { StructInStruct } = require("../dist/Instrucciones/Struct/StructInStruct");
    /* ..............      Nativas      ...............*/
    /* -------- Arreglos */
    const { Length } = require("../dist/Instrucciones/Metodos/Nativas/Length");
    const { Pop } = require("../dist/Instrucciones/Metodos/Nativas/Arreglos/Pop");
    const { Push } = require("../dist/Instrucciones/Metodos/Nativas/Arreglos/Push");
    /* -------- Cadenas */
    const { CharOfPos } = require("../dist/Instrucciones/Metodos/Nativas/Cadenas/CharOfPos");
    const { subString } = require("../dist/Instrucciones/Metodos/Nativas/Cadenas/subString");
    const { toUpper } = require("../dist/Instrucciones/Metodos/Nativas/Cadenas/toUpper");
    const { toLower } = require("../dist/Instrucciones/Metodos/Nativas/Cadenas/toLower");
    /* -------- Matematicas */
    const { Matematicas } = require("../dist/Instrucciones/Metodos/Nativas/Matematicas");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:this.begin('comment');
break;
case 2:this.popState();
break;
case 3:/* skip comment content*/
break;
case 4:/* skip whitespace */
break;
case 5: return 42 
break;
case 6: return 46 
break;
case 7: return 47 
break;
case 8: return 48 
break;
case 9: return 49 
break;
case 10: return 54 
break;
case 11: return 51 
break;
case 12: return 58 
break;
case 13: return 60 
break;
case 14: return 59 
break;
case 15: return 62 
break;
case 16: return 110 
break;
case 17: return 111 
break;
case 18: return 112 
break;
case 19: return 85 
break;
case 20: return 86 
break;
case 21: return 89 
break;
case 22: return 88 
break;
case 23: return 87 
break;
case 24: return 63 
break;
case 25: return 64 
break;
case 26: return 31 
break;
case 27: return 55 
break;
case 28: return 56 
break;
case 29: return 57 
break;
case 30: return 75 
break;
case 31: return 76 
break;
case 32: return 114 
break;
case 33: return 78 
break;
case 34: return 115 
break;
case 35: return 116 
break;
case 36: return 117 
break;
case 37: return 118 
break;
case 38: return 119 
break;
case 39: return 80 
break;
case 40: return 81 
break;
case 41: return 82 
break;
case 42: return 84 
break;
case 43: return 83 
break;
case 44: return 40
break;
case 45: return 41
break;
case 46: return 90 
break;
case 47: return 91 
break;
case 48: return 92 
break;
case 49: return 93 
break;
case 50: return 94 
break;
case 51: return 95 
break;
case 52: return 101 
break;
case 53: return 102 
break;
case 54: return 103 
break;
case 55: return 100 
break;
case 56: return 105 
break;
case 57: return 104 
break;
case 58: return 38 
break;
case 59: return 97 
break;
case 60: return 98 
break;
case 61: return 99 
break;
case 62: return 96 
break;
case 63: return 43 
break;
case 64: return 45 
break;
case 65: return 69 
break;
case 66: return 70 
break;
case 67: return 33 
break;
case 68: return 35 
break;
case 69: return 77 
break;
case 70: return 8 
break;
case 71: return 37 
break;
case 72: return 113 
break;
case 73: return 52 
break;
case 74: return 72 
break;
case 75:return 107;
break;
case 76:return 106;
break;
case 77:return 32;
break;
case 78:return 108;
break;
case 79:return 109;
break;
case 80:
                                        console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                                    
break;
case 81:/* skip whitespace */
break;
case 82:return 5
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*)/i,/^(?:\*\/)/i,/^(?:.)/i,/^(?:\s+)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:in\b)/i,/^(?:null\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:String\b)/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?:struct\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:pop\b)/i,/^(?:push\b)/i,/^(?:lenght\b)/i,/^(?:caracterOfPosition\b)/i,/^(?:subString\b)/i,/^(?:toUppercase\b)/i,/^(?:toLowercase\b)/i,/^(?:sin\b)/i,/^(?:cos\b)/i,/^(?:tan\b)/i,/^(?:log10\b)/i,/^(?:sqrt\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:&)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\.)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\?)/i,/^(?::)/i,/^(?:#)/i,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/i,/^(?:[0-9]+)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_ñÑ]*)/i,/^(?:("((\\([\'\"\\bfnrtv]))|([^\"\\]+))*"))/i,/^(?:('((\\([\'\"\\bfnrtv]))|([^\'\\]))'))/i,/^(?:.)/i,/^(?:[\r\n\t])/i,/^(?:$)/i],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}