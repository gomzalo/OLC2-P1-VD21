/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
<<<<<<< Updated upstream
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,26],$V1=[1,22],$V2=[1,23],$V3=[1,27],$V4=[1,28],$V5=[1,29],$V6=[1,30],$V7=[1,31],$V8=[1,32],$V9=[1,34],$Va=[1,33],$Vb=[1,24],$Vc=[1,35],$Vd=[1,36],$Ve=[1,37],$Vf=[1,38],$Vg=[1,39],$Vh=[1,40],$Vi=[5,29,34,38,39,41,43,45,48,49,50,51,52,53,54,57,66,67,68,69,70,71],$Vj=[5,29,34,38,39,41,42,43,45,48,49,50,51,52,53,54,57,66,67,68,69,70,71],$Vk=[29,63],$Vl=[2,77],$Vm=[1,60],$Vn=[1,61],$Vo=[1,62],$Vp=[1,63],$Vq=[1,77],$Vr=[1,68],$Vs=[1,67],$Vt=[1,69],$Vu=[1,70],$Vv=[1,71],$Vw=[1,72],$Vx=[1,73],$Vy=[1,74],$Vz=[1,75],$VA=[1,76],$VB=[8,28],$VC=[2,25],$VD=[1,88],$VE=[1,98],$VF=[1,99],$VG=[1,100],$VH=[1,101],$VI=[1,102],$VJ=[1,103],$VK=[1,104],$VL=[1,105],$VM=[1,106],$VN=[1,107],$VO=[1,108],$VP=[1,109],$VQ=[1,110],$VR=[1,111],$VS=[1,112],$VT=[1,113],$VU=[8,28,37,40,46,72,73,74,75,76,77,78,79,80,82,83,84,85,86,87,95],$VV=[1,124],$VW=[1,128],$VX=[28,37],$VY=[1,135],$VZ=[8,28,37,40,46,79,80,95],$V_=[1,175],$V$=[8,28,37,40,46,72,73,78,79,80,82,83,84,85,86,87,95],$V01=[8,28,37,40,46,72,73,74,75,76,78,79,80,82,83,84,85,86,87,95],$V11=[8,28,37,40,46,79,80,82,83,84,85,86,87,95],$V21=[8,28,37,40,46,79,80,86,87,95],$V31=[1,197],$V41=[41,45,48],$V51=[1,219],$V61=[8,63];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"start":3,"instrucciones":4,"EOF":5,"instruccion":6,"print_instr":7,"PUNTOCOMA":8,"println_instr":9,"main_":10,"funciones":11,"declaracion":12,"asignacion":13,"if_llav_instr":14,"if_instr":15,"switch_instr":16,"break_instr":17,"continue_instr":18,"return_instr":19,"while_instr":20,"for_instr":21,"dowhile_instr":22,"for_in_instr":23,"decl_arr_instr":24,"llamada":25,"tipo":26,"lista_simbolos":27,"COMA":28,"ID":29,"IGUAL":30,"expr":31,"INCRE":32,"DECRE":33,"RPRINT":34,"PARA":35,"lista_parametros":36,"PARC":37,"RPRINTLN":38,"RIF":39,"LLAVA":40,"LLAVC":41,"RELSE":42,"RSWITCH":43,"lista_cases":44,"RDEFAULT":45,"DOSPUNTOS":46,"case":47,"RCASE":48,"RBREAK":49,"RCONTINUE":50,"RRETURN":51,"RWHILE":52,"RDO":53,"RFOR":54,"actualizacion":55,"RIN":56,"RVOID":57,"RMAIN":58,"lista_parametros_func":59,"parametro_func":60,"lista_dim":61,"lista_exp_arr":62,"CORA":63,"CORC":64,"exp":65,"RINT":66,"RDOUBLE":67,"RSTRING":68,"RCHAR":69,"RBOOLEAN":70,"RSTRUCT":71,"MAS":72,"MENOS":73,"MULTI":74,"DIV":75,"PORCENTAJE":76,"POTENCIA":77,"AMPERSON":78,"AND":79,"OR":80,"NOT":81,"MAYORQUE":82,"MAYORIGUAL":83,"MENORIGUAL":84,"MENORQUE":85,"IGUALIGUAL":86,"DIFERENTE":87,"ENTERO":88,"DECIMAL":89,"CADENA":90,"CHAR":91,"NULL":92,"TRUE":93,"FALSE":94,"INTERROGACION":95,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PUNTOCOMA",28:"COMA",29:"ID",30:"IGUAL",32:"INCRE",33:"DECRE",34:"RPRINT",35:"PARA",37:"PARC",38:"RPRINTLN",39:"RIF",40:"LLAVA",41:"LLAVC",42:"RELSE",43:"RSWITCH",45:"RDEFAULT",46:"DOSPUNTOS",48:"RCASE",49:"RBREAK",50:"RCONTINUE",51:"RRETURN",52:"RWHILE",53:"RDO",54:"RFOR",56:"RIN",57:"RVOID",58:"RMAIN",63:"CORA",64:"CORC",65:"exp",66:"RINT",67:"RDOUBLE",68:"RSTRING",69:"RCHAR",70:"RBOOLEAN",71:"RSTRUCT",72:"MAS",73:"MENOS",74:"MULTI",75:"DIV",76:"PORCENTAJE",77:"POTENCIA",78:"AMPERSON",79:"AND",80:"OR",81:"NOT",82:"MAYORQUE",83:"MAYORIGUAL",84:"MENORIGUAL",85:"MENORQUE",86:"IGUALIGUAL",87:"DIFERENTE",88:"ENTERO",89:"DECIMAL",90:"CADENA",91:"CHAR",92:"NULL",93:"TRUE",94:"FALSE",95:"INTERROGACION"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,2],[6,2],[12,2],[27,3],[27,5],[27,1],[27,3],[13,3],[13,2],[13,2],[7,4],[9,4],[14,7],[14,11],[14,9],[15,5],[15,7],[15,7],[16,7],[16,9],[16,10],[44,2],[44,1],[47,4],[36,3],[36,1],[17,1],[18,1],[19,2],[20,7],[22,8],[21,11],[21,11],[55,3],[55,2],[55,2],[23,7],[10,7],[10,6],[11,7],[11,8],[59,3],[59,1],[60,2],[60,1],[25,3],[25,4],[24,5],[61,3],[61,2],[62,4],[62,3],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,3],[31,3],[31,3],[31,2],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,5],[31,2],[31,2],[31,1]],
=======
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,25],$V1=[1,21],$V2=[1,22],$V3=[1,26],$V4=[1,27],$V5=[1,28],$V6=[1,29],$V7=[1,30],$V8=[1,31],$V9=[1,33],$Va=[1,32],$Vb=[1,23],$Vc=[1,34],$Vd=[1,35],$Ve=[1,36],$Vf=[1,37],$Vg=[1,38],$Vh=[1,39],$Vi=[5,28,33,37,38,40,42,44,47,48,49,50,51,52,53,56,66,67,68,69,70,71],$Vj=[5,28,33,37,38,40,41,42,44,47,48,49,50,51,52,53,56,66,67,68,69,70,71],$Vk=[28,63],$Vl=[2,78],$Vm=[1,74],$Vn=[1,65],$Vo=[1,75],$Vp=[1,64],$Vq=[1,66],$Vr=[1,67],$Vs=[1,68],$Vt=[1,69],$Vu=[1,70],$Vv=[1,71],$Vw=[1,72],$Vx=[1,73],$Vy=[8,27],$Vz=[2,24],$VA=[1,85],$VB=[1,93],$VC=[1,94],$VD=[1,95],$VE=[1,96],$VF=[1,97],$VG=[1,98],$VH=[1,99],$VI=[1,100],$VJ=[1,101],$VK=[1,102],$VL=[1,103],$VM=[1,104],$VN=[1,105],$VO=[1,106],$VP=[1,107],$VQ=[1,108],$VR=[8,27,36,39,45,64,72,73,74,75,76,77,78,79,80,82,83,84,85,86,87,95],$VS=[1,124],$VT=[27,36],$VU=[8,27,36,39,45,64,79,80,95],$VV=[1,154],$VW=[27,64],$VX=[1,169],$VY=[8,27,36,39,45,64,72,73,78,79,80,82,83,84,85,86,87,95],$VZ=[8,27,36,39,45,64,72,73,74,75,76,78,79,80,82,83,84,85,86,87,95],$V_=[8,27,36,39,45,64,79,80,82,83,84,85,86,87,95],$V$=[8,27,36,39,45,64,79,80,86,87,95],$V01=[1,192],$V11=[40,44,47],$V21=[1,214],$V31=[8,63];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"start":3,"instrucciones":4,"EOF":5,"instruccion":6,"print_instr":7,"PUNTOCOMA":8,"println_instr":9,"main_":10,"funciones":11,"declaracion":12,"asignacion":13,"if_llav_instr":14,"if_instr":15,"switch_instr":16,"break_instr":17,"continue_instr":18,"return_instr":19,"while_instr":20,"for_instr":21,"dowhile_instr":22,"for_in_instr":23,"decl_arr_instr":24,"tipo":25,"lista_simbolos":26,"COMA":27,"ID":28,"IGUAL":29,"expr":30,"INCRE":31,"DECRE":32,"RPRINT":33,"PARA":34,"lista_parametros":35,"PARC":36,"RPRINTLN":37,"RIF":38,"LLAVA":39,"LLAVC":40,"RELSE":41,"RSWITCH":42,"lista_cases":43,"RDEFAULT":44,"DOSPUNTOS":45,"case":46,"RCASE":47,"RBREAK":48,"RCONTINUE":49,"RRETURN":50,"RWHILE":51,"RDO":52,"RFOR":53,"actualizacion":54,"RIN":55,"RVOID":56,"RMAIN":57,"lista_parametros_func":58,"parametro_func":59,"llamada":60,"lista_dim":61,"lista_exp_arr":62,"CORA":63,"CORC":64,"lista_exp_arr_c":65,"RINT":66,"RDOUBLE":67,"RSTRING":68,"RCHAR":69,"RBOOLEAN":70,"RSTRUCT":71,"MAS":72,"MENOS":73,"MULTI":74,"DIV":75,"PORCENTAJE":76,"POTENCIA":77,"AMPERSON":78,"AND":79,"OR":80,"NOT":81,"MAYORQUE":82,"MAYORIGUAL":83,"MENORIGUAL":84,"MENORQUE":85,"IGUALIGUAL":86,"DIFERENTE":87,"ENTERO":88,"DECIMAL":89,"CADENA":90,"CHAR":91,"NULL":92,"TRUE":93,"FALSE":94,"INTERROGACION":95,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PUNTOCOMA",27:"COMA",28:"ID",29:"IGUAL",31:"INCRE",32:"DECRE",33:"RPRINT",34:"PARA",36:"PARC",37:"RPRINTLN",38:"RIF",39:"LLAVA",40:"LLAVC",41:"RELSE",42:"RSWITCH",44:"RDEFAULT",45:"DOSPUNTOS",47:"RCASE",48:"RBREAK",49:"RCONTINUE",50:"RRETURN",51:"RWHILE",52:"RDO",53:"RFOR",55:"RIN",56:"RVOID",57:"RMAIN",63:"CORA",64:"CORC",66:"RINT",67:"RDOUBLE",68:"RSTRING",69:"RCHAR",70:"RBOOLEAN",71:"RSTRUCT",72:"MAS",73:"MENOS",74:"MULTI",75:"DIV",76:"PORCENTAJE",77:"POTENCIA",78:"AMPERSON",79:"AND",80:"OR",81:"NOT",82:"MAYORQUE",83:"MAYORIGUAL",84:"MENORIGUAL",85:"MENORQUE",86:"IGUALIGUAL",87:"DIFERENTE",88:"ENTERO",89:"DECIMAL",90:"CADENA",91:"CHAR",92:"NULL",93:"TRUE",94:"FALSE",95:"INTERROGACION"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,2],[12,2],[26,3],[26,5],[26,1],[26,3],[13,3],[13,2],[13,2],[7,4],[9,4],[14,7],[14,11],[14,9],[15,5],[15,7],[15,7],[16,7],[16,9],[16,10],[43,2],[43,1],[46,4],[35,3],[35,1],[17,1],[18,1],[19,2],[20,7],[22,8],[21,11],[21,11],[54,3],[54,2],[54,2],[23,7],[10,7],[10,6],[11,7],[11,8],[58,3],[58,1],[59,2],[59,1],[60,3],[60,4],[24,5],[61,3],[61,2],[62,4],[62,3],[65,3],[65,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,2],[30,3],[30,3],[30,3],[30,2],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,5],[30,2],[30,2],[30,3]],
>>>>>>> Stashed changes
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log($$[$0-1]); this.$ = new Ast();  this.$.instrucciones = $$[$0-1]; return this.$; 
break;
<<<<<<< Updated upstream
case 2: case 41:
=======
case 2: case 40:
>>>>>>> Stashed changes
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3:
 this.$= new Array(); this.$.push($$[$0]); 
break;
<<<<<<< Updated upstream
case 4: case 5: case 8: case 9: case 13: case 14: case 15: case 18: case 20: case 21:
=======
case 4: case 5: case 8: case 9: case 13: case 14: case 15: case 18: case 20:
>>>>>>> Stashed changes
 this.$ = $$[$0-1] 
break;
case 6: case 7: case 10: case 11: case 12: case 16: case 17: case 19: case 108:
 this.$ = $$[$0] 
break;
<<<<<<< Updated upstream
case 22:
 this.$ = new Declaracion($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].last_column); 
break;
case 23:
 this.$ = $$[$0-2]; this.$.push(new Simbolo($$[$0],null,null,_$[$0-2].first_line, _$[$0-2].first_column,null)); 
break;
case 24:
 this.$ = $$[$0-4]; this.$.push(new Simbolo($$[$0-2],null,null,_$[$0-4].first_line, _$[$0-4].first_column,$$[$0])); 
break;
case 25:
 this.$ = new Array(); this.$.push(new Simbolo($$[$0],null,null,_$[$0].first_line, _$[$0].first_column,null)); 
break;
case 26:
 this.$ = new Array(); this.$.push(new Simbolo($$[$0-2],null,null,_$[$0-2].first_line, _$[$0-2].first_column,$$[$0])); 
break;
case 27: case 53:
 this.$ = new Asignacion($$[$0-2] ,$$[$0], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 28: case 54:
 this.$ = new Asignacion($$[$0-1] ,new Aritmetica(new Identificador($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), OperadorAritmetico.MAS,new Primitivo(Number(1), $$[$0-1].first_line, $$[$0-1].last_column), $$[$0-1].first_line, $$[$0-1].last_column, false), _$[$0-1].first_line, _$[$0-1].last_column); 
break;
case 29: case 55:
 this.$ = new Asignacion($$[$0-1] ,new Aritmetica(new Identificador($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), OperadorAritmetico.MENOS,new Primitivo(Number(1), $$[$0-1].first_line, $$[$0-1].last_column), $$[$0-1].first_line, $$[$0-1].last_column, false), _$[$0-1].first_line, _$[$0-1].last_column); 
break;
case 30:
 this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, false); 
break;
case 31:
 this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, true); 
break;
case 32:
 this.$ = new If($$[$0-4], $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 33:
 this.$ = new If($$[$0-8], $$[$0-5], $$[$0-1], _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 34:
 this.$ = new If($$[$0-6], $$[$0-3], [$$[$0]], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 35:
 this.$ = new Ifsinllave($$[$0-2], $$[$0], null, _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 36:
 this.$ = new Ifsinllave($$[$0-4], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 37:
 this.$ = new Ifsinllave($$[$0-4], $$[$0-2], [$$[$0]], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 38:
 this.$ = new Switch($$[$0-4], $$[$0-1], [], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 39:
 this.$ = new Switch($$[$0-6], [], $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 40:
 this.$ = new Switch($$[$0-7], $$[$0-4], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column); 
break;
case 42: case 45:
 this.$ = new Array(); this.$.push($$[$0]);
break;
case 43:
 this.$ = new Case($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 44: case 61:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 46:
 this.$ = new Detener(_$[$0].first_line, _$[$0].first_column); 
break;
case 47:
 this.$ = new Continuar(_$[$0].first_line, _$[$0].first_column); 
break;
case 48:
 this.$ = new Return($$[$0],_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 49:
 this.$ = new While($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 50:
 this.$ = new DoWhile($$[$0-1], $$[$0-5], _$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 51: case 52:
 this.$ = new For($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 56:
 this.$ = new ForIn($$[$0-5], $$[$0-3], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 57:
this.$ = new Main($$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 58:
this.$ = new Main([],_$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 59:
 this.$ = new Funcion($$[$0-5], $$[$0-6], [], $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column ); 
break;
case 60:
 this.$ = new Funcion($$[$0-6], $$[$0-7], $$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].last_column ); 
break;
case 62:
 this.$ = new Array(); this.$.push($$[$0]); 
break;
case 63:
 this.$ = {"tipo" : $$[$0-1], "arreglo": false, "id": $$[$0]}; 
break;
case 64:
 this.$ = {"tipo" : TIPO.ANY, "arreglo": false, "id": $$[$0]}; 
break;
case 65:
 this.$ = new Llamada($$[$0-2] , [],_$[$0-2].first_line, _$[$0-2].last_column ); 
break;
case 66:
 this.$ = new Llamada($$[$0-3] , $$[$0-1] ,_$[$0-3].first_line, _$[$0-3].last_column ); 
break;
case 67:
 this.$ = new DeclaracionArr(); 
break;
case 68:
 this.$ = $$[$0-2]; this.$.push($$[$0-1]+1); 
break;
case 69:
 this.$ = new Array(); this.$.push(1); 
break;
case 70:
 this.$ = $$[$0-3]; this.$.push($$[$0-1]); 
break;
case 71:
 this.$ = new Array(); this.$.push($$[$0-1]); 
break;
case 72:
 this.$ = TIPO.ENTERO; 
break;
case 73:
 this.$ = TIPO.DECIMAL; 
break;
case 74:
 this.$ = TIPO.CADENA; 
break;
case 75:
 this.$ = TIPO.CHARACTER; 
break;
case 76:
 this.$ = TIPO.BOOLEANO; 
break;
case 77:
 this.$ = TIPO.VOID; 
break;
case 78:
 this.$ = TIPO.STRUCT; 
break;
case 79:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.MAS,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 80:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.MENOS,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 81:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.POR,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 82:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.DIV,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 83:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.MOD,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 84:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.POT,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 85:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.AMPERSON,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 86:
 this.$ = new Aritmetica($$[$0],OperadorAritmetico.UMENOS,$$[$0], _$[$0-1].first_line, _$[$0-1].first_column, true); 
break;
case 87:
 this.$ = $$[$0-1]; 
break;
case 88:
 this.$ = new Logica($$[$0-2], OperadorLogico.AND, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 89:
 this.$ = new Logica($$[$0-2], OperadorLogico.OR, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 90:
 this.$ = new Logica($$[$0], OperadorLogico.NOT, null, $$[$0-1].first_line, $$[$0-1].last_column, true); 
break;
case 91:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.MAYORQUE, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 92:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.MAYORIGUAL, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 93:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.MENORIGUAL, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 94:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.MENORQUE, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 95:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.IGUALIGUAL, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 96:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.DIFERENTE, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 97:
 this.$ = new Primitivo(Number($$[$0]), TIPO.ENTERO, _$[$0].first_line, _$[$0].first_column); 
break;
case 98:
 this.$ = new Primitivo(Number($$[$0]), TIPO.DECIMAL, _$[$0].first_line, _$[$0].first_column); 
break;
case 99:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new Primitivo($$[$0], TIPO.CADENA, _$[$0].first_line, _$[$0].first_column); 
break;
case 100:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new Primitivo($$[$0], TIPO.CHARACTER, _$[$0].first_line, _$[$0].first_column); 
break;
case 101:
 this.$ = new Primitivo(null, TIPO.NULO, _$[$0].first_line, _$[$0].first_column); 
break;
case 102:
 this.$ = new Primitivo(true, TIPO.BOOLEANO, _$[$0].first_line, _$[$0].first_column); 
break;
case 103:
 this.$ = new Primitivo(false, TIPO.BOOLEANO, _$[$0].first_line, _$[$0].first_column); 
break;
case 104:
 this.$ = new Identificador($$[$0] , _$[$0].first_line, _$[$0].last_column); 
break;
case 105:
this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 106:
 this.$ = new Aritmetica(new Identificador($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), OperadorAritmetico.MAS,new Primitivo(Number(1), $$[$0-1].first_line, $$[$0-1].last_column), $$[$0-1].first_line, $$[$0-1].last_column, false); 
break;
case 107:
=======
case 21:
 this.$ = new Declaracion($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].last_column); 
break;
case 22:
 this.$ = $$[$0-2]; this.$.push(new Simbolo($$[$0],null,null,_$[$0-2].first_line, _$[$0-2].first_column,null)); 
break;
case 23:
 this.$ = $$[$0-4]; this.$.push(new Simbolo($$[$0-2],null,null,_$[$0-4].first_line, _$[$0-4].first_column,$$[$0])); 
break;
case 24:
 this.$ = new Array(); this.$.push(new Simbolo($$[$0],null,null,_$[$0].first_line, _$[$0].first_column,null)); 
break;
case 25:
 this.$ = new Array(); this.$.push(new Simbolo($$[$0-2],null,null,_$[$0-2].first_line, _$[$0-2].first_column,$$[$0])); 
break;
case 26: case 52:
 this.$ = new Asignacion($$[$0-2] ,$$[$0], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 27: case 53:
 this.$ = new Asignacion($$[$0-1] ,new Aritmetica(new Identificador($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), OperadorAritmetico.MAS,new Primitivo(Number(1), $$[$0-1].first_line, $$[$0-1].last_column), $$[$0-1].first_line, $$[$0-1].last_column, false), _$[$0-1].first_line, _$[$0-1].last_column); 
break;
case 28: case 54:
 this.$ = new Asignacion($$[$0-1] ,new Aritmetica(new Identificador($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), OperadorAritmetico.MENOS,new Primitivo(Number(1), $$[$0-1].first_line, $$[$0-1].last_column), $$[$0-1].first_line, $$[$0-1].last_column, false), _$[$0-1].first_line, _$[$0-1].last_column); 
break;
case 29:
 this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, false); 
break;
case 30:
 this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, true); 
break;
case 31:
 this.$ = new If($$[$0-4], $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 32:
 this.$ = new If($$[$0-8], $$[$0-5], $$[$0-1], _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 33:
 this.$ = new If($$[$0-6], $$[$0-3], [$$[$0]], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 34:
 this.$ = new Ifsinllave($$[$0-2], $$[$0], null, _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 35:
 this.$ = new Ifsinllave($$[$0-4], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 36:
 this.$ = new Ifsinllave($$[$0-4], $$[$0-2], [$$[$0]], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 37:
 this.$ = new Switch($$[$0-4], $$[$0-1], [], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 38:
 this.$ = new Switch($$[$0-6], [], $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 39:
 this.$ = new Switch($$[$0-7], $$[$0-4], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column); 
break;
case 41: case 44:
 this.$ = new Array(); this.$.push($$[$0]);
break;
case 42:
 this.$ = new Case($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 43: case 60: case 71:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 45:
 this.$ = new Detener(_$[$0].first_line, _$[$0].first_column); 
break;
case 46:
 this.$ = new Continuar(_$[$0].first_line, _$[$0].first_column); 
break;
case 47:
 this.$ = new Return($$[$0],_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 48:
 this.$ = new While($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 49:
 this.$ = new DoWhile($$[$0-1], $$[$0-5], _$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 50: case 51:
 this.$ = new For($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 55:
 this.$ = new ForIn($$[$0-5], $$[$0-3], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 56:
this.$ = new Main($$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 57:
this.$ = new Main([],_$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 58:
 this.$ = new Funcion($$[$0-5], $$[$0-6], [], $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column ); 
break;
case 59:
 this.$ = new Funcion($$[$0-6], $$[$0-7], $$[$0-4], $$[$0-2], _$[$0-7].first_line, _$[$0-7].last_column ); 
break;
case 61: case 72:
 this.$ = new Array(); this.$.push($$[$0]); 
break;
case 62:
 this.$ = {"tipo" : $$[$0-1], "arreglo": false, "id": $$[$0]}; 
break;
case 63:
 this.$ = {"tipo" : TIPO.ANY, "arreglo": false, "id": $$[$0]}; 
break;
case 64:
 this.$ = new Llamada($$[$0-2] , [], _$[$0-2].first_line, _$[$0-2].last_column ); 
break;
case 65:
 this.$ = new Llamada($$[$0-3] , $$[$0-1] , _$[$0-3].first_line, _$[$0-3].last_column ); 
break;
case 66:
 this.$ = new DeclaracionArr($$[$0-4], $$[$0-3], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].last_column ); 
break;
case 67:
 this.$ = $$[$0-2]; this.$.push($$[$0-1]+1); 
break;
case 68:
 this.$ = new Array(); this.$.push(1); 
break;
case 69:
 this.$ = $$[$0-3]; this.$.push($$[$0-1]); 
break;
case 70:
 this.$ = new Array(); this.$.push($$[$0-1]); 
break;
case 73:
 this.$ = TIPO.ENTERO; 
break;
case 74:
 this.$ = TIPO.DECIMAL; 
break;
case 75:
 this.$ = TIPO.CADENA; 
break;
case 76:
 this.$ = TIPO.CHARACTER; 
break;
case 77:
 this.$ = TIPO.BOOLEANO; 
break;
case 78:
 this.$ = TIPO.VOID; 
break;
case 79:
 this.$ = TIPO.STRUCT; 
break;
case 80:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.MAS,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 81:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.MENOS,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 82:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.POR,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 83:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.DIV,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 84:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.MOD,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 85:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.POT,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 86:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.AMPERSON,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 87:
 this.$ = new Aritmetica($$[$0],OperadorAritmetico.UMENOS,$$[$0], _$[$0-1].first_line, _$[$0-1].first_column, true); 
break;
case 88:
 this.$ = $$[$0-1]; 
break;
case 89:
 this.$ = new Logica($$[$0-2], OperadorLogico.AND, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 90:
 this.$ = new Logica($$[$0-2], OperadorLogico.OR, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 91:
 this.$ = new Logica($$[$0], OperadorLogico.NOT, null, $$[$0-1].first_line, $$[$0-1].last_column, true); 
break;
case 92:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.MAYORQUE, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 93:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.MAYORIGUAL, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 94:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.MENORIGUAL, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 95:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.MENORQUE, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 96:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.IGUALIGUAL, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 97:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.DIFERENTE, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 98:
 this.$ = new Primitivo(Number($$[$0]), TIPO.ENTERO, _$[$0].first_line, _$[$0].first_column); 
break;
case 99:
 this.$ = new Primitivo(Number($$[$0]), TIPO.DECIMAL, _$[$0].first_line, _$[$0].first_column); 
break;
case 100:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new Primitivo($$[$0], TIPO.CADENA, _$[$0].first_line, _$[$0].first_column); 
break;
case 101:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new Primitivo($$[$0], TIPO.CHARACTER, _$[$0].first_line, _$[$0].first_column); 
break;
case 102:
 this.$ = new Primitivo(null, TIPO.NULO, _$[$0].first_line, _$[$0].first_column); 
break;
case 103:
 this.$ = new Primitivo(true, TIPO.BOOLEANO, _$[$0].first_line, _$[$0].first_column); 
break;
case 104:
 this.$ = new Primitivo(false, TIPO.BOOLEANO, _$[$0].first_line, _$[$0].first_column); 
break;
case 105:
 this.$ = new Identificador($$[$0] , _$[$0].first_line, _$[$0].last_column); 
break;
case 106:
this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 107:
 this.$ = new Aritmetica(new Identificador($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), OperadorAritmetico.MAS,new Primitivo(Number(1), $$[$0-1].first_line, $$[$0-1].last_column), $$[$0-1].first_line, $$[$0-1].last_column, false); 
break;
case 108:
>>>>>>> Stashed changes
 this.$ = new Aritmetica(new Identificador($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), OperadorAritmetico.MENOS,new Primitivo(Number(1), $$[$0-1].first_line, $$[$0-1].last_column), $$[$0-1].first_line, $$[$0-1].last_column, false); 
break;
case 109:
 this.$ = $$[$0-1];
break;
}
},
<<<<<<< Updated upstream
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{1:[3]},{5:[1,41],6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},o($Vi,[2,3]),{8:[1,43]},{8:[1,44]},o($Vj,[2,6]),o($Vj,[2,7]),{8:[1,45]},{8:[1,46]},o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,12]),{8:[1,47]},{8:[1,48]},{8:[1,49]},o($Vj,[2,16]),o($Vj,[2,17]),{8:[1,50]},o($Vj,[2,19]),{8:[1,51]},{8:[1,52]},{35:[1,53]},{35:[1,54]},o($Vk,$Vl,{58:[1,55]}),{27:57,29:[1,56],61:58,63:[1,59]},{30:$Vm,32:$Vn,33:$Vo,35:$Vp},{35:[1,64]},{35:[1,65]},{8:[2,46]},{8:[2,47]},{25:78,29:$Vq,31:66,35:$Vr,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{35:[1,79]},{29:[1,81],35:[1,80]},{40:[1,82]},o($Vk,[2,72]),o($Vk,[2,73]),o($Vk,[2,74]),o($Vk,[2,75]),o($Vk,[2,76]),o($Vk,[2,78]),{1:[2,1]},o($Vi,[2,2]),o($Vj,[2,4]),o($Vj,[2,5]),o($Vj,[2,8]),o($Vj,[2,9]),o($Vj,[2,13]),o($Vj,[2,14]),o($Vj,[2,15]),o($Vj,[2,18]),o($Vj,[2,20]),o($Vj,[2,21]),{25:78,29:$Vq,31:84,35:$Vr,36:83,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{25:78,29:$Vq,31:84,35:$Vr,36:85,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{35:[1,86]},o($VB,$VC,{30:$VD,35:[1,87]}),{8:[2,22],28:[1,89]},{29:[1,90],63:[1,91]},{64:[1,92]},{25:78,29:$Vq,31:93,35:$Vr,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{8:[2,28]},{8:[2,29]},{25:78,29:$Vq,31:84,35:$Vr,36:95,37:[1,94],73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{25:78,29:$Vq,31:96,35:$Vr,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{25:78,29:$Vq,31:97,35:$Vr,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{8:[2,48],72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,95:$VT},{25:78,29:$Vq,31:114,35:$Vr,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{25:78,29:$Vq,31:115,35:$Vr,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{25:78,29:$Vq,31:116,35:$Vr,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},o($VU,[2,97]),o($VU,[2,98]),o($VU,[2,99]),o($VU,[2,100]),o($VU,[2,101]),o($VU,[2,102]),o($VU,[2,103]),o($VU,[2,104],{32:[1,117],33:[1,118],35:$Vp}),o($VU,[2,108]),{25:78,29:$Vq,31:119,35:$Vr,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{12:121,13:120,26:123,29:[1,122],57:$VV,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{56:[1,125]},{4:126,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{28:$VW,37:[1,127]},o($VX,[2,45],{72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,95:$VT}),{28:$VW,37:[1,129]},{37:[1,130]},{26:134,29:$VY,37:[1,131],57:$VV,59:132,60:133,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{25:78,29:$Vq,31:136,35:$Vr,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{29:[1,137]},{30:[1,138]},{64:[1,139]},o($Vk,[2,69]),{8:[2,27],72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,95:$VT},o($VU,[2,65]),{28:$VW,37:[1,140]},{37:[1,141],72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,95:$VT},{37:[1,142],72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,95:$VT},{25:78,29:$Vq,31:143,35:$Vr,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{25:78,29:$Vq,31:144,35:$Vr,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{25:78,29:$Vq,31:145,35:$Vr,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{25:78,29:$Vq,31:146,35:$Vr,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{25:78,29:$Vq,31:147,35:$Vr,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{25:78,29:$Vq,31:148,35:$Vr,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{25:78,29:$Vq,31:149,35:$Vr,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{25:78,29:$Vq,31:150,35:$Vr,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{25:78,29:$Vq,31:151,35:$Vr,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{25:78,29:$Vq,31:152,35:$Vr,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{25:78,29:$Vq,31:153,35:$Vr,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{25:78,29:$Vq,31:154,35:$Vr,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{25:78,29:$Vq,31:155,35:$Vr,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{25:78,29:$Vq,31:156,35:$Vr,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{25:78,29:$Vq,31:157,35:$Vr,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{25:78,29:$Vq,31:158,35:$Vr,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},o($VU,[2,86]),{37:[1,159],72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,95:$VT},o($VZ,[2,90],{72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS}),o($VU,[2,106]),o($VU,[2,107]),{37:[1,160],72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,95:$VT},{8:[1,161]},{8:[1,162]},{30:$Vm,32:$Vn,33:$Vo},{27:57,29:[1,163]},{29:$Vl},{25:78,29:$Vq,31:164,35:$Vr,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,41:[1,165],43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{8:[2,30]},{25:78,29:$Vq,31:166,35:$Vr,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{8:[2,31]},{40:[1,167]},{40:[1,168]},{28:[1,170],37:[1,169]},o($VX,[2,62]),{29:[1,171]},o($VX,[2,64]),o($VB,[2,26],{72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,95:$VT}),o($VB,[2,23],{30:[1,172]}),{62:173,63:[1,174]},o($Vk,[2,68]),o($VU,[2,66]),{6:176,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,40:$V_,43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{40:[1,177]},o($V$,[2,79],{74:$VG,75:$VH,76:$VI,77:$VJ}),o($V$,[2,80],{74:$VG,75:$VH,76:$VI,77:$VJ}),o($V01,[2,81],{77:$VJ}),o($V01,[2,82],{77:$VJ}),o($V01,[2,83],{77:$VJ}),o($VU,[2,84]),o($V$,[2,85],{74:$VG,75:$VH,76:$VI,77:$VJ}),o($VZ,[2,88],{72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS}),o([8,28,37,40,46,80,95],[2,89],{72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS}),o($V11,[2,91],{72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK}),o($V11,[2,92],{72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK}),o($V11,[2,93],{72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK}),o($V11,[2,94],{72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK}),o($V21,[2,95],{72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,82:$VN,83:$VO,84:$VP,85:$VQ}),o($V21,[2,96],{72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,82:$VN,83:$VO,84:$VP,85:$VQ}),{46:[1,178],72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,95:$VT},o($VU,[2,87]),{40:[1,179]},{25:78,29:$Vq,31:180,35:$Vr,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{25:78,29:$Vq,31:181,35:$Vr,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},o($VB,$VC,{30:$VD}),{40:[1,182],72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,95:$VT},{52:[1,183]},o($VX,[2,44],{72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,95:$VT}),{4:184,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,41:[1,185],43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{4:186,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{40:[1,187]},{26:134,29:$VY,57:$VV,60:188,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},o($VX,[2,63]),{25:78,29:$Vq,31:189,35:$Vr,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{8:[2,67],63:[1,190]},{65:[1,191]},{4:192,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},o($Vi,[2,35],{42:[1,193]}),{44:194,45:[1,195],47:196,48:$V31},{25:78,29:$Vq,31:198,35:$Vr,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{4:199,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{8:[1,200],72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,95:$VT},{8:[1,201],72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,95:$VT},{4:202,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{35:[1,203]},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,41:[1,204],43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},o($Vj,[2,58]),{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,41:[1,205],43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{4:206,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},o($VX,[2,61]),o($VB,[2,24],{72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,95:$VT}),{65:[1,207]},{64:[1,208]},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,41:[1,209],43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{6:210,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:211,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{41:[1,212],45:[1,213],47:214,48:$V31},{46:[1,215]},o($V41,[2,42]),{25:78,29:$Vq,31:216,35:$Vr,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},o([8,28,37,40,46],[2,105],{72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,95:$VT}),{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,41:[1,217],43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{29:$V51,55:218},{29:$V51,55:220},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,41:[1,221],43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{25:78,29:$Vq,31:222,35:$Vr,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},o($Vj,[2,57]),o($Vj,[2,59]),{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,41:[1,223],43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{64:[1,224]},o($V61,[2,71]),o($Vi,[2,32],{42:[1,225]}),o($Vj,[2,36]),o($Vj,[2,37]),o($Vj,[2,38]),{46:[1,226]},o($V41,[2,41]),{4:227,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{46:[1,228],72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,95:$VT},o($Vj,[2,49]),{37:[1,229]},{30:[1,230],32:[1,231],33:[1,232]},{37:[1,233]},o($Vj,[2,56]),{37:[1,234],72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,95:$VT},o($Vj,[2,60]),o($V61,[2,70]),{14:236,39:[1,237],40:[1,235]},{4:238,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,41:[1,239],43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{4:240,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{40:[1,241]},{25:78,29:$Vq,31:242,35:$Vr,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{37:[2,54]},{37:[2,55]},{40:[1,243]},{8:[2,50]},{4:244,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},o($Vj,[2,34]),{35:[1,245]},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,41:[1,246],43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},o($Vj,[2,39]),o($V41,[2,43],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,6:42,29:$V0,34:$V1,38:$V2,39:$V3,43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh}),{4:247,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{37:[2,53],72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,95:$VT},{4:248,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,41:[1,249],43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{25:78,29:$Vq,31:250,35:$Vr,73:$Vs,81:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},o($Vj,[2,40]),{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,41:[1,251],43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,41:[1,252],43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},o($Vj,[2,33]),{37:[1,253],72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,95:$VT},o($Vj,[2,51]),o($Vj,[2,52]),{40:$V_}],
defaultActions: {29:[2,46],30:[2,47],41:[2,1],61:[2,28],62:[2,29],124:[2,77],127:[2,30],129:[2,31],231:[2,54],232:[2,55],234:[2,50]},
=======
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:24,28:$V0,33:$V1,37:$V2,38:$V3,42:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,56:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{1:[3]},{5:[1,40],6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:24,28:$V0,33:$V1,37:$V2,38:$V3,42:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,56:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},o($Vi,[2,3]),{8:[1,42]},{8:[1,43]},o($Vj,[2,6]),o($Vj,[2,7]),{8:[1,44]},{8:[1,45]},o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,12]),{8:[1,46]},{8:[1,47]},{8:[1,48]},o($Vj,[2,16]),o($Vj,[2,17]),{8:[1,49]},o($Vj,[2,19]),{8:[1,50]},{34:[1,51]},{34:[1,52]},o($Vk,$Vl,{57:[1,53]}),{26:55,28:[1,54],61:56,63:[1,57]},{29:[1,58],31:[1,59],32:[1,60]},{34:[1,61]},{34:[1,62]},{8:[2,45]},{8:[2,46]},{28:$Vm,30:63,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{34:[1,76]},{28:[1,78],34:[1,77]},{39:[1,79]},o($Vk,[2,73]),o($Vk,[2,74]),o($Vk,[2,75]),o($Vk,[2,76]),o($Vk,[2,77]),o($Vk,[2,79]),{1:[2,1]},o($Vi,[2,2]),o($Vj,[2,4]),o($Vj,[2,5]),o($Vj,[2,8]),o($Vj,[2,9]),o($Vj,[2,13]),o($Vj,[2,14]),o($Vj,[2,15]),o($Vj,[2,18]),o($Vj,[2,20]),{28:$Vm,30:81,34:$Vn,35:80,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{28:$Vm,30:81,34:$Vn,35:82,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{34:[1,83]},o($Vy,$Vz,{29:$VA,34:[1,84]}),{8:[2,21],27:[1,86]},{28:[1,87],63:[1,88]},{64:[1,89]},{28:$Vm,30:90,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{8:[2,27]},{8:[2,28]},{28:$Vm,30:91,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{28:$Vm,30:92,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{8:[2,47],72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,95:$VQ},{28:$Vm,30:109,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{28:$Vm,30:110,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{28:$Vm,30:111,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},o($VR,[2,98]),o($VR,[2,99]),o($VR,[2,100]),o($VR,[2,101]),o($VR,[2,102]),o($VR,[2,103]),o($VR,[2,104]),o($VR,[2,105],{31:[1,112],32:[1,113]}),{28:$Vm,30:115,34:$Vn,63:$Vo,65:114,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{28:$Vm,30:116,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{12:118,13:117,25:119,28:$V0,56:[1,120],66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{55:[1,121]},{4:122,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:24,28:$V0,33:$V1,37:$V2,38:$V3,42:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,56:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{27:$VS,36:[1,123]},o($VT,[2,44],{72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,95:$VQ}),{27:$VS,36:[1,125]},{36:[1,126]},{28:$Vm,30:129,34:$Vn,36:[1,127],58:128,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{28:$Vm,30:130,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{28:[1,131]},{29:[1,132]},{64:[1,133]},o($Vk,[2,68]),{8:[2,26],72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,95:$VQ},{36:[1,134],72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,95:$VQ},{36:[1,135],72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,95:$VQ},{28:$Vm,30:136,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{28:$Vm,30:137,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{28:$Vm,30:138,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{28:$Vm,30:139,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{28:$Vm,30:140,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{28:$Vm,30:141,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{28:$Vm,30:142,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{28:$Vm,30:143,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{28:$Vm,30:144,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{28:$Vm,30:145,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{28:$Vm,30:146,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{28:$Vm,30:147,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{28:$Vm,30:148,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{28:$Vm,30:149,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{28:$Vm,30:150,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{28:$Vm,30:151,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},o($VR,[2,87]),{36:[1,152],72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,95:$VQ},o($VU,[2,91],{72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP}),o($VR,[2,107]),o($VR,[2,108]),{27:$VV,64:[1,153]},o($VW,[2,72],{72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,95:$VQ}),{36:[1,155],72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,95:$VQ},{8:[1,156]},{8:[1,157]},{26:55,28:[1,158]},{28:$Vl},{28:$Vm,30:159,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:24,28:$V0,33:$V1,37:$V2,38:$V3,40:[1,160],42:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,56:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{8:[2,29]},{28:$Vm,30:161,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{8:[2,30]},{39:[1,162]},{39:[1,163]},{27:[1,165],36:[1,164]},o($VT,[2,61],{72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,95:$VQ}),o($Vy,[2,25],{72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,95:$VQ}),o($Vy,[2,22],{29:[1,166]}),{62:167,63:[1,168]},o($Vk,[2,67]),{6:170,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:24,28:$V0,33:$V1,37:$V2,38:$V3,39:$VX,42:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,56:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{39:[1,171]},o($VY,[2,80],{74:$VD,75:$VE,76:$VF,77:$VG}),o($VY,[2,81],{74:$VD,75:$VE,76:$VF,77:$VG}),o($VZ,[2,82],{77:$VG}),o($VZ,[2,83],{77:$VG}),o($VZ,[2,84],{77:$VG}),o($VR,[2,85]),o($VY,[2,86],{74:$VD,75:$VE,76:$VF,77:$VG}),o($VU,[2,89],{72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP}),o([8,27,36,39,45,64,80,95],[2,90],{72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP}),o($V_,[2,92],{72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH}),o($V_,[2,93],{72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH}),o($V_,[2,94],{72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH}),o($V_,[2,95],{72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH}),o($V$,[2,96],{72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,82:$VK,83:$VL,84:$VM,85:$VN}),o($V$,[2,97],{72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,82:$VK,83:$VL,84:$VM,85:$VN}),{45:[1,172],72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,95:$VQ},o($VR,[2,88]),o($VR,[2,109]),{28:$Vm,30:173,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{39:[1,174]},{28:$Vm,30:175,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{28:$Vm,30:176,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},o($Vy,$Vz,{29:$VA}),{39:[1,177],72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,95:$VQ},{51:[1,178]},o($VT,[2,43],{72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,95:$VQ}),{4:179,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:24,28:$V0,33:$V1,37:$V2,38:$V3,40:[1,180],42:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,56:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{4:181,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:24,28:$V0,33:$V1,37:$V2,38:$V3,42:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,56:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{39:[1,182]},{28:$Vm,30:183,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{28:$Vm,30:184,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{8:[2,66],63:[1,185]},{28:$Vm,30:115,34:$Vn,63:$Vo,65:186,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{4:187,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:24,28:$V0,33:$V1,37:$V2,38:$V3,42:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,56:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},o($Vi,[2,34],{41:[1,188]}),{43:189,44:[1,190],46:191,47:$V01},{28:$Vm,30:193,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},o($VW,[2,71],{72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,95:$VQ}),{4:194,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:24,28:$V0,33:$V1,37:$V2,38:$V3,42:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,56:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{8:[1,195],72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,95:$VQ},{8:[1,196],72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,95:$VQ},{4:197,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:24,28:$V0,33:$V1,37:$V2,38:$V3,42:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,56:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{34:[1,198]},{6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:24,28:$V0,33:$V1,37:$V2,38:$V3,40:[1,199],42:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,56:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},o($Vj,[2,57]),{6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:24,28:$V0,33:$V1,37:$V2,38:$V3,40:[1,200],42:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,56:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{4:201,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:24,28:$V0,33:$V1,37:$V2,38:$V3,42:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,56:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},o($VT,[2,60],{72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,95:$VQ}),o($Vy,[2,23],{72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,95:$VQ}),{28:$Vm,30:115,34:$Vn,63:$Vo,65:202,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{27:$VV,64:[1,203]},{6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:24,28:$V0,33:$V1,37:$V2,38:$V3,40:[1,204],42:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,56:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{6:205,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:206,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:24,28:$V0,33:$V1,37:$V2,38:$V3,42:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,56:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{40:[1,207],44:[1,208],46:209,47:$V01},{45:[1,210]},o($V11,[2,41]),{28:$Vm,30:211,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},o([8,27,36,39,45,64],[2,106],{72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,95:$VQ}),{6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:24,28:$V0,33:$V1,37:$V2,38:$V3,40:[1,212],42:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,56:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{28:$V21,54:213},{28:$V21,54:215},{6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:24,28:$V0,33:$V1,37:$V2,38:$V3,40:[1,216],42:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,56:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{28:$Vm,30:217,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},o($Vj,[2,56]),o($Vj,[2,58]),{6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:24,28:$V0,33:$V1,37:$V2,38:$V3,40:[1,218],42:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,56:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{27:$VV,64:[1,219]},o($V31,[2,70]),o($Vi,[2,31],{41:[1,220]}),o($Vj,[2,35]),o($Vj,[2,36]),o($Vj,[2,37]),{45:[1,221]},o($V11,[2,40]),{4:222,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:24,28:$V0,33:$V1,37:$V2,38:$V3,42:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,56:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{45:[1,223],72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,95:$VQ},o($Vj,[2,48]),{36:[1,224]},{29:[1,225],31:[1,226],32:[1,227]},{36:[1,228]},o($Vj,[2,55]),{36:[1,229],72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,95:$VQ},o($Vj,[2,59]),o($V31,[2,69]),{14:231,38:[1,232],39:[1,230]},{4:233,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:24,28:$V0,33:$V1,37:$V2,38:$V3,42:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,56:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:24,28:$V0,33:$V1,37:$V2,38:$V3,40:[1,234],42:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,56:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{4:235,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:24,28:$V0,33:$V1,37:$V2,38:$V3,42:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,56:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{39:[1,236]},{28:$Vm,30:237,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{36:[2,53]},{36:[2,54]},{39:[1,238]},{8:[2,49]},{4:239,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:24,28:$V0,33:$V1,37:$V2,38:$V3,42:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,56:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},o($Vj,[2,33]),{34:[1,240]},{6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:24,28:$V0,33:$V1,37:$V2,38:$V3,40:[1,241],42:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,56:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},o($Vj,[2,38]),o($V11,[2,42],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:24,6:41,28:$V0,33:$V1,37:$V2,38:$V3,42:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,56:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh}),{4:242,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:24,28:$V0,33:$V1,37:$V2,38:$V3,42:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,56:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{36:[2,52],72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,95:$VQ},{4:243,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:24,28:$V0,33:$V1,37:$V2,38:$V3,42:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,56:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:24,28:$V0,33:$V1,37:$V2,38:$V3,40:[1,244],42:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,56:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{28:$Vm,30:245,34:$Vn,63:$Vo,73:$Vp,81:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},o($Vj,[2,39]),{6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:24,28:$V0,33:$V1,37:$V2,38:$V3,40:[1,246],42:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,56:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},{6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:24,28:$V0,33:$V1,37:$V2,38:$V3,40:[1,247],42:$V4,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,56:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh},o($Vj,[2,32]),{36:[1,248],72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,95:$VQ},o($Vj,[2,50]),o($Vj,[2,51]),{39:$VX}],
defaultActions: {28:[2,45],29:[2,46],40:[2,1],59:[2,27],60:[2,28],120:[2,78],123:[2,29],125:[2,30],226:[2,53],227:[2,54],229:[2,49]},
>>>>>>> Stashed changes
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


    /*::::::::::::::::::     AST      ::::::::::::::::::*/
    const { Ast } = require("../dist/Ast/Ast");
    /*::::::::::::::::::     ENUMs      ::::::::::::::::::*/
    const { TIPO, OperadorAritmetico, OperadorLogico, OperadorRelacional } = require("../dist/TablaSimbolos/Tipo");
    /*::::::::::::::::::     Expresiones      ::::::::::::::::::*/
    const { Primitivo } = require("../dist/Expresiones/Primitivo");
    const { Identificador } = require("../dist/Expresiones/Identificador");
    const { Ternario } = require("../dist/Expresiones/Ternario");
    const { Llamada } = require("../dist/Expresiones/Llamada");
    /*..............     Operaciones      ...............*/
    const { Aritmetica } = require("../dist/Expresiones/Operaciones/Aritmeticas");
    const { Logica } = require("../dist/Expresiones/Operaciones/Logicas");
    const { Relacional } = require("../dist/Expresiones/Operaciones/Relacionales");
    /*::::::::::::::::::     Instrucciones      ::::::::::::::::::*/
    const { Print } = require("../dist/Instrucciones/Print");
    const { Main } = require("../dist/Instrucciones/Metodos/Main");
    const { Funcion } = require("../dist/Instrucciones/Metodos/Funcion");
    
    /*..............     Condicionales      ...............*/
    const { If } = require("../dist/Instrucciones/Condicionales/If");
    const { Ifsinllave } = require("../dist/Instrucciones/Condicionales/Ifsinllave");
    const { Switch } = require("../dist/Instrucciones/Condicionales/Switch");
    const { Case } = require("../dist/Instrucciones/Condicionales/Case");
    /*..............     Transferencia      ...............*/
    const { Detener } = require("../dist/Instrucciones/Transferencia/Break");
    const { Continuar } = require("../dist/Instrucciones/Transferencia/Continuar");
    const { Return } = require("../dist/Instrucciones/Transferencia/Return");
    /*..............     Ciclicas      ...............*/
    const { While } = require("../dist/Instrucciones/Ciclicas/While");
    const { DoWhile } = require("../dist/Instrucciones/Ciclicas/DoWhile");
    const { For } = require("../dist/Instrucciones/Ciclicas/For");
    const { ForIn } = require("../dist/Instrucciones/Ciclicas/ForIn");
    /*..............     Declaracion y asignacion      ...............*/
    const { Declaracion } = require("../dist/Instrucciones/Declaracion");
    const { Asignacion } = require("../dist/Instrucciones/Asignacion");
    const { Simbolo } = require("../dist/TablaSimbolos/Simbolo");
    /*..............     Arreglos      ...............*/
    const { DeclaracionArr } = require("../dist/Instrucciones/Arreglos/DeclaracionArr");

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:this.begin('comment');
break;
case 2:this.popState();
break;
case 3:/* skip comment content*/
break;
case 4:/* skip whitespace */
break;
<<<<<<< Updated upstream
case 5: return 34 
break;
case 6: return 38 
break;
case 7: return 39 
break;
case 8: return 42 
break;
case 9: return 43 
break;
case 10: return 48 
break;
case 11: return 45 
break;
case 12: return 52 
break;
case 13: return 54 
break;
case 14: return 53 
break;
case 15: return 56 
=======
case 5: return 33 
break;
case 6: return 37 
break;
case 7: return 38 
break;
case 8: return 41 
break;
case 9: return 42 
break;
case 10: return 47 
break;
case 11: return 44 
break;
case 12: return 51 
break;
case 13: return 53 
break;
case 14: return 52 
break;
case 15: return 55 
>>>>>>> Stashed changes
break;
case 16: return 92 
break;
case 17: return 93 
break;
case 18: return 94 
break;
case 19: return 66 
break;
case 20: return 67 
break;
case 21: return 70 
break;
case 22: return 69 
break;
case 23: return 68 
break;
<<<<<<< Updated upstream
case 24: return 57 
break;
case 25: return 58 
break;
case 26: return 71 
break;
case 27: return 49 
break;
case 28: return 50 
break;
case 29: return 51 
break;
case 30: return 32
break;
case 31: return 33
=======
case 24: return 56 
break;
case 25: return 57 
break;
case 26: return 71 
break;
case 27: return 48 
break;
case 28: return 49 
break;
case 29: return 50 
break;
case 30: return 31
break;
case 31: return 32
>>>>>>> Stashed changes
break;
case 32: return 72 
break;
case 33: return 73 
break;
case 34: return 74 
break;
case 35: return 75 
break;
case 36: return 76 
break;
case 37: return 77 
break;
case 38: return 83 
break;
case 39: return 84 
break;
case 40: return 85 
break;
case 41: return 82 
break;
case 42: return 87 
break;
case 43: return 86 
break;
<<<<<<< Updated upstream
case 44: return 30 
=======
case 44: return 29 
>>>>>>> Stashed changes
break;
case 45: return 79 
break;
case 46: return 80 
break;
case 47: return 81 
break;
case 48: return 78 
break;
<<<<<<< Updated upstream
case 49: return 35 
break;
case 50: return 37 
=======
case 49: return 34 
break;
case 50: return 36 
>>>>>>> Stashed changes
break;
case 51: return 63 
break;
case 52: return 64 
break;
<<<<<<< Updated upstream
case 53: return 40 
break;
case 54: return 41 
=======
case 53: return 39 
break;
case 54: return 40 
>>>>>>> Stashed changes
break;
case 55: return 'PUNTO' 
break;
case 56: return 8 
break;
<<<<<<< Updated upstream
case 57: return 28 
break;
case 58: return 95 
break;
case 59: return 46 
=======
case 57: return 27 
break;
case 58: return 95 
break;
case 59: return 45 
>>>>>>> Stashed changes
break;
case 60:return 89;
break;
case 61:return 88;
break;
<<<<<<< Updated upstream
case 62:return 29;
=======
case 62:return 28;
>>>>>>> Stashed changes
break;
case 63:return 90;
break;
case 64:return 91;
break;
case 65:
                                        console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                                    
break;
case 66:/* skip whitespace */
break;
case 67:return 5
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*)/i,/^(?:\*\/)/i,/^(?:.)/i,/^(?:\s+)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:in\b)/i,/^(?:null\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:String\b)/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?:struct\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:&)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\.)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\?)/i,/^(?::)/i,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/i,/^(?:[0-9]+)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_ñÑ]*)/i,/^(?:("((\\([\'\"\\bfnrtv]))|([^\"\\]+))*"))/i,/^(?:('((\\([\'\"\\bfnrtv]))|([^\'\\]))'))/i,/^(?:.)/i,/^(?:[\r\n\t])/i,/^(?:$)/i],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}