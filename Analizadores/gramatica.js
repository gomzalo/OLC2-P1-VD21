/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,27],$V1=[1,23],$V2=[1,24],$V3=[1,28],$V4=[1,29],$V5=[1,30],$V6=[1,31],$V7=[1,32],$V8=[1,33],$V9=[1,35],$Va=[1,34],$Vb=[1,25],$Vc=[1,36],$Vd=[1,37],$Ve=[1,38],$Vf=[1,39],$Vg=[1,40],$Vh=[1,41],$Vi=[5,30,35,39,40,42,44,46,49,50,51,52,53,54,55,58,68,69,70,71,72,73],$Vj=[5,30,35,39,40,42,43,44,46,49,50,51,52,53,54,55,58,68,69,70,71,72,73],$Vk=[30,64],$Vl=[2,83],$Vm=[1,62],$Vn=[1,63],$Vo=[1,64],$Vp=[1,65],$Vq=[1,67],$Vr=[1,81],$Vs=[1,72],$Vt=[1,82],$Vu=[1,71],$Vv=[1,73],$Vw=[1,74],$Vx=[1,75],$Vy=[1,76],$Vz=[1,77],$VA=[1,78],$VB=[1,79],$VC=[1,80],$VD=[8,29],$VE=[2,26],$VF=[1,93],$VG=[1,102],$VH=[1,106],$VI=[1,107],$VJ=[1,108],$VK=[1,109],$VL=[1,110],$VM=[1,111],$VN=[1,112],$VO=[1,113],$VP=[1,114],$VQ=[1,115],$VR=[1,116],$VS=[1,117],$VT=[1,118],$VU=[1,119],$VV=[1,120],$VW=[1,121],$VX=[8,29,38,41,47,65,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,97],$VY=[1,135],$VZ=[1,139],$V_=[29,38],$V$=[1,146],$V01=[8,29,38,41,47,65,81,82,97],$V11=[1,175],$V21=[29,65],$V31=[8,29,31,38,41,47,64,65,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,97],$V41=[1,192],$V51=[8,29,38,41,47,65,74,75,80,81,82,84,85,86,87,88,89,97],$V61=[8,29,38,41,47,65,74,75,76,77,78,80,81,82,84,85,86,87,88,89,97],$V71=[8,29,38,41,47,65,81,82,84,85,86,87,88,89,97],$V81=[8,29,38,41,47,65,81,82,88,89,97],$V91=[1,215],$Va1=[42,46,49],$Vb1=[1,237],$Vc1=[8,64];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"start":3,"instrucciones":4,"EOF":5,"instruccion":6,"print_instr":7,"PUNTOCOMA":8,"println_instr":9,"main_":10,"funciones":11,"declaracion":12,"asignacion":13,"if_llav_instr":14,"if_instr":15,"switch_instr":16,"break_instr":17,"continue_instr":18,"return_instr":19,"while_instr":20,"for_instr":21,"dowhile_instr":22,"for_in_instr":23,"decl_arr_instr":24,"llamada":25,"modif_arr_instr":26,"tipo":27,"lista_simbolos":28,"COMA":29,"ID":30,"IGUAL":31,"expr":32,"INCRE":33,"DECRE":34,"RPRINT":35,"PARA":36,"lista_parametros":37,"PARC":38,"RPRINTLN":39,"RIF":40,"LLAVA":41,"LLAVC":42,"RELSE":43,"RSWITCH":44,"lista_cases":45,"RDEFAULT":46,"DOSPUNTOS":47,"case":48,"RCASE":49,"RBREAK":50,"RCONTINUE":51,"RRETURN":52,"RWHILE":53,"RDO":54,"RFOR":55,"actualizacion":56,"RIN":57,"RVOID":58,"RMAIN":59,"lista_parametros_func":60,"parametro_func":61,"lista_dim":62,"lista_exp_arr":63,"CORA":64,"CORC":65,"lista_exp_arr_c":66,"lista_exp":67,"RINT":68,"RDOUBLE":69,"RSTRING":70,"RCHAR":71,"RBOOLEAN":72,"RSTRUCT":73,"MAS":74,"MENOS":75,"MULTI":76,"DIV":77,"PORCENTAJE":78,"POTENCIA":79,"AMPERSON":80,"AND":81,"OR":82,"NOT":83,"MAYORQUE":84,"MAYORIGUAL":85,"MENORIGUAL":86,"MENORQUE":87,"IGUALIGUAL":88,"DIFERENTE":89,"ENTERO":90,"DECIMAL":91,"CADENA":92,"CHAR":93,"NULL":94,"TRUE":95,"FALSE":96,"INTERROGACION":97,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PUNTOCOMA",29:"COMA",30:"ID",31:"IGUAL",33:"INCRE",34:"DECRE",35:"RPRINT",36:"PARA",38:"PARC",39:"RPRINTLN",40:"RIF",41:"LLAVA",42:"LLAVC",43:"RELSE",44:"RSWITCH",46:"RDEFAULT",47:"DOSPUNTOS",49:"RCASE",50:"RBREAK",51:"RCONTINUE",52:"RRETURN",53:"RWHILE",54:"RDO",55:"RFOR",57:"RIN",58:"RVOID",59:"RMAIN",64:"CORA",65:"CORC",68:"RINT",69:"RDOUBLE",70:"RSTRING",71:"RCHAR",72:"RBOOLEAN",73:"RSTRUCT",74:"MAS",75:"MENOS",76:"MULTI",77:"DIV",78:"PORCENTAJE",79:"POTENCIA",80:"AMPERSON",81:"AND",82:"OR",83:"NOT",84:"MAYORQUE",85:"MAYORIGUAL",86:"MENORIGUAL",87:"MENORQUE",88:"IGUALIGUAL",89:"DIFERENTE",90:"ENTERO",91:"DECIMAL",92:"CADENA",93:"CHAR",94:"NULL",95:"TRUE",96:"FALSE",97:"INTERROGACION"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,2],[6,2],[6,2],[12,2],[28,3],[28,5],[28,1],[28,3],[13,3],[13,2],[13,2],[7,4],[9,4],[14,7],[14,11],[14,9],[15,5],[15,7],[15,7],[16,7],[16,9],[16,10],[45,2],[45,1],[48,4],[37,3],[37,1],[17,1],[18,1],[19,2],[20,7],[22,8],[21,11],[21,11],[56,3],[56,2],[56,2],[23,7],[10,7],[10,6],[11,7],[11,8],[60,3],[60,1],[61,2],[61,1],[25,3],[25,4],[24,5],[62,3],[62,2],[63,4],[63,3],[66,3],[66,1],[67,4],[67,3],[26,4],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,2],[32,3],[32,3],[32,3],[32,2],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,5],[32,2],[32,2],[32,3],[32,1],[32,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log($$[$0-1]); this.$ = new Ast();  this.$.instrucciones = $$[$0-1]; return this.$; 
break;
case 2: case 42:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3:
 this.$= new Array(); this.$.push($$[$0]); 
break;
case 4: case 5: case 8: case 9: case 13: case 14: case 15: case 18: case 20: case 21: case 22:
 this.$ = $$[$0-1] 
break;
case 6: case 7: case 10: case 11: case 12: case 16: case 17: case 19:
 this.$ = $$[$0] 
break;
case 23:
 this.$ = new Declaracion($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].last_column); 
break;
case 24:
 this.$ = $$[$0-2]; this.$.push(new Simbolo($$[$0],null,null,_$[$0-2].first_line, _$[$0-2].first_column,null)); 
break;
case 25:
 this.$ = $$[$0-4]; this.$.push(new Simbolo($$[$0-2],null,null,_$[$0-4].first_line, _$[$0-4].first_column,$$[$0])); 
break;
case 26:
 this.$ = new Array(); this.$.push(new Simbolo($$[$0],null,null,_$[$0].first_line, _$[$0].first_column,null)); 
break;
case 27:
 this.$ = new Array(); this.$.push(new Simbolo($$[$0-2],null,null,_$[$0-2].first_line, _$[$0-2].first_column,$$[$0])); 
break;
case 28: case 54:
 this.$ = new Asignacion($$[$0-2] ,$$[$0], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 29: case 55:
 this.$ = new Asignacion($$[$0-1] ,new Aritmetica(new Identificador($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), OperadorAritmetico.MAS,new Primitivo(Number(1), $$[$0-1].first_line, $$[$0-1].last_column), $$[$0-1].first_line, $$[$0-1].last_column, false), _$[$0-1].first_line, _$[$0-1].last_column); 
break;
case 30: case 56:
 this.$ = new Asignacion($$[$0-1] ,new Aritmetica(new Identificador($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), OperadorAritmetico.MENOS,new Primitivo(Number(1), $$[$0-1].first_line, $$[$0-1].last_column), $$[$0-1].first_line, $$[$0-1].last_column, false), _$[$0-1].first_line, _$[$0-1].last_column); 
break;
case 31:
 this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, false); 
break;
case 32:
 this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, true); 
break;
case 33:
 this.$ = new If($$[$0-4], $$[$0-1], [], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 34:
 this.$ = new If($$[$0-8], $$[$0-5], $$[$0-1], _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 35:
 this.$ = new If($$[$0-6], $$[$0-3], [$$[$0]], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 36:
 this.$ = new Ifsinllave($$[$0-2], $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 37:
 this.$ = new Ifsinllave($$[$0-4], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 38:
 this.$ = new Ifsinllave($$[$0-4], $$[$0-2], [$$[$0]], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 39:
 this.$ = new Switch($$[$0-4], $$[$0-1], [], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 40:
 this.$ = new Switch($$[$0-6], [], $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 41:
 this.$ = new Switch($$[$0-7], $$[$0-4], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column); 
break;
case 43: case 46:
 this.$ = new Array(); this.$.push($$[$0]);
break;
case 44:
 this.$ = new Case($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 45: case 62: case 73:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 47:
 this.$ = new Detener(_$[$0].first_line, _$[$0].first_column); 
break;
case 48:
 this.$ = new Continuar(_$[$0].first_line, _$[$0].first_column); 
break;
case 49:
 this.$ = new Return($$[$0],_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 50:
 this.$ = new While($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 51:
 this.$ = new DoWhile($$[$0-1], $$[$0-5], _$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 52: case 53:
 this.$ = new For($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 57:
 this.$ = new ForIn($$[$0-5], $$[$0-3], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 58:
this.$ = new Main($$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 59:
this.$ = new Main([],_$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 60:
 this.$ = new Funcion($$[$0-5], $$[$0-6], [], $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 61:
 this.$ = new Funcion($$[$0-6], $$[$0-7], $$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 63: case 74:
 this.$ = new Array(); this.$.push($$[$0]); 
break;
case 64:
 this.$ = {"tipo" : $$[$0-1], "arreglo": false, "id": $$[$0]}; 
break;
case 65:
 this.$ = {"tipo" : TIPO.ANY, "arreglo": false, "id": $$[$0]}; 
break;
case 66:
 this.$ = new Llamada($$[$0-2] , [], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 67:
 this.$ = new Llamada($$[$0-3] , $$[$0-1] , _$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 68:
 this.$ = new DeclaracionArr($$[$0-4], $$[$0-3], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].last_column); 
break;
case 69:
 this.$ = $$[$0-2]; this.$.push($$[$0-1]+1); 
break;
case 70:
 this.$ = new Array(); this.$.push(1); 
break;
case 71: case 75:
 this.$ = $$[$0-3]; this.$.push($$[$0-1]); 
break;
case 72: case 76:
 this.$ = new Array(); this.$.push($$[$0-1]); 
break;
case 77:
 this.$ = new ModificacionArr($$[$0-3], $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 78:
 this.$ = TIPO.ENTERO; 
break;
case 79:
 this.$ = TIPO.DECIMAL; 
break;
case 80:
 this.$ = TIPO.CADENA; 
break;
case 81:
 this.$ = TIPO.CHARACTER; 
break;
case 82:
 this.$ = TIPO.BOOLEANO; 
break;
case 83:
 this.$ = TIPO.VOID; 
break;
case 84:
 this.$ = TIPO.STRUCT; 
break;
case 85:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.MAS,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 86:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.MENOS,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 87:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.POR,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 88:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.DIV,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 89:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.MOD,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 90:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.POT,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 91:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.AMPERSON,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 92:
 this.$ = new Aritmetica($$[$0],OperadorAritmetico.UMENOS,$$[$0], _$[$0-1].first_line, _$[$0-1].first_column, true); 
break;
case 93: case 114:
 this.$ = $$[$0-1]; 
break;
case 94:
 this.$ = new Logica($$[$0-2], OperadorLogico.AND, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 95:
 this.$ = new Logica($$[$0-2], OperadorLogico.OR, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 96:
 this.$ = new Logica($$[$0], OperadorLogico.NOT, null, $$[$0-1].first_line, $$[$0-1].last_column, true); 
break;
case 97:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.MAYORQUE, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 98:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.MAYORIGUAL, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 99:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.MENORIGUAL, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 100:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.MENORQUE, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 101:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.IGUALIGUAL, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 102:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.DIFERENTE, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 103:
 this.$ = new Primitivo(Number($$[$0]), TIPO.ENTERO, _$[$0].first_line, _$[$0].first_column); 
break;
case 104:
 this.$ = new Primitivo(Number($$[$0]), TIPO.DECIMAL, _$[$0].first_line, _$[$0].first_column); 
break;
case 105:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new Primitivo($$[$0], TIPO.CADENA, _$[$0].first_line, _$[$0].first_column); 
break;
case 106:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new Primitivo($$[$0], TIPO.CHARACTER, _$[$0].first_line, _$[$0].first_column); 
break;
case 107:
 this.$ = new Primitivo(null, TIPO.NULO, _$[$0].first_line, _$[$0].first_column); 
break;
case 108:
 this.$ = new Primitivo(true, TIPO.BOOLEANO, _$[$0].first_line, _$[$0].first_column); 
break;
case 109:
 this.$ = new Primitivo(false, TIPO.BOOLEANO, _$[$0].first_line, _$[$0].first_column); 
break;
case 110:
 this.$ = new Identificador($$[$0] , _$[$0].first_line, _$[$0].last_column); 
break;
case 111:
this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 112:
 this.$ = new Aritmetica(new Identificador($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), OperadorAritmetico.MAS,new Primitivo(Number(1), $$[$0-1].first_line, $$[$0-1].last_column), $$[$0-1].first_line, $$[$0-1].last_column, false); 
break;
case 113:
 this.$ = new Aritmetica(new Identificador($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), OperadorAritmetico.MENOS,new Primitivo(Number(1), $$[$0-1].first_line, $$[$0-1].last_column), $$[$0-1].first_line, $$[$0-1].last_column, false); 
break;
case 115:
 this.$ = $$[$0]; 
break;
case 116:
 this.$ = new AccesoArr($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:26,30:$V0,35:$V1,39:$V2,40:$V3,44:$V4,50:$V5,51:$V6,52:$V7,53:$V8,54:$V9,55:$Va,58:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh},{1:[3]},{5:[1,42],6:43,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:26,30:$V0,35:$V1,39:$V2,40:$V3,44:$V4,50:$V5,51:$V6,52:$V7,53:$V8,54:$V9,55:$Va,58:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh},o($Vi,[2,3]),{8:[1,44]},{8:[1,45]},o($Vj,[2,6]),o($Vj,[2,7]),{8:[1,46]},{8:[1,47]},o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,12]),{8:[1,48]},{8:[1,49]},{8:[1,50]},o($Vj,[2,16]),o($Vj,[2,17]),{8:[1,51]},o($Vj,[2,19]),{8:[1,52]},{8:[1,53]},{8:[1,54]},{36:[1,55]},{36:[1,56]},o($Vk,$Vl,{59:[1,57]}),{28:59,30:[1,58],62:60,64:[1,61]},{31:$Vm,33:$Vn,34:$Vo,36:$Vp,64:$Vq,67:66},{36:[1,68]},{36:[1,69]},{8:[2,47]},{8:[2,48]},{25:83,30:$Vr,32:70,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{36:[1,84]},{30:[1,86],36:[1,85]},{41:[1,87]},o($Vk,[2,78]),o($Vk,[2,79]),o($Vk,[2,80]),o($Vk,[2,81]),o($Vk,[2,82]),o($Vk,[2,84]),{1:[2,1]},o($Vi,[2,2]),o($Vj,[2,4]),o($Vj,[2,5]),o($Vj,[2,8]),o($Vj,[2,9]),o($Vj,[2,13]),o($Vj,[2,14]),o($Vj,[2,15]),o($Vj,[2,18]),o($Vj,[2,20]),o($Vj,[2,21]),o($Vj,[2,22]),{25:83,30:$Vr,32:89,36:$Vs,37:88,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{25:83,30:$Vr,32:89,36:$Vs,37:90,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{36:[1,91]},o($VD,$VE,{31:$VF,36:[1,92]}),{8:[2,23],29:[1,94]},{30:[1,95],64:[1,96]},{65:[1,97]},{25:83,30:$Vr,32:98,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{8:[2,29]},{8:[2,30]},{25:83,30:$Vr,32:89,36:$Vs,37:100,38:[1,99],64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{31:[1,101],64:$VG},{25:83,30:$Vr,32:103,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{25:83,30:$Vr,32:104,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{25:83,30:$Vr,32:105,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{8:[2,49],74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,97:$VW},{25:83,30:$Vr,32:122,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{25:83,30:$Vr,32:123,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{25:83,30:$Vr,32:124,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},o($VX,[2,103]),o($VX,[2,104]),o($VX,[2,105]),o($VX,[2,106]),o($VX,[2,107]),o($VX,[2,108]),o($VX,[2,109]),o($VX,[2,110],{67:127,33:[1,125],34:[1,126],36:$Vp,64:$Vq}),{25:83,30:$Vr,32:129,36:$Vs,64:$Vt,66:128,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},o($VX,[2,115]),{25:83,30:$Vr,32:130,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{12:132,13:131,27:134,30:[1,133],58:$VY,68:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh},{57:[1,136]},{4:137,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:26,30:$V0,35:$V1,39:$V2,40:$V3,44:$V4,50:$V5,51:$V6,52:$V7,53:$V8,54:$V9,55:$Va,58:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh},{29:$VZ,38:[1,138]},o($V_,[2,46],{74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,97:$VW}),{29:$VZ,38:[1,140]},{38:[1,141]},{27:145,30:$V$,38:[1,142],58:$VY,60:143,61:144,68:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh},{25:83,30:$Vr,32:147,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{30:[1,148]},{31:[1,149]},{65:[1,150]},o($Vk,[2,70]),{8:[2,28],74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,97:$VW},o($VX,[2,66]),{29:$VZ,38:[1,151]},{25:83,30:$Vr,32:152,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{25:83,30:$Vr,32:153,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{65:[1,154],74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,97:$VW},{38:[1,155],74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,97:$VW},{38:[1,156],74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,97:$VW},{25:83,30:$Vr,32:157,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{25:83,30:$Vr,32:158,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{25:83,30:$Vr,32:159,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{25:83,30:$Vr,32:160,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{25:83,30:$Vr,32:161,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{25:83,30:$Vr,32:162,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{25:83,30:$Vr,32:163,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{25:83,30:$Vr,32:164,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{25:83,30:$Vr,32:165,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{25:83,30:$Vr,32:166,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{25:83,30:$Vr,32:167,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{25:83,30:$Vr,32:168,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{25:83,30:$Vr,32:169,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{25:83,30:$Vr,32:170,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{25:83,30:$Vr,32:171,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{25:83,30:$Vr,32:172,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},o($VX,[2,92]),{38:[1,173],74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,97:$VW},o($V01,[2,96],{74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV}),o($VX,[2,112]),o($VX,[2,113]),o($VX,[2,116],{64:$VG}),{29:$V11,65:[1,174]},o($V21,[2,74],{74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,97:$VW}),{38:[1,176],74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,97:$VW},{8:[1,177]},{8:[1,178]},{31:$Vm,33:$Vn,34:$Vo},{28:59,30:[1,179]},{30:$Vl},{25:83,30:$Vr,32:180,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{6:43,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:26,30:$V0,35:$V1,39:$V2,40:$V3,42:[1,181],44:$V4,50:$V5,51:$V6,52:$V7,53:$V8,54:$V9,55:$Va,58:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh},{8:[2,31]},{25:83,30:$Vr,32:182,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{8:[2,32]},{41:[1,183]},{41:[1,184]},{29:[1,186],38:[1,185]},o($V_,[2,63]),{30:[1,187]},o($V_,[2,65]),o($VD,[2,27],{74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,97:$VW}),o($VD,[2,24],{31:[1,188]}),{63:189,64:[1,190]},o($Vk,[2,69]),o($VX,[2,67]),{8:[2,77],74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,97:$VW},{65:[1,191],74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,97:$VW},o($V31,[2,76]),{6:193,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:26,30:$V0,35:$V1,39:$V2,40:$V3,41:$V41,44:$V4,50:$V5,51:$V6,52:$V7,53:$V8,54:$V9,55:$Va,58:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh},{41:[1,194]},o($V51,[2,85],{76:$VJ,77:$VK,78:$VL,79:$VM}),o($V51,[2,86],{76:$VJ,77:$VK,78:$VL,79:$VM}),o($V61,[2,87],{79:$VM}),o($V61,[2,88],{79:$VM}),o($V61,[2,89],{79:$VM}),o($VX,[2,90]),o($V51,[2,91],{76:$VJ,77:$VK,78:$VL,79:$VM}),o($V01,[2,94],{74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV}),o([8,29,38,41,47,65,82,97],[2,95],{74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV}),o($V71,[2,97],{74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN}),o($V71,[2,98],{74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN}),o($V71,[2,99],{74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN}),o($V71,[2,100],{74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN}),o($V81,[2,101],{74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,84:$VQ,85:$VR,86:$VS,87:$VT}),o($V81,[2,102],{74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,84:$VQ,85:$VR,86:$VS,87:$VT}),{47:[1,195],74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,97:$VW},o($VX,[2,93]),o($VX,[2,114]),{25:83,30:$Vr,32:196,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{41:[1,197]},{25:83,30:$Vr,32:198,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{25:83,30:$Vr,32:199,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},o($VD,$VE,{31:$VF}),{41:[1,200],74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,97:$VW},{53:[1,201]},o($V_,[2,45],{74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,97:$VW}),{4:202,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:26,30:$V0,35:$V1,39:$V2,40:$V3,42:[1,203],44:$V4,50:$V5,51:$V6,52:$V7,53:$V8,54:$V9,55:$Va,58:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh},{4:204,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:26,30:$V0,35:$V1,39:$V2,40:$V3,44:$V4,50:$V5,51:$V6,52:$V7,53:$V8,54:$V9,55:$Va,58:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh},{41:[1,205]},{27:145,30:$V$,58:$VY,61:206,68:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh},o($V_,[2,64]),{25:83,30:$Vr,32:207,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{8:[2,68],64:[1,208]},{25:83,30:$Vr,32:129,36:$Vs,64:$Vt,66:209,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},o($V31,[2,75]),{4:210,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:26,30:$V0,35:$V1,39:$V2,40:$V3,44:$V4,50:$V5,51:$V6,52:$V7,53:$V8,54:$V9,55:$Va,58:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh},o($Vi,[2,36],{43:[1,211]}),{45:212,46:[1,213],48:214,49:$V91},{25:83,30:$Vr,32:216,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},o($V21,[2,73],{74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,97:$VW}),{4:217,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:26,30:$V0,35:$V1,39:$V2,40:$V3,44:$V4,50:$V5,51:$V6,52:$V7,53:$V8,54:$V9,55:$Va,58:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh},{8:[1,218],74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,97:$VW},{8:[1,219],74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,97:$VW},{4:220,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:26,30:$V0,35:$V1,39:$V2,40:$V3,44:$V4,50:$V5,51:$V6,52:$V7,53:$V8,54:$V9,55:$Va,58:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh},{36:[1,221]},{6:43,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:26,30:$V0,35:$V1,39:$V2,40:$V3,42:[1,222],44:$V4,50:$V5,51:$V6,52:$V7,53:$V8,54:$V9,55:$Va,58:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh},o($Vj,[2,59]),{6:43,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:26,30:$V0,35:$V1,39:$V2,40:$V3,42:[1,223],44:$V4,50:$V5,51:$V6,52:$V7,53:$V8,54:$V9,55:$Va,58:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh},{4:224,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:26,30:$V0,35:$V1,39:$V2,40:$V3,44:$V4,50:$V5,51:$V6,52:$V7,53:$V8,54:$V9,55:$Va,58:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh},o($V_,[2,62]),o($VD,[2,25],{74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,97:$VW}),{25:83,30:$Vr,32:129,36:$Vs,64:$Vt,66:225,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{29:$V11,65:[1,226]},{6:43,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:26,30:$V0,35:$V1,39:$V2,40:$V3,42:[1,227],44:$V4,50:$V5,51:$V6,52:$V7,53:$V8,54:$V9,55:$Va,58:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh},{6:228,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:229,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:26,30:$V0,35:$V1,39:$V2,40:$V3,44:$V4,50:$V5,51:$V6,52:$V7,53:$V8,54:$V9,55:$Va,58:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh},{42:[1,230],46:[1,231],48:232,49:$V91},{47:[1,233]},o($Va1,[2,43]),{25:83,30:$Vr,32:234,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},o([8,29,38,41,47,65],[2,111],{74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,97:$VW}),{6:43,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:26,30:$V0,35:$V1,39:$V2,40:$V3,42:[1,235],44:$V4,50:$V5,51:$V6,52:$V7,53:$V8,54:$V9,55:$Va,58:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh},{30:$Vb1,56:236},{30:$Vb1,56:238},{6:43,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:26,30:$V0,35:$V1,39:$V2,40:$V3,42:[1,239],44:$V4,50:$V5,51:$V6,52:$V7,53:$V8,54:$V9,55:$Va,58:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh},{25:83,30:$Vr,32:240,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},o($Vj,[2,58]),o($Vj,[2,60]),{6:43,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:26,30:$V0,35:$V1,39:$V2,40:$V3,42:[1,241],44:$V4,50:$V5,51:$V6,52:$V7,53:$V8,54:$V9,55:$Va,58:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh},{29:$V11,65:[1,242]},o($Vc1,[2,72]),o($Vi,[2,33],{43:[1,243]}),o($Vj,[2,37]),o($Vj,[2,38]),o($Vj,[2,39]),{47:[1,244]},o($Va1,[2,42]),{4:245,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:26,30:$V0,35:$V1,39:$V2,40:$V3,44:$V4,50:$V5,51:$V6,52:$V7,53:$V8,54:$V9,55:$Va,58:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh},{47:[1,246],74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,97:$VW},o($Vj,[2,50]),{38:[1,247]},{31:[1,248],33:[1,249],34:[1,250]},{38:[1,251]},o($Vj,[2,57]),{38:[1,252],74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,97:$VW},o($Vj,[2,61]),o($Vc1,[2,71]),{14:254,40:[1,255],41:[1,253]},{4:256,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:26,30:$V0,35:$V1,39:$V2,40:$V3,44:$V4,50:$V5,51:$V6,52:$V7,53:$V8,54:$V9,55:$Va,58:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh},{6:43,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:26,30:$V0,35:$V1,39:$V2,40:$V3,42:[1,257],44:$V4,50:$V5,51:$V6,52:$V7,53:$V8,54:$V9,55:$Va,58:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh},{4:258,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:26,30:$V0,35:$V1,39:$V2,40:$V3,44:$V4,50:$V5,51:$V6,52:$V7,53:$V8,54:$V9,55:$Va,58:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh},{41:[1,259]},{25:83,30:$Vr,32:260,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{38:[2,55]},{38:[2,56]},{41:[1,261]},{8:[2,51]},{4:262,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:26,30:$V0,35:$V1,39:$V2,40:$V3,44:$V4,50:$V5,51:$V6,52:$V7,53:$V8,54:$V9,55:$Va,58:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh},o($Vj,[2,35]),{36:[1,263]},{6:43,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:26,30:$V0,35:$V1,39:$V2,40:$V3,42:[1,264],44:$V4,50:$V5,51:$V6,52:$V7,53:$V8,54:$V9,55:$Va,58:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh},o($Vj,[2,40]),o($Va1,[2,44],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:26,6:43,30:$V0,35:$V1,39:$V2,40:$V3,44:$V4,50:$V5,51:$V6,52:$V7,53:$V8,54:$V9,55:$Va,58:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh}),{4:265,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:26,30:$V0,35:$V1,39:$V2,40:$V3,44:$V4,50:$V5,51:$V6,52:$V7,53:$V8,54:$V9,55:$Va,58:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh},{38:[2,54],74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,97:$VW},{4:266,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:26,30:$V0,35:$V1,39:$V2,40:$V3,44:$V4,50:$V5,51:$V6,52:$V7,53:$V8,54:$V9,55:$Va,58:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh},{6:43,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:26,30:$V0,35:$V1,39:$V2,40:$V3,42:[1,267],44:$V4,50:$V5,51:$V6,52:$V7,53:$V8,54:$V9,55:$Va,58:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh},{25:83,30:$Vr,32:268,36:$Vs,64:$Vt,75:$Vu,83:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},o($Vj,[2,41]),{6:43,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:26,30:$V0,35:$V1,39:$V2,40:$V3,42:[1,269],44:$V4,50:$V5,51:$V6,52:$V7,53:$V8,54:$V9,55:$Va,58:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh},{6:43,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:26,30:$V0,35:$V1,39:$V2,40:$V3,42:[1,270],44:$V4,50:$V5,51:$V6,52:$V7,53:$V8,54:$V9,55:$Va,58:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh},o($Vj,[2,34]),{38:[1,271],74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV,97:$VW},o($Vj,[2,52]),o($Vj,[2,53]),{41:$V41}],
defaultActions: {30:[2,47],31:[2,48],42:[2,1],63:[2,29],64:[2,30],135:[2,83],138:[2,31],140:[2,32],249:[2,55],250:[2,56],252:[2,51]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


    /*::::::::::::::::::     AST      ::::::::::::::::::*/
    const { Ast } = require("../dist/Ast/Ast");
    /*::::::::::::::::::     ENUMs      ::::::::::::::::::*/
    const { TIPO, OperadorAritmetico, OperadorLogico, OperadorRelacional } = require("../dist/TablaSimbolos/Tipo");
    /*::::::::::::::::::     Expresiones      ::::::::::::::::::*/
    const { Primitivo } = require("../dist/Expresiones/Primitivo");
    const { Identificador } = require("../dist/Expresiones/Identificador");
    const { Ternario } = require("../dist/Expresiones/Ternario");
    const { Llamada } = require("../dist/Expresiones/Llamada");
    /*..............     Operaciones      ...............*/
    const { Aritmetica } = require("../dist/Expresiones/Operaciones/Aritmeticas");
    const { Logica } = require("../dist/Expresiones/Operaciones/Logicas");
    const { Relacional } = require("../dist/Expresiones/Operaciones/Relacionales");
    /*::::::::::::::::::     Instrucciones      ::::::::::::::::::*/
    const { Print } = require("../dist/Instrucciones/Print");
    const { Main } = require("../dist/Instrucciones/Metodos/Main");
    const { Funcion } = require("../dist/Instrucciones/Metodos/Funcion");
    
    /*..............     Condicionales      ...............*/
    const { If } = require("../dist/Instrucciones/Condicionales/If");
    const { Ifsinllave } = require("../dist/Instrucciones/Condicionales/Ifsinllave");
    const { Switch } = require("../dist/Instrucciones/Condicionales/Switch");
    const { Case } = require("../dist/Instrucciones/Condicionales/Case");
    /*..............     Transferencia      ...............*/
    const { Detener } = require("../dist/Instrucciones/Transferencia/Break");
    const { Continuar } = require("../dist/Instrucciones/Transferencia/Continuar");
    const { Return } = require("../dist/Instrucciones/Transferencia/Return");
    /*..............     Ciclicas      ...............*/
    const { While } = require("../dist/Instrucciones/Ciclicas/While");
    const { DoWhile } = require("../dist/Instrucciones/Ciclicas/DoWhile");
    const { For } = require("../dist/Instrucciones/Ciclicas/For");
    const { ForIn } = require("../dist/Instrucciones/Ciclicas/ForIn");
    /*..............     Declaracion y asignacion      ...............*/
    const { Declaracion } = require("../dist/Instrucciones/Declaracion");
    const { Asignacion } = require("../dist/Instrucciones/Asignacion");
    const { Simbolo } = require("../dist/TablaSimbolos/Simbolo");
    /*..............     Arreglos      ...............*/
    const { DeclaracionArr } = require("../dist/Instrucciones/Arreglos/DeclaracionArr");
    const { AccesoArr } = require("../dist/Expresiones/Arreglos/AccesoArr");
    const { ModificacionArr } = require("../dist/Instrucciones/Arreglos/ModificacionArr");

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:this.begin('comment');
break;
case 2:this.popState();
break;
case 3:/* skip comment content*/
break;
case 4:/* skip whitespace */
break;
case 5: return 35 
break;
case 6: return 39 
break;
case 7: return 40 
break;
case 8: return 43 
break;
case 9: return 44 
break;
case 10: return 49 
break;
case 11: return 46 
break;
case 12: return 53 
break;
case 13: return 55 
break;
case 14: return 54 
break;
case 15: return 57 
break;
case 16: return 94 
break;
case 17: return 95 
break;
case 18: return 96 
break;
case 19: return 68 
break;
case 20: return 69 
break;
case 21: return 72 
break;
case 22: return 71 
break;
case 23: return 70 
break;
case 24: return 58 
break;
case 25: return 59 
break;
case 26: return 73 
break;
case 27: return 50 
break;
case 28: return 51 
break;
case 29: return 52 
break;
case 30: return 33
break;
case 31: return 34
break;
case 32: return 74 
break;
case 33: return 75 
break;
case 34: return 76 
break;
case 35: return 77 
break;
case 36: return 78 
break;
case 37: return 79 
break;
case 38: return 85 
break;
case 39: return 86 
break;
case 40: return 87 
break;
case 41: return 84 
break;
case 42: return 89 
break;
case 43: return 88 
break;
case 44: return 31 
break;
case 45: return 81 
break;
case 46: return 82 
break;
case 47: return 83 
break;
case 48: return 80 
break;
case 49: return 36 
break;
case 50: return 38 
break;
case 51: return 64 
break;
case 52: return 65 
break;
case 53: return 41 
break;
case 54: return 42 
break;
case 55: return 'PUNTO' 
break;
case 56: return 8 
break;
case 57: return 29 
break;
case 58: return 97 
break;
case 59: return 47 
break;
case 60:return 91;
break;
case 61:return 90;
break;
case 62:return 30;
break;
case 63:return 92;
break;
case 64:return 93;
break;
case 65:
                                        console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                                    
break;
case 66:/* skip whitespace */
break;
case 67:return 5
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*)/i,/^(?:\*\/)/i,/^(?:.)/i,/^(?:\s+)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:in\b)/i,/^(?:null\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:String\b)/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?:struct\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:&)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\.)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\?)/i,/^(?::)/i,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/i,/^(?:[0-9]+)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_ñÑ]*)/i,/^(?:("((\\([\'\"\\bfnrtv]))|([^\"\\]+))*"))/i,/^(?:('((\\([\'\"\\bfnrtv]))|([^\'\\]))'))/i,/^(?:.)/i,/^(?:[\r\n\t])/i,/^(?:$)/i],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}