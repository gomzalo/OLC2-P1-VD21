/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,26],$V1=[1,22],$V2=[1,23],$V3=[1,27],$V4=[1,28],$V5=[1,29],$V6=[1,30],$V7=[1,31],$V8=[1,32],$V9=[1,34],$Va=[1,33],$Vb=[1,24],$Vc=[1,35],$Vd=[1,36],$Ve=[1,37],$Vf=[1,38],$Vg=[1,39],$Vh=[1,40],$Vi=[5,29,34,38,39,41,43,45,48,49,50,51,52,53,54,57,67,68,69,70,71,72],$Vj=[5,29,34,38,39,41,42,43,45,48,49,50,51,52,53,54,57,67,68,69,70,71,72],$Vk=[29,63],$Vl=[2,81],$Vm=[1,60],$Vn=[1,61],$Vo=[1,62],$Vp=[1,63],$Vq=[1,77],$Vr=[1,68],$Vs=[1,78],$Vt=[1,67],$Vu=[1,69],$Vv=[1,70],$Vw=[1,71],$Vx=[1,72],$Vy=[1,73],$Vz=[1,74],$VA=[1,75],$VB=[1,76],$VC=[8,28],$VD=[2,25],$VE=[1,89],$VF=[1,99],$VG=[1,100],$VH=[1,101],$VI=[1,102],$VJ=[1,103],$VK=[1,104],$VL=[1,105],$VM=[1,106],$VN=[1,107],$VO=[1,108],$VP=[1,109],$VQ=[1,110],$VR=[1,111],$VS=[1,112],$VT=[1,113],$VU=[1,114],$VV=[8,28,37,40,46,64,73,74,75,76,77,78,79,80,81,83,84,85,86,87,88,96],$VW=[1,129],$VX=[1,133],$VY=[28,37],$VZ=[1,140],$V_=[8,28,37,40,46,64,80,81,96],$V$=[1,168],$V01=[28,64],$V11=[1,184],$V21=[8,28,37,40,46,64,73,74,79,80,81,83,84,85,86,87,88,96],$V31=[8,28,37,40,46,64,73,74,75,76,77,79,80,81,83,84,85,86,87,88,96],$V41=[8,28,37,40,46,64,80,81,83,84,85,86,87,88,96],$V51=[8,28,37,40,46,64,80,81,87,88,96],$V61=[1,209],$V71=[8,28,37,40,46,63,64,73,74,75,76,77,78,79,80,81,83,84,85,86,87,88,96],$V81=[41,45,48],$V91=[1,232],$Va1=[8,63];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"start":3,"instrucciones":4,"EOF":5,"instruccion":6,"print_instr":7,"PUNTOCOMA":8,"println_instr":9,"main_":10,"funciones":11,"declaracion":12,"asignacion":13,"if_llav_instr":14,"if_instr":15,"switch_instr":16,"break_instr":17,"continue_instr":18,"return_instr":19,"while_instr":20,"for_instr":21,"dowhile_instr":22,"for_in_instr":23,"decl_arr_instr":24,"llamada":25,"tipo":26,"lista_simbolos":27,"COMA":28,"ID":29,"IGUAL":30,"expr":31,"INCRE":32,"DECRE":33,"RPRINT":34,"PARA":35,"lista_parametros":36,"PARC":37,"RPRINTLN":38,"RIF":39,"LLAVA":40,"LLAVC":41,"RELSE":42,"RSWITCH":43,"lista_cases":44,"RDEFAULT":45,"DOSPUNTOS":46,"case":47,"RCASE":48,"RBREAK":49,"RCONTINUE":50,"RRETURN":51,"RWHILE":52,"RDO":53,"RFOR":54,"actualizacion":55,"RIN":56,"RVOID":57,"RMAIN":58,"lista_parametros_func":59,"parametro_func":60,"lista_dim":61,"lista_exp_arr":62,"CORA":63,"CORC":64,"lista_exp_arr_c":65,"lista_exp":66,"RINT":67,"RDOUBLE":68,"RSTRING":69,"RCHAR":70,"RBOOLEAN":71,"RSTRUCT":72,"MAS":73,"MENOS":74,"MULTI":75,"DIV":76,"PORCENTAJE":77,"POTENCIA":78,"AMPERSON":79,"AND":80,"OR":81,"NOT":82,"MAYORQUE":83,"MAYORIGUAL":84,"MENORIGUAL":85,"MENORQUE":86,"IGUALIGUAL":87,"DIFERENTE":88,"ENTERO":89,"DECIMAL":90,"CADENA":91,"CHAR":92,"NULL":93,"TRUE":94,"FALSE":95,"INTERROGACION":96,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PUNTOCOMA",28:"COMA",29:"ID",30:"IGUAL",32:"INCRE",33:"DECRE",34:"RPRINT",35:"PARA",37:"PARC",38:"RPRINTLN",39:"RIF",40:"LLAVA",41:"LLAVC",42:"RELSE",43:"RSWITCH",45:"RDEFAULT",46:"DOSPUNTOS",48:"RCASE",49:"RBREAK",50:"RCONTINUE",51:"RRETURN",52:"RWHILE",53:"RDO",54:"RFOR",56:"RIN",57:"RVOID",58:"RMAIN",63:"CORA",64:"CORC",67:"RINT",68:"RDOUBLE",69:"RSTRING",70:"RCHAR",71:"RBOOLEAN",72:"RSTRUCT",73:"MAS",74:"MENOS",75:"MULTI",76:"DIV",77:"PORCENTAJE",78:"POTENCIA",79:"AMPERSON",80:"AND",81:"OR",82:"NOT",83:"MAYORQUE",84:"MAYORIGUAL",85:"MENORIGUAL",86:"MENORQUE",87:"IGUALIGUAL",88:"DIFERENTE",89:"ENTERO",90:"DECIMAL",91:"CADENA",92:"CHAR",93:"NULL",94:"TRUE",95:"FALSE",96:"INTERROGACION"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,2],[6,2],[12,2],[27,3],[27,5],[27,1],[27,3],[13,3],[13,2],[13,2],[7,4],[9,4],[14,7],[14,11],[14,9],[15,5],[15,7],[15,7],[16,7],[16,9],[16,10],[44,2],[44,1],[47,4],[36,3],[36,1],[17,1],[18,1],[19,2],[20,7],[22,8],[21,11],[21,11],[55,3],[55,2],[55,2],[23,7],[10,7],[10,6],[11,7],[11,8],[59,3],[59,1],[60,2],[60,1],[25,3],[25,4],[24,5],[61,3],[61,2],[62,4],[62,3],[65,3],[65,1],[66,4],[66,3],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,3],[31,3],[31,3],[31,2],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,5],[31,2],[31,2],[31,3],[31,1],[31,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log($$[$0-1]); this.$ = new Ast();  this.$.instrucciones = $$[$0-1]; return this.$; 
break;
case 2: case 41:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3:
 this.$= new Array(); this.$.push($$[$0]); 
break;
case 4: case 5: case 8: case 9: case 13: case 14: case 15: case 18: case 20: case 21:
 this.$ = $$[$0-1] 
break;
case 6: case 7: case 10: case 11: case 12: case 16: case 17: case 19:
 this.$ = $$[$0] 
break;
case 22:
 this.$ = new Declaracion($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].last_column); 
break;
case 23:
 this.$ = $$[$0-2]; this.$.push(new Simbolo($$[$0],null,null,_$[$0-2].first_line, _$[$0-2].first_column,null)); 
break;
case 24:
 this.$ = $$[$0-4]; this.$.push(new Simbolo($$[$0-2],null,null,_$[$0-4].first_line, _$[$0-4].first_column,$$[$0])); 
break;
case 25:
 this.$ = new Array(); this.$.push(new Simbolo($$[$0],null,null,_$[$0].first_line, _$[$0].first_column,null)); 
break;
case 26:
 this.$ = new Array(); this.$.push(new Simbolo($$[$0-2],null,null,_$[$0-2].first_line, _$[$0-2].first_column,$$[$0])); 
break;
case 27: case 53:
 this.$ = new Asignacion($$[$0-2] ,$$[$0], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 28: case 54:
 this.$ = new Asignacion($$[$0-1] ,new Aritmetica(new Identificador($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), OperadorAritmetico.MAS,new Primitivo(Number(1), $$[$0-1].first_line, $$[$0-1].last_column), $$[$0-1].first_line, $$[$0-1].last_column, false), _$[$0-1].first_line, _$[$0-1].last_column); 
break;
case 29: case 55:
 this.$ = new Asignacion($$[$0-1] ,new Aritmetica(new Identificador($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), OperadorAritmetico.MENOS,new Primitivo(Number(1), $$[$0-1].first_line, $$[$0-1].last_column), $$[$0-1].first_line, $$[$0-1].last_column, false), _$[$0-1].first_line, _$[$0-1].last_column); 
break;
case 30:
 this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, false); 
break;
case 31:
 this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, true); 
break;
case 32:
 this.$ = new If($$[$0-4], $$[$0-1], [], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 33:
 this.$ = new If($$[$0-8], $$[$0-5], $$[$0-1], _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 34:
 this.$ = new If($$[$0-6], $$[$0-3], [$$[$0]], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 35:
 this.$ = new Ifsinllave($$[$0-2], $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 36:
 this.$ = new Ifsinllave($$[$0-4], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 37:
 this.$ = new Ifsinllave($$[$0-4], $$[$0-2], [$$[$0]], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 38:
 this.$ = new Switch($$[$0-4], $$[$0-1], [], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 39:
 this.$ = new Switch($$[$0-6], [], $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 40:
 this.$ = new Switch($$[$0-7], $$[$0-4], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column); 
break;
case 42: case 45:
 this.$ = new Array(); this.$.push($$[$0]);
break;
case 43:
 this.$ = new Case($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 44: case 61: case 72:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 46:
 this.$ = new Detener(_$[$0].first_line, _$[$0].first_column); 
break;
case 47:
 this.$ = new Continuar(_$[$0].first_line, _$[$0].first_column); 
break;
case 48:
 this.$ = new Return($$[$0],_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 49:
 this.$ = new While($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 50:
 this.$ = new DoWhile($$[$0-1], $$[$0-5], _$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 51: case 52:
 this.$ = new For($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 56:
 this.$ = new ForIn($$[$0-5], $$[$0-3], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 57:
this.$ = new Main($$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 58:
this.$ = new Main([],_$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 59:
 this.$ = new Funcion($$[$0-5], $$[$0-6], [], $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column ); 
break;
case 60:
 this.$ = new Funcion($$[$0-6], $$[$0-7], $$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].last_column ); 
break;
case 62: case 73:
 this.$ = new Array(); this.$.push($$[$0]); 
break;
case 63:
 this.$ = {"tipo" : $$[$0-1], "arreglo": false, "id": $$[$0]}; 
break;
case 64:
 this.$ = {"tipo" : TIPO.ANY, "arreglo": false, "id": $$[$0]}; 
break;
case 65:
 this.$ = new Llamada($$[$0-2] , [], _$[$0-2].first_line, _$[$0-2].last_column ); 
break;
case 66:
 this.$ = new Llamada($$[$0-3] , $$[$0-1] , _$[$0-3].first_line, _$[$0-3].last_column ); 
break;
case 67:
 this.$ = new DeclaracionArr($$[$0-4], $$[$0-3], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].last_column ); 
break;
case 68:
 this.$ = $$[$0-2]; this.$.push($$[$0-1]+1); 
break;
case 69:
 this.$ = new Array(); this.$.push(1); 
break;
case 70: case 74:
 this.$ = $$[$0-3]; this.$.push($$[$0-1]); 
break;
case 71: case 75:
 this.$ = new Array(); this.$.push($$[$0-1]); 
break;
case 76:
 this.$ = TIPO.ENTERO; 
break;
case 77:
 this.$ = TIPO.DECIMAL; 
break;
case 78:
 this.$ = TIPO.CADENA; 
break;
case 79:
 this.$ = TIPO.CHARACTER; 
break;
case 80:
 this.$ = TIPO.BOOLEANO; 
break;
case 81:
 this.$ = TIPO.VOID; 
break;
case 82:
 this.$ = TIPO.STRUCT; 
break;
case 83:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.MAS,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 84:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.MENOS,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 85:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.POR,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 86:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.DIV,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 87:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.MOD,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 88:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.POT,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 89:
 this.$ = new Aritmetica($$[$0-2],OperadorAritmetico.AMPERSON,$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 90:
 this.$ = new Aritmetica($$[$0],OperadorAritmetico.UMENOS,$$[$0], _$[$0-1].first_line, _$[$0-1].first_column, true); 
break;
case 91: case 112:
 this.$ = $$[$0-1]; 
break;
case 92:
 this.$ = new Logica($$[$0-2], OperadorLogico.AND, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 93:
 this.$ = new Logica($$[$0-2], OperadorLogico.OR, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 94:
 this.$ = new Logica($$[$0], OperadorLogico.NOT, null, $$[$0-1].first_line, $$[$0-1].last_column, true); 
break;
case 95:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.MAYORQUE, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 96:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.MAYORIGUAL, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 97:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.MENORIGUAL, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 98:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.MENORQUE, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 99:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.IGUALIGUAL, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 100:
 this.$ = new Relacional($$[$0-2], OperadorRelacional.DIFERENTE, $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false); 
break;
case 101:
 this.$ = new Primitivo(Number($$[$0]), TIPO.ENTERO, _$[$0].first_line, _$[$0].first_column); 
break;
case 102:
 this.$ = new Primitivo(Number($$[$0]), TIPO.DECIMAL, _$[$0].first_line, _$[$0].first_column); 
break;
case 103:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new Primitivo($$[$0], TIPO.CADENA, _$[$0].first_line, _$[$0].first_column); 
break;
case 104:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new Primitivo($$[$0], TIPO.CHARACTER, _$[$0].first_line, _$[$0].first_column); 
break;
case 105:
 this.$ = new Primitivo(null, TIPO.NULO, _$[$0].first_line, _$[$0].first_column); 
break;
case 106:
 this.$ = new Primitivo(true, TIPO.BOOLEANO, _$[$0].first_line, _$[$0].first_column); 
break;
case 107:
 this.$ = new Primitivo(false, TIPO.BOOLEANO, _$[$0].first_line, _$[$0].first_column); 
break;
case 108:
 this.$ = new Identificador($$[$0] , _$[$0].first_line, _$[$0].last_column); 
break;
case 109:
this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 110:
 this.$ = new Aritmetica(new Identificador($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), OperadorAritmetico.MAS,new Primitivo(Number(1), $$[$0-1].first_line, $$[$0-1].last_column), $$[$0-1].first_line, $$[$0-1].last_column, false); 
break;
case 111:
 this.$ = new Aritmetica(new Identificador($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), OperadorAritmetico.MENOS,new Primitivo(Number(1), $$[$0-1].first_line, $$[$0-1].last_column), $$[$0-1].first_line, $$[$0-1].last_column, false); 
break;
case 113:
 this.$ = $$[$0]; 
break;
case 114:
 this.$ = new AccesoArr($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh},{1:[3]},{5:[1,41],6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh},o($Vi,[2,3]),{8:[1,43]},{8:[1,44]},o($Vj,[2,6]),o($Vj,[2,7]),{8:[1,45]},{8:[1,46]},o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,12]),{8:[1,47]},{8:[1,48]},{8:[1,49]},o($Vj,[2,16]),o($Vj,[2,17]),{8:[1,50]},o($Vj,[2,19]),{8:[1,51]},{8:[1,52]},{35:[1,53]},{35:[1,54]},o($Vk,$Vl,{58:[1,55]}),{27:57,29:[1,56],61:58,63:[1,59]},{30:$Vm,32:$Vn,33:$Vo,35:$Vp},{35:[1,64]},{35:[1,65]},{8:[2,46]},{8:[2,47]},{25:79,29:$Vq,31:66,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{35:[1,80]},{29:[1,82],35:[1,81]},{40:[1,83]},o($Vk,[2,76]),o($Vk,[2,77]),o($Vk,[2,78]),o($Vk,[2,79]),o($Vk,[2,80]),o($Vk,[2,82]),{1:[2,1]},o($Vi,[2,2]),o($Vj,[2,4]),o($Vj,[2,5]),o($Vj,[2,8]),o($Vj,[2,9]),o($Vj,[2,13]),o($Vj,[2,14]),o($Vj,[2,15]),o($Vj,[2,18]),o($Vj,[2,20]),o($Vj,[2,21]),{25:79,29:$Vq,31:85,35:$Vr,36:84,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{25:79,29:$Vq,31:85,35:$Vr,36:86,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{35:[1,87]},o($VC,$VD,{30:$VE,35:[1,88]}),{8:[2,22],28:[1,90]},{29:[1,91],63:[1,92]},{64:[1,93]},{25:79,29:$Vq,31:94,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{8:[2,28]},{8:[2,29]},{25:79,29:$Vq,31:85,35:$Vr,36:96,37:[1,95],63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{25:79,29:$Vq,31:97,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{25:79,29:$Vq,31:98,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{8:[2,48],73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,96:$VU},{25:79,29:$Vq,31:115,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{25:79,29:$Vq,31:116,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{25:79,29:$Vq,31:117,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},o($VV,[2,101]),o($VV,[2,102]),o($VV,[2,103]),o($VV,[2,104]),o($VV,[2,105]),o($VV,[2,106]),o($VV,[2,107]),o($VV,[2,108],{66:120,32:[1,118],33:[1,119],35:$Vp,63:[1,121]}),{25:79,29:$Vq,31:123,35:$Vr,63:$Vs,65:122,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},o($VV,[2,113]),{25:79,29:$Vq,31:124,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{12:126,13:125,26:128,29:[1,127],57:$VW,67:$Vc,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh},{56:[1,130]},{4:131,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh},{28:$VX,37:[1,132]},o($VY,[2,45],{73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,96:$VU}),{28:$VX,37:[1,134]},{37:[1,135]},{26:139,29:$VZ,37:[1,136],57:$VW,59:137,60:138,67:$Vc,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh},{25:79,29:$Vq,31:141,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{29:[1,142]},{30:[1,143]},{64:[1,144]},o($Vk,[2,69]),{8:[2,27],73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,96:$VU},o($VV,[2,65]),{28:$VX,37:[1,145]},{37:[1,146],73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,96:$VU},{37:[1,147],73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,96:$VU},{25:79,29:$Vq,31:148,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{25:79,29:$Vq,31:149,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{25:79,29:$Vq,31:150,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{25:79,29:$Vq,31:151,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{25:79,29:$Vq,31:152,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{25:79,29:$Vq,31:153,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{25:79,29:$Vq,31:154,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{25:79,29:$Vq,31:155,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{25:79,29:$Vq,31:156,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{25:79,29:$Vq,31:157,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{25:79,29:$Vq,31:158,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{25:79,29:$Vq,31:159,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{25:79,29:$Vq,31:160,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{25:79,29:$Vq,31:161,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{25:79,29:$Vq,31:162,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{25:79,29:$Vq,31:163,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},o($VV,[2,90]),{37:[1,164],73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,96:$VU},o($V_,[2,94],{73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT}),o($VV,[2,110]),o($VV,[2,111]),o($VV,[2,114],{63:[1,165]}),{25:79,29:$Vq,31:166,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{28:$V$,64:[1,167]},o($V01,[2,73],{73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,96:$VU}),{37:[1,169],73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,96:$VU},{8:[1,170]},{8:[1,171]},{30:$Vm,32:$Vn,33:$Vo},{27:57,29:[1,172]},{29:$Vl},{25:79,29:$Vq,31:173,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,41:[1,174],43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh},{8:[2,30]},{25:79,29:$Vq,31:175,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{8:[2,31]},{40:[1,176]},{40:[1,177]},{28:[1,179],37:[1,178]},o($VY,[2,62]),{29:[1,180]},o($VY,[2,64]),o($VC,[2,26],{73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,96:$VU}),o($VC,[2,23],{30:[1,181]}),{62:182,63:[1,183]},o($Vk,[2,68]),o($VV,[2,66]),{6:185,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,40:$V11,43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh},{40:[1,186]},o($V21,[2,83],{75:$VH,76:$VI,77:$VJ,78:$VK}),o($V21,[2,84],{75:$VH,76:$VI,77:$VJ,78:$VK}),o($V31,[2,85],{78:$VK}),o($V31,[2,86],{78:$VK}),o($V31,[2,87],{78:$VK}),o($VV,[2,88]),o($V21,[2,89],{75:$VH,76:$VI,77:$VJ,78:$VK}),o($V_,[2,92],{73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT}),o([8,28,37,40,46,64,81,96],[2,93],{73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT}),o($V41,[2,95],{73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($V41,[2,96],{73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($V41,[2,97],{73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($V41,[2,98],{73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($V51,[2,99],{73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,83:$VO,84:$VP,85:$VQ,86:$VR}),o($V51,[2,100],{73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,83:$VO,84:$VP,85:$VQ,86:$VR}),{46:[1,187],73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,96:$VU},o($VV,[2,91]),{25:79,29:$Vq,31:188,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{64:[1,189],73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,96:$VU},o($VV,[2,112]),{25:79,29:$Vq,31:190,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{40:[1,191]},{25:79,29:$Vq,31:192,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{25:79,29:$Vq,31:193,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},o($VC,$VD,{30:$VE}),{40:[1,194],73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,96:$VU},{52:[1,195]},o($VY,[2,44],{73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,96:$VU}),{4:196,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,41:[1,197],43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh},{4:198,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh},{40:[1,199]},{26:139,29:$VZ,57:$VW,60:200,67:$Vc,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh},o($VY,[2,63]),{25:79,29:$Vq,31:201,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{8:[2,67],63:[1,202]},{25:79,29:$Vq,31:123,35:$Vr,63:$Vs,65:203,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{4:204,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh},o($Vi,[2,35],{42:[1,205]}),{44:206,45:[1,207],47:208,48:$V61},{25:79,29:$Vq,31:210,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{64:[1,211],73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,96:$VU},o($V71,[2,75]),o($V01,[2,72],{73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,96:$VU}),{4:212,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh},{8:[1,213],73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,96:$VU},{8:[1,214],73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,96:$VU},{4:215,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh},{35:[1,216]},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,41:[1,217],43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh},o($Vj,[2,58]),{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,41:[1,218],43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh},{4:219,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh},o($VY,[2,61]),o($VC,[2,24],{73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,96:$VU}),{25:79,29:$Vq,31:123,35:$Vr,63:$Vs,65:220,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{28:$V$,64:[1,221]},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,41:[1,222],43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh},{6:223,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:224,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh},{41:[1,225],45:[1,226],47:227,48:$V61},{46:[1,228]},o($V81,[2,42]),{25:79,29:$Vq,31:229,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},o([8,28,37,40,46,64],[2,109],{73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,96:$VU}),o($V71,[2,74]),{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,41:[1,230],43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh},{29:$V91,55:231},{29:$V91,55:233},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,41:[1,234],43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh},{25:79,29:$Vq,31:235,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},o($Vj,[2,57]),o($Vj,[2,59]),{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,41:[1,236],43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh},{28:$V$,64:[1,237]},o($Va1,[2,71]),o($Vi,[2,32],{42:[1,238]}),o($Vj,[2,36]),o($Vj,[2,37]),o($Vj,[2,38]),{46:[1,239]},o($V81,[2,41]),{4:240,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh},{46:[1,241],73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,96:$VU},o($Vj,[2,49]),{37:[1,242]},{30:[1,243],32:[1,244],33:[1,245]},{37:[1,246]},o($Vj,[2,56]),{37:[1,247],73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,96:$VU},o($Vj,[2,60]),o($Va1,[2,70]),{14:249,39:[1,250],40:[1,248]},{4:251,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,41:[1,252],43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh},{4:253,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh},{40:[1,254]},{25:79,29:$Vq,31:255,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},{37:[2,54]},{37:[2,55]},{40:[1,256]},{8:[2,50]},{4:257,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh},o($Vj,[2,34]),{35:[1,258]},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,41:[1,259],43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh},o($Vj,[2,39]),o($V81,[2,43],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,6:42,29:$V0,34:$V1,38:$V2,39:$V3,43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh}),{4:260,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh},{37:[2,53],73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,96:$VU},{4:261,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,41:[1,262],43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh},{25:79,29:$Vq,31:263,35:$Vr,63:$Vs,74:$Vt,82:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB},o($Vj,[2,40]),{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,41:[1,264],43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:25,29:$V0,34:$V1,38:$V2,39:$V3,41:[1,265],43:$V4,49:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,57:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh},o($Vj,[2,33]),{37:[1,266],73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM,81:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,96:$VU},o($Vj,[2,51]),o($Vj,[2,52]),{40:$V11}],
defaultActions: {29:[2,46],30:[2,47],41:[2,1],61:[2,28],62:[2,29],129:[2,81],132:[2,30],134:[2,31],244:[2,54],245:[2,55],247:[2,50]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


    /*::::::::::::::::::     AST      ::::::::::::::::::*/
    const { Ast } = require("../dist/Ast/Ast");
    /*::::::::::::::::::     ENUMs      ::::::::::::::::::*/
    const { TIPO, OperadorAritmetico, OperadorLogico, OperadorRelacional } = require("../dist/TablaSimbolos/Tipo");
    /*::::::::::::::::::     Expresiones      ::::::::::::::::::*/
    const { Primitivo } = require("../dist/Expresiones/Primitivo");
    const { Identificador } = require("../dist/Expresiones/Identificador");
    const { Ternario } = require("../dist/Expresiones/Ternario");
    const { Llamada } = require("../dist/Expresiones/Llamada");
    /*..............     Operaciones      ...............*/
    const { Aritmetica } = require("../dist/Expresiones/Operaciones/Aritmeticas");
    const { Logica } = require("../dist/Expresiones/Operaciones/Logicas");
    const { Relacional } = require("../dist/Expresiones/Operaciones/Relacionales");
    /*::::::::::::::::::     Instrucciones      ::::::::::::::::::*/
    const { Print } = require("../dist/Instrucciones/Print");
    const { Main } = require("../dist/Instrucciones/Metodos/Main");
    const { Funcion } = require("../dist/Instrucciones/Metodos/Funcion");
    
    /*..............     Condicionales      ...............*/
    const { If } = require("../dist/Instrucciones/Condicionales/If");
    const { Ifsinllave } = require("../dist/Instrucciones/Condicionales/Ifsinllave");
    const { Switch } = require("../dist/Instrucciones/Condicionales/Switch");
    const { Case } = require("../dist/Instrucciones/Condicionales/Case");
    /*..............     Transferencia      ...............*/
    const { Detener } = require("../dist/Instrucciones/Transferencia/Break");
    const { Continuar } = require("../dist/Instrucciones/Transferencia/Continuar");
    const { Return } = require("../dist/Instrucciones/Transferencia/Return");
    /*..............     Ciclicas      ...............*/
    const { While } = require("../dist/Instrucciones/Ciclicas/While");
    const { DoWhile } = require("../dist/Instrucciones/Ciclicas/DoWhile");
    const { For } = require("../dist/Instrucciones/Ciclicas/For");
    const { ForIn } = require("../dist/Instrucciones/Ciclicas/ForIn");
    /*..............     Declaracion y asignacion      ...............*/
    const { Declaracion } = require("../dist/Instrucciones/Declaracion");
    const { Asignacion } = require("../dist/Instrucciones/Asignacion");
    const { Simbolo } = require("../dist/TablaSimbolos/Simbolo");
    /*..............     Arreglos      ...............*/
    const { DeclaracionArr } = require("../dist/Instrucciones/Arreglos/DeclaracionArr");
    const { AccesoArr } = require("../dist/Expresiones/Arreglos/AccesoArr");

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:this.begin('comment');
break;
case 2:this.popState();
break;
case 3:/* skip comment content*/
break;
case 4:/* skip whitespace */
break;
case 5: return 34 
break;
case 6: return 38 
break;
case 7: return 39 
break;
case 8: return 42 
break;
case 9: return 43 
break;
case 10: return 48 
break;
case 11: return 45 
break;
case 12: return 52 
break;
case 13: return 54 
break;
case 14: return 53 
break;
case 15: return 56 
break;
case 16: return 93 
break;
case 17: return 94 
break;
case 18: return 95 
break;
case 19: return 67 
break;
case 20: return 68 
break;
case 21: return 71 
break;
case 22: return 70 
break;
case 23: return 69 
break;
case 24: return 57 
break;
case 25: return 58 
break;
case 26: return 72 
break;
case 27: return 49 
break;
case 28: return 50 
break;
case 29: return 51 
break;
case 30: return 32
break;
case 31: return 33
break;
case 32: return 73 
break;
case 33: return 74 
break;
case 34: return 75 
break;
case 35: return 76 
break;
case 36: return 77 
break;
case 37: return 78 
break;
case 38: return 84 
break;
case 39: return 85 
break;
case 40: return 86 
break;
case 41: return 83 
break;
case 42: return 88 
break;
case 43: return 87 
break;
case 44: return 30 
break;
case 45: return 80 
break;
case 46: return 81 
break;
case 47: return 82 
break;
case 48: return 79 
break;
case 49: return 35 
break;
case 50: return 37 
break;
case 51: return 63 
break;
case 52: return 64 
break;
case 53: return 40 
break;
case 54: return 41 
break;
case 55: return 'PUNTO' 
break;
case 56: return 8 
break;
case 57: return 28 
break;
case 58: return 96 
break;
case 59: return 46 
break;
case 60:return 90;
break;
case 61:return 89;
break;
case 62:return 29;
break;
case 63:return 91;
break;
case 64:return 92;
break;
case 65:
                                        console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                                    
break;
case 66:/* skip whitespace */
break;
case 67:return 5
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*)/i,/^(?:\*\/)/i,/^(?:.)/i,/^(?:\s+)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:in\b)/i,/^(?:null\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:String\b)/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?:struct\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:&)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\.)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\?)/i,/^(?::)/i,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/i,/^(?:[0-9]+)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_ñÑ]*)/i,/^(?:("((\\([\'\"\\bfnrtv]))|([^\"\\]+))*"))/i,/^(?:('((\\([\'\"\\bfnrtv]))|([^\'\\]))'))/i,/^(?:.)/i,/^(?:[\r\n\t])/i,/^(?:$)/i],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}